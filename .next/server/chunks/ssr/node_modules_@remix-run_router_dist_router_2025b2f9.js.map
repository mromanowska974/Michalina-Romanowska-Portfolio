{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"router.js","sources":["file://D%3A/Kodowanko/React/portfolio/node_modules/%40remix-run/router/history.ts","file://D%3A/Kodowanko/React/portfolio/node_modules/%40remix-run/router/utils.ts","file://D%3A/Kodowanko/React/portfolio/node_modules/%40remix-run/router/router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => DataFunctionReturnValue\n  ) => Promise<DataStrategyResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n  fetcherKey: string | null;\n}\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface DataStrategyResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<Record<string, DataStrategyResult>>;\n}\n\nexport interface AgnosticPatchRoutesOnNavigationFunction<\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> {\n  (opts: {\n    path: string;\n    matches: M[];\n    patch: (routeId: string | null, children: AgnosticRouteObject[]) => void;\n  }): void | Promise<void>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: string[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nexport function matchRoutesImpl<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename: string,\n  allowPartial: boolean\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string,\n  allowPartial = false\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    let route = meta.route;\n\n    if (\n      !match &&\n      end &&\n      allowPartial &&\n      !routesMeta[routesMeta.length - 1].route.index\n    ) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false,\n        },\n        remainingPathname\n      );\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nexport function decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DataWithResponseInit<D> {\n  type: string = \"DataWithResponseInit\";\n  data: D;\n  init: ResponseInit | null;\n\n  constructor(data: D, init?: ResponseInit) {\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nexport function data<D>(data: D, init?: number | ResponseInit) {\n  return new DataWithResponseInit(\n    data,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const replace: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  DataStrategyResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n  AgnosticPatchRoutesOnNavigationFunction,\n  DataWithResponseInit,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  matchRoutesImpl,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE DO NOT USE\n   *\n   * Patch additional children routes into an existing parent route\n   * @param routeId The parent route id or a callback function accepting `patch`\n   *                to perform batch patching\n   * @param children The additional children routes\n   */\n  patchRoutes(routeId: string | null, children: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  v7_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_patchRoutesOnNavigation?: AgnosticPatchRoutesOnNavigationFunction;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.unstable_patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // FIFO queue of previously discovered routes to prevent re-calling on\n  // subsequent navigations to the same path\n  let discoveredRoutesMaxSize = 1000;\n  let discoveredRoutes = new Set<string>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized: boolean;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: Set<string> = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map<\n    string,\n    ReturnType<AgnosticPatchRoutesOnNavigationFunction>\n  >();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate: (() => void) | undefined = undefined;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (unblockBlockerHistoryUpdate) {\n          unblockBlockerHistoryUpdate();\n          unblockBlockerHistoryUpdate = undefined;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          let nextHistoryUpdatePromise = new Promise<void>((resolve) => {\n            unblockBlockerHistoryUpdate = resolve;\n          });\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked, after the url\n              // restoration is also complete.  See:\n              // https://github.com/remix-run/react-router/issues/11613\n              nextHistoryUpdatePromise.then(() => init.history.go(delta));\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      {\n        overrideNavigation: state.navigation,\n        // Proxy through any rending view transition\n        enableViewTransition: pendingViewTransitionEnabled === true,\n      }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (\n          isErrorResult(result) &&\n          isRouteErrorResponse(result.error) &&\n          result.error.status === 404\n        ) {\n          pendingNavigationController = null;\n\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error,\n            },\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors,\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        state,\n        request,\n        [actionMatch],\n        matches,\n        null\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState =\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...(actionData !== undefined ? { actionData } : {}),\n          },\n          {\n            flushSync,\n          }\n        );\n      }\n\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: error,\n          },\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates: Partial<RouterState> = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getUpdatedActionData(\n    pendingActionResult: PendingActionResult | undefined\n  ): Record<string, RouteData> | null | undefined {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data as any,\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(\n    revalidatingFetchers: RevalidatingFetcher[]\n  ) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        undefined,\n        fetcher ? fetcher.data : undefined\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m: AgnosticDataRouteMatch) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId,\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      state,\n      fetchRequest,\n      [match],\n      requestMatches,\n      key\n    );\n    let actionResult = actionResults[match.route.id];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      state,\n      fetchRequest,\n      [match],\n      matches,\n      key\n    );\n    let result = results[match.route.id];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    isNavigation: boolean,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true || redirect.response.headers.has(\"X-Remix-Replace\")\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    state: RouterState,\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    fetcherKey: string | null\n  ): Promise<Record<string, DataResult>> {\n    let results: Record<string, DataStrategyResult>;\n    let dataResults: Record<string, DataResult> = {};\n    try {\n      results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        state,\n        request,\n        matchesToLoad,\n        matches,\n        fetcherKey,\n        manifest,\n        mapRouteProperties\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach((m) => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e,\n        };\n      });\n      return dataResults;\n    }\n\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result as Response;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            routeId,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          ),\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(\n          result\n        );\n      }\n    }\n\n    return dataResults;\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    state: RouterState,\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let currentMatches = state.matches;\n\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\n      \"loader\",\n      state,\n      request,\n      matchesToLoad,\n      matches,\n      null\n    );\n\n    let fetcherResultsPromise = Promise.all(\n      fetchersToLoad.map(async (f) => {\n        if (f.matches && f.match && f.controller) {\n          let results = await callDataStrategy(\n            \"loader\",\n            state,\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            [f.match],\n            f.matches,\n            f.key\n          );\n          let result = results[f.match.route.id];\n          // Fetcher results are keyed by fetcher key from here on out, not routeId\n          return { [f.key]: result };\n        } else {\n          return Promise.resolve({\n            [f.key]: {\n              type: ResultType.error,\n              error: getInternalRouterError(404, {\n                pathname: f.path,\n              }),\n            } as ErrorResult,\n          });\n        }\n      })\n    );\n\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce(\n      (acc, r) => Object.assign(acc, r),\n      {}\n    );\n\n    await Promise.all([\n      resolveNavigationDeferredResults(\n        matches,\n        loaderResults,\n        request.signal,\n        currentMatches,\n        state.loaderData\n      ),\n      resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname: string) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n\n    return { notFoundMatches: matches, route, error };\n  }\n\n  function handleDiscoverRouteError(\n    pathname: string,\n    discoverResult: DiscoverRoutesErrorResult\n  ) {\n    return {\n      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,\n      error: getInternalRouterError(400, {\n        type: \"route-discovery\",\n        pathname,\n        message:\n          discoverResult.error != null && \"message\" in discoverResult.error\n            ? discoverResult.error\n            : String(discoverResult.error),\n      }),\n    };\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function checkFogOfWar(\n    matches: AgnosticDataRouteMatch[] | null,\n    routesToUse: AgnosticDataRouteObject[],\n    pathname: string\n  ): { active: boolean; matches: AgnosticDataRouteMatch[] | null } {\n    if (patchRoutesOnNavigationImpl) {\n      // Don't bother re-calling patchRouteOnMiss for a path we've already\n      // processed.  the last execution would have patched the route tree\n      // accordingly so `matches` here are already accurate.\n      if (discoveredRoutes.has(pathname)) {\n        return { active: false, matches };\n      }\n\n      if (!matches) {\n        let fogMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n\n    return { active: false, matches: null };\n  }\n\n  type DiscoverRoutesSuccessResult = {\n    type: \"success\";\n    matches: AgnosticDataRouteMatch[] | null;\n  };\n  type DiscoverRoutesErrorResult = {\n    type: \"error\";\n    error: any;\n    partialMatches: AgnosticDataRouteMatch[];\n  };\n  type DiscoverRoutesAbortedResult = { type: \"aborted\" };\n  type DiscoverRoutesResult =\n    | DiscoverRoutesSuccessResult\n    | DiscoverRoutesErrorResult\n    | DiscoverRoutesAbortedResult;\n\n  async function discoverRoutes(\n    matches: AgnosticDataRouteMatch[],\n    pathname: string,\n    signal: AbortSignal\n  ): Promise<DiscoverRoutesResult> {\n    let partialMatches: AgnosticDataRouteMatch[] | null = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      try {\n        await loadLazyRouteChildren(\n          patchRoutesOnNavigationImpl!,\n          pathname,\n          partialMatches,\n          routesToUse,\n          manifest,\n          mapRouteProperties,\n          pendingPatchRoutes,\n          signal\n        );\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: newMatches };\n      }\n\n      let newPartialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (\n        !newPartialMatches ||\n        (partialMatches.length === newPartialMatches.length &&\n          partialMatches.every(\n            (m, i) => m.route.id === newPartialMatches![i].route.id\n          ))\n      ) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: null };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function addToFifoQueue(path: string, queue: Set<string>) {\n    if (queue.size >= discoveredRoutesMaxSize) {\n      let first = queue.values().next().value;\n      queue.delete(first);\n    }\n    queue.add(path);\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  function patchRoutes(\n    routeId: string | null,\n    children: AgnosticRouteObject[]\n  ): void {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties\n    );\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<Record<string, DataResult>> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      null,\n      request,\n      matchesToLoad,\n      matches,\n      null,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    let dataResults: Record<string, DataResult> = {};\n    await Promise.all(\n      matches.map(async (match) => {\n        if (!(match.route.id in results)) {\n          return;\n        }\n        let result = results[match.route.id];\n        if (isRedirectDataStrategyResultResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            match.route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        dataResults[match.route.id] =\n          await convertDataStrategyResultToDataResult(result);\n      })\n    );\n    return dataResults;\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: Set<string>,\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Idempotent utility to execute patchRoutesOnNavigation() to lazily load route\n * definitions and update the routes/routeManifest\n */\nasync function loadLazyRouteChildren(\n  patchRoutesOnNavigationImpl: AgnosticPatchRoutesOnNavigationFunction,\n  path: string,\n  matches: AgnosticDataRouteMatch[],\n  routes: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  pendingRouteChildren: Map<\n    string,\n    ReturnType<typeof patchRoutesOnNavigationImpl>\n  >,\n  signal: AbortSignal\n) {\n  let key = [path, ...matches.map((m) => m.route.id)].join(\"-\");\n  try {\n    let pending = pendingRouteChildren.get(key);\n    if (!pending) {\n      pending = patchRoutesOnNavigationImpl({\n        path,\n        matches,\n        patch: (routeId, children) => {\n          if (!signal.aborted) {\n            patchRoutesImpl(\n              routeId,\n              children,\n              routes,\n              manifest,\n              mapRouteProperties\n            );\n          }\n        },\n      });\n      pendingRouteChildren.set(key, pending);\n    }\n\n    if (pending && isPromise<AgnosticRouteObject[]>(pending)) {\n      await pending;\n    }\n  } finally {\n    pendingRouteChildren.delete(key);\n  }\n}\n\nfunction patchRoutesImpl(\n  routeId: string | null,\n  children: AgnosticRouteObject[],\n  routesToUse: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction\n) {\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [routeId, \"patch\", String(route.children?.length || \"0\")],\n      manifest\n    );\n    if (route.children) {\n      route.children.push(...dataChildren);\n    } else {\n      route.children = dataChildren;\n    }\n  } else {\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [\"patch\", String(routesToUse.length || \"0\")],\n      manifest\n    );\n    routesToUse.push(...dataChildren);\n  }\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy({\n  matches,\n}: DataStrategyFunctionArgs): ReturnType<DataStrategyFunction> {\n  let matchesToLoad = matches.filter((m) => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));\n  return results.reduce(\n    (acc, result, i) =>\n      Object.assign(acc, { [matchesToLoad[i].route.id]: result }),\n    {}\n  );\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  state: RouterState | null,\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  fetcherKey: string | null,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<Record<string, DataStrategyResult>> {\n  let loadRouteDefinitionsPromises = matches.map((m) =>\n    m.route.lazy\n      ? loadLazyRouteModule(m.route, mapRouteProperties, manifest)\n      : undefined\n  );\n\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some((m) => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve: DataStrategyMatch[\"resolve\"] = async (handlerOverride) => {\n      if (\n        handlerOverride &&\n        request.method === \"GET\" &&\n        (match.route.lazy || match.route.loader)\n      ) {\n        shouldLoad = true;\n      }\n      return shouldLoad\n        ? callLoaderOrAction(\n            type,\n            request,\n            match,\n            loadRoutePromise,\n            handlerOverride,\n            requestContext\n          )\n        : Promise.resolve({ type: ResultType.data, result: undefined });\n    };\n\n    return {\n      ...match,\n      shouldLoad,\n      resolve,\n    };\n  });\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext,\n  });\n\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n\n  return results;\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  loadRoutePromise: Promise<void> | undefined,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<DataStrategyResult> {\n  let result: DataStrategyResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<DataStrategyResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<DataStrategyResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<DataStrategyResult> = (async () => {\n      try {\n        let val = await (handlerOverride\n          ? handlerOverride((ctx: unknown) => actualHandler(ctx))\n          : actualHandler());\n        return { type: \"data\", result: val };\n      } catch (e) {\n        return { type: \"error\", result: e };\n      }\n    })();\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadRoutePromise,\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertDataStrategyResultToDataResult(\n  dataStrategyResult: DataStrategyResult\n): Promise<DataResult> {\n  let { result, type } = dataStrategyResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: result.init?.status,\n        };\n      }\n\n      // Convert thrown unstable_data() to ErrorResponse instances\n      result = new ErrorResponseImpl(\n        result.init?.status || 500,\n        undefined,\n        result.data\n      );\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers\n        ? new Headers(result.init.headers)\n        : undefined,\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach((match) => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: Record<string, DataResult>,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach((rf) => {\n    let { key, match, controller } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\" | \"route-discovery\";\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (type === \"route-discovery\") {\n      errorMessage =\n        `Unable to match URL \"${pathname}\" - the \\`unstable_patchRoutesOnNavigation()\\` ` +\n        `function threw the following error:\\n${message}`;\n    } else if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: Record<string, DataResult>\n): { key: string; result: RedirectResult } | undefined {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return { key, result };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isPromise<T = unknown>(val: unknown): val is Promise<T> {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isDataStrategyResult(result: unknown): result is DataStrategyResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectDataStrategyResultResult(result: DataStrategyResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDataWithResponseInit(\n  value: any\n): value is DataWithResponseInit<unknown> {\n  return (\n    typeof value === \"object\" &&\n    value != null &&\n    \"type\" in value &&\n    \"data\" in value &&\n    \"init\" in value &&\n    value.type === \"DataWithResponseInit\"\n  );\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveNavigationDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  signal: AbortSignal,\n  currentMatches: AgnosticDataRouteMatch[],\n  currentLoaderData: RouteData\n) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then((result) => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveFetcherDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  revalidatingFetchers: RevalidatingFetcher[]\n) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, routeId, controller } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(\n        controller,\n        \"Expected an AbortController for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, controller.signal, true).then(\n        (result) => {\n          if (result) {\n            results[key] = result;\n          }\n        }\n      );\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n//#endregion\n"],"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_extends","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","assign","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","String","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","splatValue","regexpSource","_","RegExp","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","DataWithResponseInit","constructor","type","AbortedDeferredError","DeferredData","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","cancel","abort","k","resolveData","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","dataStrategyImpl","unstable_dataStrategy","defaultDataStrategy","patchRoutesOnNavigationImpl","unstable_patchRoutesOnNavigation","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","v7_skipActionErrorRevalidation","unlistenHistory","discoveredRoutesMaxSize","discoveredRoutes","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","fogOfWar","checkFogOfWar","active","initialized","m","lazy","loader","errors","isRouteInitialized","hydrate","findIndex","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","pendingPatchRoutes","unblockBlockerHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","nextHistoryUpdatePromise","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","completeNavigation","_temp","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","handleNavigational404","isHashChangeOnly","request","createClientSideRequest","pendingActionResult","findNearestBoundary","actionResult","handleAction","shortCircuited","routeId","isErrorResult","getLoadingNavigation","updatedMatches","handleLoaders","fetcherSubmission","getActionDataForCommit","isFogOfWar","getSubmittingNavigation","discoverResult","discoverRoutes","boundaryId","handleDiscoverRouteError","partialMatches","actionMatch","getTargetMatch","method","results","callDataStrategy","isRedirectResult","normalizeRedirectLocation","startRedirectNavigation","isDeferredResult","boundaryMatch","activeSubmission","getSubmissionFromNavigation","shouldUpdateNavigationState","getUpdatedActionData","matchesToLoad","revalidatingFetchers","getMatchesToLoad","cancelActiveDeferreds","updatedFetchers","markFetchRedirectsDone","updates","getUpdatedRevalidatingFetchers","rf","abortFetcher","abortPendingFetchRevalidations","f","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","revalidatingFetcher","getLoadingFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","detectAndHandle405Error","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResults","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","isNavigation","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","fetcherKey","dataResults","callDataStrategyImpl","isRedirectDataStrategyResultResult","normalizeRelativeRoutingRedirectResponse","convertDataStrategyResultToDataResult","fetchersToLoad","currentMatches","loaderResultsPromise","fetcherResultsPromise","all","resolveNavigationDeferredResults","resolveFetcherDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","_ref4","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","fogMatches","isNonHMR","loadLazyRouteChildren","newMatches","addToFifoQueue","newPartialMatches","queue","values","next","_internalSetRoutes","newRoutes","patchRoutes","patchRoutesImpl","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","v7_throwAbortReason","query","_temp3","requestContext","skipLoaderErrorBubbling","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp4","find","_result$activeDeferre","routeMatch","submit","loadRouteData","isDataStrategyResult","isRedirectResponse","isRouteRequest","throwStaticHandlerAbortedError","Location","loaderRequest","Request","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","reason","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref5","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryMatches","isInitialLoad","skipActionErrorRevalidation","currentUrl","nextUrl","actionStatus","shouldSkipRevalidation","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","pendingRouteChildren","pending","patch","isPromise","_route$children","dataChildren","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","_ref6","shouldLoad","loadRouteDefinitionsPromises","dsMatches","loadRoutePromise","handlerOverride","callLoaderOrAction","staticContext","onReject","runHandler","handler","actualHandler","ctx","handlerPromise","val","handlerError","dataStrategyResult","contentType","isDataWithResponseInit","_result$init2","_result$init","isDeferredData","_result$init3","_result$init4","deferred","_result$init5","_result$init6","trimmedMatches","normalizedLocation","protocol","isSameBasename","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","_temp5","errorMessage","isRevalidatingLoader","unwrap","getAll","_window","transitions","sessionPositions","sessionStorage","getItem","setItem"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gFAAA;AACA,6BAAA;AACA,gFAAA;AAEA;;CAEG,OACSA,OAsBX;AAtBD,CAAA,SAAYA,MAAM,EAAA;IAChB;;;;;;GAMG,GACHA,MAAA,CAAA,KAAA,CAAA,GAAA,KAAW,CAAA;IAEX;;;;GAIG,GACHA,MAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;IAEb;;;GAGG,GACHA,MAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACrB,CAAC,EAtBWA,MAAM,IAAA,CAANA,MAAM,GAsBjB,CAAA,CAAA,CAAA,CAAA,CAAA;AAqKD,MAAMC,iBAAiB,GAAG,UAAU,CAAA;AA+BpC;;;CAGG,GACa,SAAAC,mBAAmBA,CACjCC,OAAA,EAAkC;IAAA,IAAlCA,OAAA,KAAA,KAAA,CAAA,EAAA;QAAAA,OAAA,GAAgC,CAAA,CAAE,CAAA;IAAA,CAAA;IAElC,IAAI,EAAEC,cAAc,GAAG;QAAC,GAAG;KAAC,EAAEC,YAAY,EAAEC,QAAQ,GAAG,KAAA,EAAO,GAAGH,OAAO,CAAA;IACxE,IAAII,OAAmB,CAAC,CAAA,qDAAA;IACxBA,OAAO,GAAGH,cAAc,CAACI,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,GACxCC,oBAAoB,CAClBF,KAAK,EACL,OAAOA,KAAK,KAAK,QAAQ,GAAG,IAAI,GAAGA,KAAK,CAACG,KAAK,EAC9CF,KAAK,KAAK,CAAC,GAAG,SAAS,GAAGG,SAAS,CACpC,CACF,CAAA;IACD,IAAIH,KAAK,GAAGI,UAAU,CACpBT,YAAY,IAAI,IAAI,GAAGE,OAAO,CAACQ,MAAM,GAAG,CAAC,GAAGV,YAAY,CACzD,CAAA;IACD,IAAIW,MAAM,GAAGhB,MAAM,CAACiB,GAAG,CAAA;IACvB,IAAIC,QAAQ,GAAoB,IAAI,CAAA;IAEpC,SAASJ,UAAUA,CAACK,CAAS,EAAA;QAC3B,OAAOC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACH,CAAC,EAAE,CAAC,CAAC,EAAEZ,OAAO,CAACQ,MAAM,GAAG,CAAC,CAAC,CAAA;IACrD,CAAA;IACA,SAASQ,kBAAkBA,GAAA;QACzB,OAAOhB,OAAO,CAACG,KAAK,CAAC,CAAA;IACvB,CAAA;IACA,SAASC,oBAAoBA,CAC3Ba,EAAM,EACNZ,KAAa,EACba,GAAY,EAAA;QAAA,IADZb,KAAa,KAAA,KAAA,CAAA,EAAA;YAAbA,KAAa,GAAA,IAAI,CAAA;QAAA,CAAA;QAGjB,IAAIc,QAAQ,GAAGC,cAAc,CAC3BpB,OAAO,GAAGgB,kBAAkB,EAAE,CAACK,QAAQ,GAAG,GAAG,EAC7CJ,EAAE,EACFZ,KAAK,EACLa,GAAG,CACJ,CAAA;QACDI,OAAO,CACLH,QAAQ,CAACE,QAAQ,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAA,6DACwBC,IAAI,CAACC,SAAS,CACvER,EAAE,CACD,CACJ,CAAA;QACD,OAAOE,QAAQ,CAAA;IACjB,CAAA;IAEA,SAASO,UAAUA,CAACT,EAAM,EAAA;QACxB,OAAO,OAAOA,EAAE,KAAK,QAAQ,GAAGA,EAAE,GAAGU,UAAU,CAACV,EAAE,CAAC,CAAA;IACrD,CAAA;IAEA,IAAIW,OAAO,GAAkB;QAC3B,IAAIzB,KAAKA,IAAA;YACP,OAAOA,KAAK,CAAA;SACb;QACD,IAAIM,MAAMA,IAAA;YACR,OAAOA,MAAM,CAAA;SACd;QACD,IAAIU,QAAQA,IAAA;YACV,OAAOH,kBAAkB,EAAE,CAAA;SAC5B;QACDU,UAAU;QACVG,SAASA,EAACZ,EAAE,EAAA;YACV,OAAO,IAAIa,GAAG,CAACJ,UAAU,CAACT,EAAE,CAAC,EAAE,kBAAkB,CAAC,CAAA;SACnD;QACDc,cAAcA,EAACd,EAAM,EAAA;YACnB,IAAIe,IAAI,GAAG,OAAOf,EAAE,KAAK,QAAQ,GAAGgB,SAAS,CAAChB,EAAE,CAAC,GAAGA,EAAE,CAAA;YACtD,OAAO;gBACLI,QAAQ,EAAEW,IAAI,CAACX,QAAQ,IAAI,EAAE;gBAC7Ba,MAAM,EAAEF,IAAI,CAACE,MAAM,IAAI,EAAE;gBACzBC,IAAI,EAAEH,IAAI,CAACG,IAAI,IAAI,EAAA;aACpB,CAAA;SACF;QACDC,IAAIA,EAACnB,EAAE,EAAEZ,KAAK,EAAA;YACZI,MAAM,GAAGhB,MAAM,CAAC4C,IAAI,CAAA;YACpB,IAAIC,YAAY,GAAGlC,oBAAoB,CAACa,EAAE,EAAEZ,KAAK,CAAC,CAAA;YAClDF,KAAK,IAAI,CAAC,CAAA;YACVH,OAAO,CAACuC,MAAM,CAACpC,KAAK,EAAEH,OAAO,CAACQ,MAAM,EAAE8B,YAAY,CAAC,CAAA;YACnD,IAAIvC,QAAQ,IAAIY,QAAQ,EAAE;gBACxBA,QAAQ,CAAC;oBAAEF,MAAM;oBAAEU,QAAQ,EAAEmB,YAAY;oBAAEE,KAAK,EAAE,CAAA;gBAAC,CAAE,CAAC,CAAA;YACvD,CAAA;SACF;QACDC,OAAOA,EAACxB,EAAE,EAAEZ,KAAK,EAAA;YACfI,MAAM,GAAGhB,MAAM,CAACiD,OAAO,CAAA;YACvB,IAAIJ,YAAY,GAAGlC,oBAAoB,CAACa,EAAE,EAAEZ,KAAK,CAAC,CAAA;YAClDL,OAAO,CAACG,KAAK,CAAC,GAAGmC,YAAY,CAAA;YAC7B,IAAIvC,QAAQ,IAAIY,QAAQ,EAAE;gBACxBA,QAAQ,CAAC;oBAAEF,MAAM;oBAAEU,QAAQ,EAAEmB,YAAY;oBAAEE,KAAK,EAAE,CAAA;gBAAC,CAAE,CAAC,CAAA;YACvD,CAAA;SACF;QACDG,EAAEA,EAACH,KAAK,EAAA;YACN/B,MAAM,GAAGhB,MAAM,CAACiB,GAAG,CAAA;YACnB,IAAIkC,SAAS,GAAGrC,UAAU,CAACJ,KAAK,GAAGqC,KAAK,CAAC,CAAA;YACzC,IAAIF,YAAY,GAAGtC,OAAO,CAAC4C,SAAS,CAAC,CAAA;YACrCzC,KAAK,GAAGyC,SAAS,CAAA;YACjB,IAAIjC,QAAQ,EAAE;gBACZA,QAAQ,CAAC;oBAAEF,MAAM;oBAAEU,QAAQ,EAAEmB,YAAY;oBAAEE,KAAAA;gBAAO,CAAA,CAAC,CAAA;YACpD,CAAA;SACF;QACDK,MAAMA,EAACC,EAAY,EAAA;YACjBnC,QAAQ,GAAGmC,EAAE,CAAA;YACb,OAAO,MAAK;gBACVnC,QAAQ,GAAG,IAAI,CAAA;aAChB,CAAA;QACH,CAAA;KACD,CAAA;IAED,OAAOiB,OAAO,CAAA;AAChB,CAAA;AAkBA;;;;;;CAMG,GACa,SAAAmB,oBAAoBA,CAClCnD,OAAA,EAAmC;IAAA,IAAnCA,OAAA,KAAA,KAAA,CAAA,EAAA;QAAAA,OAAA,GAAiC,CAAA,CAAE,CAAA;IAAA,CAAA;IAEnC,SAASoD,qBAAqBA,CAC5BC,MAAc,EACdC,aAAgC,EAAA;QAEhC,IAAI,EAAE7B,QAAQ,EAAEa,MAAM,EAAEC,IAAAA,EAAM,GAAGc,MAAM,CAAC9B,QAAQ,CAAA;QAChD,OAAOC,cAAc,CACnB,EAAE,EACF;YAAEC,QAAQ;YAAEa,MAAM;YAAEC,IAAAA;SAAM,EAC1B,+DAAA;QACCe,aAAa,CAAC7C,KAAK,IAAI6C,aAAa,CAAC7C,KAAK,CAAC8C,GAAG,IAAK,IAAI,EACvDD,aAAa,CAAC7C,KAAK,IAAI6C,aAAa,CAAC7C,KAAK,CAACa,GAAG,IAAK,SAAS,CAC9D,CAAA;IACH,CAAA;IAEA,SAASkC,iBAAiBA,CAACH,MAAc,EAAEhC,EAAM,EAAA;QAC/C,OAAO,OAAOA,EAAE,KAAK,QAAQ,GAAGA,EAAE,GAAGU,UAAU,CAACV,EAAE,CAAC,CAAA;IACrD,CAAA;IAEA,OAAOoC,kBAAkB,CACvBL,qBAAqB,EACrBI,iBAAiB,EACjB,IAAI,EACJxD,OAAO,CACR,CAAA;AACH,CAAA;AAsBA;;;;;;;CAOG,GACa,SAAA0D,iBAAiBA,CAC/B1D,OAAA,EAAgC;IAAA,IAAhCA,OAAA,KAAA,KAAA,CAAA,EAAA;QAAAA,OAAA,GAA8B,CAAA,CAAE,CAAA;IAAA,CAAA;IAEhC,SAAS2D,kBAAkBA,CACzBN,MAAc,EACdC,aAAgC,EAAA;QAEhC,IAAI,EACF7B,QAAQ,GAAG,GAAG,EACda,MAAM,GAAG,EAAE,EACXC,IAAI,GAAG,EAAA,EACR,GAAGF,SAAS,CAACgB,MAAM,CAAC9B,QAAQ,CAACgB,IAAI,CAACqB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;QAE7C,6EAAA;QACA,uEAAA;QACA,4EAAA;QACA,2EAAA;QACA,4EAAA;QACA,gEAAA;QACA,IAAI,CAACnC,QAAQ,CAACoC,UAAU,CAAC,GAAG,CAAC,IAAI,CAACpC,QAAQ,CAACoC,UAAU,CAAC,GAAG,CAAC,EAAE;YAC1DpC,QAAQ,GAAG,GAAG,GAAGA,QAAQ,CAAA;QAC1B,CAAA;QAED,OAAOD,cAAc,CACnB,EAAE,EACF;YAAEC,QAAQ;YAAEa,MAAM;YAAEC,IAAAA;SAAM,EAC1B,+DAAA;QACCe,aAAa,CAAC7C,KAAK,IAAI6C,aAAa,CAAC7C,KAAK,CAAC8C,GAAG,IAAK,IAAI,EACvDD,aAAa,CAAC7C,KAAK,IAAI6C,aAAa,CAAC7C,KAAK,CAACa,GAAG,IAAK,SAAS,CAC9D,CAAA;IACH,CAAA;IAEA,SAASwC,cAAcA,CAACT,MAAc,EAAEhC,EAAM,EAAA;QAC5C,IAAI0C,IAAI,GAAGV,MAAM,CAACW,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC,CAAA;QAChD,IAAIC,IAAI,GAAG,EAAE,CAAA;QAEb,IAAIH,IAAI,IAAIA,IAAI,CAACI,YAAY,CAAC,MAAM,CAAC,EAAE;YACrC,IAAIC,GAAG,GAAGf,MAAM,CAAC9B,QAAQ,CAAC2C,IAAI,CAAA;YAC9B,IAAIG,SAAS,GAAGD,GAAG,CAACE,OAAO,CAAC,GAAG,CAAC,CAAA;YAChCJ,IAAI,GAAGG,SAAS,KAAK,CAAC,CAAC,GAAGD,GAAG,GAAGA,GAAG,CAACG,KAAK,CAAC,CAAC,EAAEF,SAAS,CAAC,CAAA;QACxD,CAAA;QAED,OAAOH,IAAI,GAAG,GAAG,GAAA,CAAI,OAAO7C,EAAE,KAAK,QAAQ,GAAGA,EAAE,GAAGU,UAAU,CAACV,EAAE,CAAC,CAAC,CAAA;IACpE,CAAA;IAEA,SAASmD,oBAAoBA,CAACjD,QAAkB,EAAEF,EAAM,EAAA;QACtDK,OAAO,CACLH,QAAQ,CAACE,QAAQ,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAA,4DAAA,GAC0BC,IAAI,CAACC,SAAS,CACzER,EAAE,CACH,GAAA,GAAG,CACL,CAAA;IACH,CAAA;IAEA,OAAOoC,kBAAkB,CACvBE,kBAAkB,EAClBG,cAAc,EACdU,oBAAoB,EACpBxE,OAAO,CACR,CAAA;AACH,CAAA;AAegB,SAAAyE,SAASA,CAACC,KAAU,EAAEC,OAAgB,EAAA;IACpD,IAAID,KAAK,KAAK,KAAK,IAAIA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;QACrE,MAAM,IAAIE,KAAK,CAACD,OAAO,CAAC,CAAA;IACzB,CAAA;AACH,CAAA;AAEgB,SAAAjD,OAAOA,CAACmD,IAAS,EAAEF,OAAe,EAAA;IAChD,IAAI,CAACE,IAAI,EAAE;QACT,sCAAA;QACA,IAAI,OAAOC,OAAO,KAAK,WAAW,EAAEA,OAAO,CAACC,IAAI,CAACJ,OAAO,CAAC,CAAA;QAEzD,IAAI;YACF,gCAAA;YACA,EAAA;YACA,gEAAA;YACA,+DAAA;YACA,8DAAA;YACA,MAAM,IAAIC,KAAK,CAACD,OAAO,CAAC,CAAA;QACxB,oCAAA;QACD,CAAA,CAAC,OAAOK,CAAC,EAAE,CAAA,CAAE;IACf,CAAA;AACH,CAAA;AAEA,SAASC,SAASA,GAAA;IAChB,OAAOhE,IAAI,CAACiE,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACvB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;AAChD,CAAA;AAEA;;CAEG,GACH,SAASwB,eAAeA,CAAC7D,QAAkB,EAAEhB,KAAa,EAAA;IACxD,OAAO;QACLgD,GAAG,EAAEhC,QAAQ,CAACd,KAAK;QACnBa,GAAG,EAAEC,QAAQ,CAACD,GAAG;QACjB+D,GAAG,EAAE9E,KAAAA;KACN,CAAA;AACH,CAAA;AAEA;;CAEG,GACG,SAAUiB,cAAcA,CAC5B8D,OAA0B,EAC1BjE,EAAM,EACNZ,KAAA,EACAa,GAAY,EAAA;IAAA,IADZb,KAAA,KAAA,KAAA,CAAA,EAAA;QAAAA,KAAA,GAAa,IAAI,CAAA;IAAA,CAAA;IAGjB,IAAIc,QAAQ,GAAAgE,QAAA,CAAA;QACV9D,QAAQ,EAAE,OAAO6D,OAAO,KAAK,QAAQ,GAAGA,OAAO,GAAGA,OAAO,CAAC7D,QAAQ;QAClEa,MAAM,EAAE,EAAE;QACVC,IAAI,EAAE,EAAA;KACF,EAAA,OAAOlB,EAAE,KAAK,QAAQ,GAAGgB,SAAS,CAAChB,EAAE,CAAC,GAAGA,EAAE,EAAA;QAC/CZ,KAAK;QACL,0EAAA;QACA,wEAAA;QACA,yEAAA;QACA,+EAAA;QACAa,GAAG,EAAGD,EAAE,IAAKA,EAAe,CAACC,GAAG,IAAKA,GAAG,IAAI2D,SAAS,EAAE;KACxD,CAAA,CAAA;IACD,OAAO1D,QAAQ,CAAA;AACjB,CAAA;AAEA;;CAEG,GACa,SAAAQ,UAAUA,CAAAyD,IAAA,EAIV;IAAA,IAJW,EACzB/D,QAAQ,GAAG,GAAG,EACda,MAAM,GAAG,EAAE,EACXC,IAAI,GAAG,EAAA,EACO,GAAAiD,IAAA,CAAA;IACd,IAAIlD,MAAM,IAAIA,MAAM,KAAK,GAAG,EAC1Bb,QAAQ,IAAIa,MAAM,CAACX,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAGW,MAAM,GAAG,GAAG,GAAGA,MAAM,CAAA;IAC9D,IAAIC,IAAI,IAAIA,IAAI,KAAK,GAAG,EACtBd,QAAQ,IAAIc,IAAI,CAACZ,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAGY,IAAI,GAAG,GAAG,GAAGA,IAAI,CAAA;IACxD,OAAOd,QAAQ,CAAA;AACjB,CAAA;AAEA;;CAEG,GACG,SAAUY,SAASA,CAACD,IAAY,EAAA;IACpC,IAAIqD,UAAU,GAAkB,CAAA,CAAE,CAAA;IAElC,IAAIrD,IAAI,EAAE;QACR,IAAIiC,SAAS,GAAGjC,IAAI,CAACkC,OAAO,CAAC,GAAG,CAAC,CAAA;QACjC,IAAID,SAAS,IAAI,CAAC,EAAE;YAClBoB,UAAU,CAAClD,IAAI,GAAGH,IAAI,CAACwB,MAAM,CAACS,SAAS,CAAC,CAAA;YACxCjC,IAAI,GAAGA,IAAI,CAACwB,MAAM,CAAC,CAAC,EAAES,SAAS,CAAC,CAAA;QACjC,CAAA;QAED,IAAIqB,WAAW,GAAGtD,IAAI,CAACkC,OAAO,CAAC,GAAG,CAAC,CAAA;QACnC,IAAIoB,WAAW,IAAI,CAAC,EAAE;YACpBD,UAAU,CAACnD,MAAM,GAAGF,IAAI,CAACwB,MAAM,CAAC8B,WAAW,CAAC,CAAA;YAC5CtD,IAAI,GAAGA,IAAI,CAACwB,MAAM,CAAC,CAAC,EAAE8B,WAAW,CAAC,CAAA;QACnC,CAAA;QAED,IAAItD,IAAI,EAAE;YACRqD,UAAU,CAAChE,QAAQ,GAAGW,IAAI,CAAA;QAC3B,CAAA;IACF,CAAA;IAED,OAAOqD,UAAU,CAAA;AACnB,CAAA;AASA,SAAShC,kBAAkBA,CACzBkC,WAA2E,EAC3E7D,UAA8C,EAC9C8D,gBAA+D,EAC/D5F,OAAA,EAA+B;IAAA,IAA/BA,OAAA,KAAA,KAAA,CAAA,EAAA;QAAAA,OAAA,GAA6B,CAAA,CAAE,CAAA;IAAA,CAAA;IAE/B,IAAI,EAAEqD,MAAM,GAAGW,QAAQ,CAAC6B,WAAY,EAAE1F,QAAQ,GAAG,KAAA,EAAO,GAAGH,OAAO,CAAA;IAClE,IAAIsD,aAAa,GAAGD,MAAM,CAACrB,OAAO,CAAA;IAClC,IAAInB,MAAM,GAAGhB,MAAM,CAACiB,GAAG,CAAA;IACvB,IAAIC,QAAQ,GAAoB,IAAI,CAAA;IAEpC,IAAIR,KAAK,GAAGuF,QAAQ,EAAG,CAAA;IACvB,yEAAA;IACA,2EAAA;IACA,0DAAA;IACA,IAAIvF,KAAK,IAAI,IAAI,EAAE;QACjBA,KAAK,GAAG,CAAC,CAAA;QACT+C,aAAa,CAACyC,YAAY,CAAAR,QAAA,CAAMjC,CAAAA,CAAAA,EAAAA,aAAa,CAAC7C,KAAK,EAAA;YAAE4E,GAAG,EAAE9E,KAAAA;QAAK,CAAA,CAAA,EAAI,EAAE,CAAC,CAAA;IACvE,CAAA;IAED,SAASuF,QAAQA,GAAA;QACf,IAAIrF,KAAK,GAAG6C,aAAa,CAAC7C,KAAK,IAAI;YAAE4E,GAAG,EAAE,IAAA;SAAM,CAAA;QAChD,OAAO5E,KAAK,CAAC4E,GAAG,CAAA;IAClB,CAAA;IAEA,SAASW,SAASA,GAAA;QAChBnF,MAAM,GAAGhB,MAAM,CAACiB,GAAG,CAAA;QACnB,IAAIkC,SAAS,GAAG8C,QAAQ,EAAE,CAAA;QAC1B,IAAIlD,KAAK,GAAGI,SAAS,IAAI,IAAI,GAAG,IAAI,GAAGA,SAAS,GAAGzC,KAAK,CAAA;QACxDA,KAAK,GAAGyC,SAAS,CAAA;QACjB,IAAIjC,QAAQ,EAAE;YACZA,QAAQ,CAAC;gBAAEF,MAAM;gBAAEU,QAAQ,EAAES,OAAO,CAACT,QAAQ;gBAAEqB,KAAAA;YAAK,CAAE,CAAC,CAAA;QACxD,CAAA;IACH,CAAA;IAEA,SAASJ,IAAIA,CAACnB,EAAM,EAAEZ,KAAW,EAAA;QAC/BI,MAAM,GAAGhB,MAAM,CAAC4C,IAAI,CAAA;QACpB,IAAIlB,QAAQ,GAAGC,cAAc,CAACQ,OAAO,CAACT,QAAQ,EAAEF,EAAE,EAAEZ,KAAK,CAAC,CAAA;QAC1D,IAAImF,gBAAgB,EAAEA,gBAAgB,CAACrE,QAAQ,EAAEF,EAAE,CAAC,CAAA;QAEpDd,KAAK,GAAGuF,QAAQ,EAAE,GAAG,CAAC,CAAA;QACtB,IAAIG,YAAY,GAAGb,eAAe,CAAC7D,QAAQ,EAAEhB,KAAK,CAAC,CAAA;QACnD,IAAI6D,GAAG,GAAGpC,OAAO,CAACF,UAAU,CAACP,QAAQ,CAAC,CAAA;QAEtC,8DAAA;QACA,IAAI;YACF+B,aAAa,CAAC4C,SAAS,CAACD,YAAY,EAAE,EAAE,EAAE7B,GAAG,CAAC,CAAA;SAC/C,CAAC,OAAO+B,KAAK,EAAE;YACd,0EAAA;YACA,qEAAA;YACA,uGAAA;YACA,0FAAA;YACA,IAAIA,KAAK,YAAYC,YAAY,IAAID,KAAK,CAACE,IAAI,KAAK,gBAAgB,EAAE;gBACpE,MAAMF,KAAK,CAAA;YACZ,CAAA;YACD,0DAAA;YACA,2DAAA;YACA9C,MAAM,CAAC9B,QAAQ,CAAC+E,MAAM,CAAClC,GAAG,CAAC,CAAA;QAC5B,CAAA;QAED,IAAIjE,QAAQ,IAAIY,QAAQ,EAAE;YACxBA,QAAQ,CAAC;gBAAEF,MAAM;gBAAEU,QAAQ,EAAES,OAAO,CAACT,QAAQ;gBAAEqB,KAAK,EAAE,CAAA;YAAC,CAAE,CAAC,CAAA;QAC3D,CAAA;IACH,CAAA;IAEA,SAASC,OAAOA,CAACxB,EAAM,EAAEZ,KAAW,EAAA;QAClCI,MAAM,GAAGhB,MAAM,CAACiD,OAAO,CAAA;QACvB,IAAIvB,QAAQ,GAAGC,cAAc,CAACQ,OAAO,CAACT,QAAQ,EAAEF,EAAE,EAAEZ,KAAK,CAAC,CAAA;QAC1D,IAAImF,gBAAgB,EAAEA,gBAAgB,CAACrE,QAAQ,EAAEF,EAAE,CAAC,CAAA;QAEpDd,KAAK,GAAGuF,QAAQ,EAAE,CAAA;QAClB,IAAIG,YAAY,GAAGb,eAAe,CAAC7D,QAAQ,EAAEhB,KAAK,CAAC,CAAA;QACnD,IAAI6D,GAAG,GAAGpC,OAAO,CAACF,UAAU,CAACP,QAAQ,CAAC,CAAA;QACtC+B,aAAa,CAACyC,YAAY,CAACE,YAAY,EAAE,EAAE,EAAE7B,GAAG,CAAC,CAAA;QAEjD,IAAIjE,QAAQ,IAAIY,QAAQ,EAAE;YACxBA,QAAQ,CAAC;gBAAEF,MAAM;gBAAEU,QAAQ,EAAES,OAAO,CAACT,QAAQ;gBAAEqB,KAAK,EAAE,CAAA;YAAC,CAAE,CAAC,CAAA;QAC3D,CAAA;IACH,CAAA;IAEA,SAASX,SAASA,CAACZ,EAAM,EAAA;QACvB,yEAAA;QACA,wEAAA;QACA,0DAAA;QACA,IAAI0C,IAAI,GACNV,MAAM,CAAC9B,QAAQ,CAACgF,MAAM,KAAK,MAAM,GAC7BlD,MAAM,CAAC9B,QAAQ,CAACgF,MAAM,GACtBlD,MAAM,CAAC9B,QAAQ,CAAC2C,IAAI,CAAA;QAE1B,IAAIA,IAAI,GAAG,OAAO7C,EAAE,KAAK,QAAQ,GAAGA,EAAE,GAAGU,UAAU,CAACV,EAAE,CAAC,CAAA;QACvD,2EAAA;QACA,0EAAA;QACA,oBAAA;QACA6C,IAAI,GAAGA,IAAI,CAACrB,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;QAChC4B,SAAS,CACPV,IAAI,EACkEG,qEAAAA,GAAAA,IAAM,CAC7E,CAAA;QACD,OAAO,IAAIhC,GAAG,CAACgC,IAAI,EAAEH,IAAI,CAAC,CAAA;IAC5B,CAAA;IAEA,IAAI/B,OAAO,GAAY;QACrB,IAAInB,MAAMA,IAAA;YACR,OAAOA,MAAM,CAAA;SACd;QACD,IAAIU,QAAQA,IAAA;YACV,OAAOoE,WAAW,CAACtC,MAAM,EAAEC,aAAa,CAAC,CAAA;SAC1C;QACDL,MAAMA,EAACC,EAAY,EAAA;YACjB,IAAInC,QAAQ,EAAE;gBACZ,MAAM,IAAI6D,KAAK,CAAC,4CAA4C,CAAC,CAAA;YAC9D,CAAA;YACDvB,MAAM,CAACmD,gBAAgB,CAAC1G,iBAAiB,EAAEkG,SAAS,CAAC,CAAA;YACrDjF,QAAQ,GAAGmC,EAAE,CAAA;YAEb,OAAO,MAAK;gBACVG,MAAM,CAACoD,mBAAmB,CAAC3G,iBAAiB,EAAEkG,SAAS,CAAC,CAAA;gBACxDjF,QAAQ,GAAG,IAAI,CAAA;aAChB,CAAA;SACF;QACDe,UAAUA,EAACT,EAAE,EAAA;YACX,OAAOS,UAAU,CAACuB,MAAM,EAAEhC,EAAE,CAAC,CAAA;SAC9B;QACDY,SAAS;QACTE,cAAcA,EAACd,EAAE,EAAA;YACf,uDAAA;YACA,IAAI+C,GAAG,GAAGnC,SAAS,CAACZ,EAAE,CAAC,CAAA;YACvB,OAAO;gBACLI,QAAQ,EAAE2C,GAAG,CAAC3C,QAAQ;gBACtBa,MAAM,EAAE8B,GAAG,CAAC9B,MAAM;gBAClBC,IAAI,EAAE6B,GAAG,CAAC7B,IAAAA;aACX,CAAA;SACF;QACDC,IAAI;QACJK,OAAO;QACPE,EAAEA,EAAC/B,CAAC,EAAA;YACF,OAAOsC,aAAa,CAACP,EAAE,CAAC/B,CAAC,CAAC,CAAA;QAC5B,CAAA;KACD,CAAA;IAED,OAAOgB,OAAO,CAAA;AAChB,CAAA;AAEA,YAAA;AC/tBA,IAAY0E,UAKX,CAAA;AALD,CAAA,SAAYA,UAAU,EAAA;IACpBA,UAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;IACbA,UAAA,CAAA,UAAA,CAAA,GAAA,UAAqB,CAAA;IACrBA,UAAA,CAAA,UAAA,CAAA,GAAA,UAAqB,CAAA;IACrBA,UAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACjB,CAAC,EALWA,UAAU,IAAA,CAAVA,UAAU,GAKrB,CAAA,CAAA,CAAA,CAAA,CAAA;AAmRM,MAAMC,kBAAkB,GAAG,IAAIC,GAAG,CAAoB;IAC3D,MAAM;IACN,eAAe;IACf,MAAM;IACN,IAAI;IACJ,OAAO;IACP,UAAU;CACX,CAAC,CAAA;AAoJF,SAASC,YAAYA,CACnBC,KAA0B,EAAA;IAE1B,OAAOA,KAAK,CAACvG,KAAK,KAAK,IAAI,CAAA;AAC7B,CAAA;AAEA,+EAAA;AACA,0DAAA;AACM,SAAUwG,yBAAyBA,CACvCC,MAA6B,EAC7BC,kBAA8C,EAC9CC,UAAuB,EACvBC,QAAA,EAA4B;IAAA,IAD5BD,UAAuB,KAAA,KAAA,CAAA,EAAA;QAAvBA,UAAuB,GAAA,EAAE,CAAA;IAAA,CAAA;IAAA,IACzBC,QAAA,KAAA,KAAA,CAAA,EAAA;QAAAA,QAAA,GAA0B,CAAA,CAAE,CAAA;IAAA,CAAA;IAE5B,OAAOH,MAAM,CAAC3G,GAAG,CAAC,CAACyG,KAAK,EAAEvG,KAAK,KAAI;QACjC,IAAI6G,QAAQ,GAAG,CAAC;eAAGF,UAAU;YAAEG,MAAM,CAAC9G,KAAK,CAAC;SAAC,CAAA;QAC7C,IAAI+G,EAAE,GAAG,OAAOR,KAAK,CAACQ,EAAE,KAAK,QAAQ,GAAGR,KAAK,CAACQ,EAAE,GAAGF,QAAQ,CAACG,IAAI,CAAC,GAAG,CAAC,CAAA;QACrE9C,SAAS,CACPqC,KAAK,CAACvG,KAAK,KAAK,IAAI,IAAI,CAACuG,KAAK,CAACU,QAAQ,EAAA,2CACI,CAC5C,CAAA;QACD/C,SAAS,CACP,CAAC0C,QAAQ,CAACG,EAAE,CAAC,EACb,qCAAqCA,GAAAA,EAAE,GACrC,aAAA,GAAA,wDAAwD,CAC3D,CAAA;QAED,IAAIT,YAAY,CAACC,KAAK,CAAC,EAAE;YACvB,IAAIW,UAAU,GAAAlC,QAAA,CAAA,CAAA,CAAA,EACTuB,KAAK,EACLG,kBAAkB,CAACH,KAAK,CAAC,EAAA;gBAC5BQ,EAAAA;aACD,CAAA,CAAA;YACDH,QAAQ,CAACG,EAAE,CAAC,GAAGG,UAAU,CAAA;YACzB,OAAOA,UAAU,CAAA;QAClB,CAAA,MAAM;YACL,IAAIC,iBAAiB,GAAAnC,QAAA,CAAA,CAAA,CAAA,EAChBuB,KAAK,EACLG,kBAAkB,CAACH,KAAK,CAAC,EAAA;gBAC5BQ,EAAE;gBACFE,QAAQ,EAAE9G,SAAAA;aACX,CAAA,CAAA;YACDyG,QAAQ,CAACG,EAAE,CAAC,GAAGI,iBAAiB,CAAA;YAEhC,IAAIZ,KAAK,CAACU,QAAQ,EAAE;gBAClBE,iBAAiB,CAACF,QAAQ,GAAGT,yBAAyB,CACpDD,KAAK,CAACU,QAAQ,EACdP,kBAAkB,EAClBG,QAAQ,EACRD,QAAQ,CACT,CAAA;YACF,CAAA;YAED,OAAOO,iBAAiB,CAAA;QACzB,CAAA;IACH,CAAC,CAAC,CAAA;AACJ,CAAA;AAEA;;;;CAIG,GACG,SAAUC,WAAWA,CAGzBX,MAAyB,EACzBY,WAAuC,EACvCC,QAAQ,EAAM;IAAA,IAAdA,QAAQ,KAAA,KAAA,CAAA,EAAA;QAARA,QAAQ,GAAG,GAAG,CAAA;IAAA,CAAA;IAEd,OAAOC,eAAe,CAACd,MAAM,EAAEY,WAAW,EAAEC,QAAQ,EAAE,KAAK,CAAC,CAAA;AAC9D,CAAA;AAEM,SAAUC,eAAeA,CAG7Bd,MAAyB,EACzBY,WAAuC,EACvCC,QAAgB,EAChBE,YAAqB,EAAA;IAErB,IAAIxG,QAAQ,GACV,OAAOqG,WAAW,KAAK,QAAQ,GAAGvF,SAAS,CAACuF,WAAW,CAAC,GAAGA,WAAW,CAAA;IAExE,IAAInG,QAAQ,GAAGuG,aAAa,CAACzG,QAAQ,CAACE,QAAQ,IAAI,GAAG,EAAEoG,QAAQ,CAAC,CAAA;IAEhE,IAAIpG,QAAQ,IAAI,IAAI,EAAE;QACpB,OAAO,IAAI,CAAA;IACZ,CAAA;IAED,IAAIwG,QAAQ,GAAGC,aAAa,CAAClB,MAAM,CAAC,CAAA;IACpCmB,iBAAiB,CAACF,QAAQ,CAAC,CAAA;IAE3B,IAAIG,OAAO,GAAG,IAAI,CAAA;IAClB,IAAK,IAAIC,CAAC,GAAG,CAAC,EAAED,OAAO,IAAI,IAAI,IAAIC,CAAC,GAAGJ,QAAQ,CAACrH,MAAM,EAAE,EAAEyH,CAAC,CAAE;QAC3D,uEAAA;QACA,sEAAA;QACA,oEAAA;QACA,sEAAA;QACA,qEAAA;QACA,iBAAA;QACA,IAAIC,OAAO,GAAGC,UAAU,CAAC9G,QAAQ,CAAC,CAAA;QAClC2G,OAAO,GAAGI,gBAAgB,CACxBP,QAAQ,CAACI,CAAC,CAAC,EACXC,OAAO,EACPP,YAAY,CACb,CAAA;IACF,CAAA;IAED,OAAOK,OAAO,CAAA;AAChB,CAAA;AAUgB,SAAAK,0BAA0BA,CACxCC,KAA6B,EAC7BC,UAAqB,EAAA;IAErB,IAAI,EAAE7B,KAAK,EAAErF,QAAQ,EAAEmH,MAAAA,EAAQ,GAAGF,KAAK,CAAA;IACvC,OAAO;QACLpB,EAAE,EAAER,KAAK,CAACQ,EAAE;QACZ7F,QAAQ;QACRmH,MAAM;QACNC,IAAI,EAAEF,UAAU,CAAC7B,KAAK,CAACQ,EAAE,CAAC;QAC1BwB,MAAM,EAAEhC,KAAK,CAACgC,MAAAA;KACf,CAAA;AACH,CAAA;AAmBA,SAASZ,aAAaA,CAGpBlB,MAAyB,EACzBiB,QAA2C,EAC3Cc,WAAA,EACA7B,UAAU,EAAK;IAAA,IAFfe,QAA2C,KAAA,KAAA,CAAA,EAAA;QAA3CA,QAA2C,GAAA,EAAE,CAAA;IAAA,CAAA;IAAA,IAC7Cc,WAAA,KAAA,KAAA,CAAA,EAAA;QAAAA,WAAA,GAA4C,EAAE,CAAA;IAAA,CAAA;IAAA,IAC9C7B,UAAU,KAAA,KAAA,CAAA,EAAA;QAAVA,UAAU,GAAG,EAAE,CAAA;IAAA,CAAA;IAEf,IAAI8B,YAAY,GAAGA,CACjBlC,KAAsB,EACtBvG,KAAa,EACb0I,YAAqB,KACnB;QACF,IAAIC,IAAI,GAA+B;YACrCD,YAAY,EACVA,YAAY,KAAKvI,SAAS,GAAGoG,KAAK,CAAC1E,IAAI,IAAI,EAAE,GAAG6G,YAAY;YAC9DE,aAAa,EAAErC,KAAK,CAACqC,aAAa,KAAK,IAAI;YAC3CC,aAAa,EAAE7I,KAAK;YACpBuG,KAAAA;SACD,CAAA;QAED,IAAIoC,IAAI,CAACD,YAAY,CAACpF,UAAU,CAAC,GAAG,CAAC,EAAE;YACrCY,SAAS,CACPyE,IAAI,CAACD,YAAY,CAACpF,UAAU,CAACqD,UAAU,CAAC,EACxC,wBAAA,GAAwBgC,IAAI,CAACD,YAAY,GAAA,0BAAA,CAAA,OACnC/B,UAAU,GAAA,gDAAA,CAA+C,GAAA,6DACA,CAChE,CAAA;YAEDgC,IAAI,CAACD,YAAY,GAAGC,IAAI,CAACD,YAAY,CAAC1E,KAAK,CAAC2C,UAAU,CAACtG,MAAM,CAAC,CAAA;QAC/D,CAAA;QAED,IAAIwB,IAAI,GAAGiH,SAAS,CAAC;YAACnC,UAAU;YAAEgC,IAAI,CAACD,YAAY;SAAC,CAAC,CAAA;QACrD,IAAIK,UAAU,GAAGP,WAAW,CAACQ,MAAM,CAACL,IAAI,CAAC,CAAA;QAEzC,6EAAA;QACA,yEAAA;QACA,2BAAA;QACA,IAAIpC,KAAK,CAACU,QAAQ,IAAIV,KAAK,CAACU,QAAQ,CAAC5G,MAAM,GAAG,CAAC,EAAE;YAC/C6D,SAAS,CACP,iDAAA;YACA,mBAAA;YACAqC,KAAK,CAACvG,KAAK,KAAK,IAAI,EACpB,yDACuC6B,GAAAA,CAAAA,qCAAAA,GAAAA,IAAI,GAAA,KAAA,CAAI,CAChD,CAAA;YACD8F,aAAa,CAACpB,KAAK,CAACU,QAAQ,EAAES,QAAQ,EAAEqB,UAAU,EAAElH,IAAI,CAAC,CAAA;QAC1D,CAAA;QAED,2EAAA;QACA,oEAAA;QACA,IAAI0E,KAAK,CAAC1E,IAAI,IAAI,IAAI,IAAI,CAAC0E,KAAK,CAACvG,KAAK,EAAE;YACtC,OAAA;QACD,CAAA;QAED0H,QAAQ,CAACzF,IAAI,CAAC;YACZJ,IAAI;YACJoH,KAAK,EAAEC,YAAY,CAACrH,IAAI,EAAE0E,KAAK,CAACvG,KAAK,CAAC;YACtC+I,UAAAA;QACD,CAAA,CAAC,CAAA;KACH,CAAA;IACDtC,MAAM,CAAC0C,OAAO,CAAC,CAAC5C,KAAK,EAAEvG,KAAK,KAAI;QAAA,IAAAoJ,WAAA,CAAA;QAC9B,yCAAA;QACA,IAAI7C,KAAK,CAAC1E,IAAI,KAAK,EAAE,IAAI,CAAA,CAAA,CAAAuH,WAAA,GAAC7C,KAAK,CAAC1E,IAAI,KAAA,QAAVuH,WAAA,CAAYC,QAAQ,CAAC,GAAG,CAAC,CAAE,EAAA;YACnDZ,YAAY,CAAClC,KAAK,EAAEvG,KAAK,CAAC,CAAA;QAC3B,CAAA,MAAM;YACL,KAAK,IAAIsJ,QAAQ,IAAIC,uBAAuB,CAAChD,KAAK,CAAC1E,IAAI,CAAC,CAAE;gBACxD4G,YAAY,CAAClC,KAAK,EAAEvG,KAAK,EAAEsJ,QAAQ,CAAC,CAAA;YACrC,CAAA;QACF,CAAA;IACH,CAAC,CAAC,CAAA;IAEF,OAAO5B,QAAQ,CAAA;AACjB,CAAA;AAEA;;;;;;;;;;;;;CAaG,GACH,SAAS6B,uBAAuBA,CAAC1H,IAAY,EAAA;IAC3C,IAAI2H,QAAQ,GAAG3H,IAAI,CAAC4H,KAAK,CAAC,GAAG,CAAC,CAAA;IAC9B,IAAID,QAAQ,CAACnJ,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE,CAAA;IAEpC,IAAI,CAACqJ,KAAK,EAAE,GAAGC,IAAI,CAAC,GAAGH,QAAQ,CAAA;IAE/B,uDAAA;IACA,IAAII,UAAU,GAAGF,KAAK,CAACG,QAAQ,CAAC,GAAG,CAAC,CAAA;IACpC,8DAAA;IACA,IAAIC,QAAQ,GAAGJ,KAAK,CAACpH,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA;IAEvC,IAAIqH,IAAI,CAACtJ,MAAM,KAAK,CAAC,EAAE;QACrB,wDAAA;QACA,gGAAA;QACA,OAAOuJ,UAAU,GAAG;YAACE,QAAQ;YAAE,EAAE;SAAC,GAAG;YAACA,QAAQ;SAAC,CAAA;IAChD,CAAA;IAED,IAAIC,YAAY,GAAGR,uBAAuB,CAACI,IAAI,CAAC3C,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;IAE1D,IAAIgD,MAAM,GAAa,EAAE,CAAA;IAEzB,wEAAA;IACA,6EAAA;IACA,0EAAA;IACA,6EAAA;IACA,6EAAA;IACA,6EAAA;IACA,6BAAA;IACAA,MAAM,CAAC/H,IAAI,CACT,GAAG8H,YAAY,CAACjK,GAAG,EAAEmK,OAAO,GAC1BA,OAAO,KAAK,EAAE,GAAGH,QAAQ,GAAG;YAACA,QAAQ;YAAEG,OAAO;SAAC,CAACjD,IAAI,CAAC,GAAG,CAAC,CAC1D,CACF,CAAA;IAED,qEAAA;IACA,IAAI4C,UAAU,EAAE;QACdI,MAAM,CAAC/H,IAAI,CAAC,GAAG8H,YAAY,CAAC,CAAA;IAC7B,CAAA;IAED,0DAAA;IACA,OAAOC,MAAM,CAAClK,GAAG,EAAEwJ,QAAQ,GACzBzH,IAAI,CAACyB,UAAU,CAAC,GAAG,CAAC,IAAIgG,QAAQ,KAAK,EAAE,GAAG,GAAG,GAAGA,QAAQ,CACzD,CAAA;AACH,CAAA;AAEA,SAAS1B,iBAAiBA,CAACF,QAAuB,EAAA;IAChDA,QAAQ,CAACwC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,GACjBD,CAAC,CAAClB,KAAK,KAAKmB,CAAC,CAACnB,KAAK,GACfmB,CAAC,CAACnB,KAAK,GAAGkB,CAAC,CAAClB,KAAK,CAAA,qBAAA;WACjBoB,cAAc,CACZF,CAAC,CAACpB,UAAU,CAACjJ,GAAG,EAAE6I,IAAI,GAAKA,IAAI,CAACE,aAAa,CAAC,EAC9CuB,CAAC,CAACrB,UAAU,CAACjJ,GAAG,EAAE6I,IAAI,GAAKA,IAAI,CAACE,aAAa,CAAC,CAC/C,CACN,CAAA;AACH,CAAA;AAEA,MAAMyB,OAAO,GAAG,WAAW,CAAA;AAC3B,MAAMC,mBAAmB,GAAG,CAAC,CAAA;AAC7B,MAAMC,eAAe,GAAG,CAAC,CAAA;AACzB,MAAMC,iBAAiB,GAAG,CAAC,CAAA;AAC3B,MAAMC,kBAAkB,GAAG,EAAE,CAAA;AAC7B,MAAMC,YAAY,GAAG,CAAC,CAAC,CAAA;AACvB,MAAMC,OAAO,IAAIC,CAAS,GAAKA,CAAC,KAAK,GAAG,CAAA;AAExC,SAAS3B,YAAYA,CAACrH,IAAY,EAAE7B,KAA0B,EAAA;IAC5D,IAAIwJ,QAAQ,GAAG3H,IAAI,CAAC4H,KAAK,CAAC,GAAG,CAAC,CAAA;IAC9B,IAAIqB,YAAY,GAAGtB,QAAQ,CAACnJ,MAAM,CAAA;IAClC,IAAImJ,QAAQ,CAACuB,IAAI,CAACH,OAAO,CAAC,EAAE;QAC1BE,YAAY,IAAIH,YAAY,CAAA;IAC7B,CAAA;IAED,IAAI3K,KAAK,EAAE;QACT8K,YAAY,IAAIN,eAAe,CAAA;IAChC,CAAA;IAED,OAAOhB,QAAQ,CACZwB,MAAM,EAAEH,CAAC,GAAK,CAACD,OAAO,CAACC,CAAC,CAAC,CAAC,CAC1BI,MAAM,CACL,CAAChC,KAAK,EAAEiC,OAAO,GACbjC,KAAK,GAAA,CACJqB,OAAO,CAACa,IAAI,CAACD,OAAO,CAAC,GAClBX,mBAAmB,GACnBW,OAAO,KAAK,EAAE,GACdT,iBAAiB,GACjBC,kBAAkB,CAAC,EACzBI,YAAY,CACb,CAAA;AACL,CAAA;AAEA,SAAST,cAAcA,CAACF,CAAW,EAAEC,CAAW,EAAA;IAC9C,IAAIgB,QAAQ,GACVjB,CAAC,CAAC9J,MAAM,KAAK+J,CAAC,CAAC/J,MAAM,IAAI8J,CAAC,CAACnG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACqH,KAAK,CAAC,CAAC5K,CAAC,EAAEqH,CAAC,GAAKrH,CAAC,KAAK2J,CAAC,CAACtC,CAAC,CAAC,CAAC,CAAA;IAErE,OAAOsD,QAAQ,GACX,yEAAA;IACA,2EAAA;IACA,2EAAA;IACA,mBAAA;IACAjB,CAAC,CAACA,CAAC,CAAC9J,MAAM,GAAG,CAAC,CAAC,GAAG+J,CAAC,CAACA,CAAC,CAAC/J,MAAM,GAAG,CAAC,CAAC,GACjC,yEAAA;IACA,wBAAA;IACA,CAAC,CAAA;AACP,CAAA;AAEA,SAAS4H,gBAAgBA,CAIvBqD,MAAoC,EACpCpK,QAAgB,EAChBsG,YAAY,EAAQ;IAAA,IAApBA,YAAY,KAAA,KAAA,CAAA,EAAA;QAAZA,YAAY,GAAG,KAAK,CAAA;IAAA,CAAA;IAEpB,IAAI,EAAEuB,UAAAA,EAAY,GAAGuC,MAAM,CAAA;IAE3B,IAAIC,aAAa,GAAG,CAAA,CAAE,CAAA;IACtB,IAAIC,eAAe,GAAG,GAAG,CAAA;IACzB,IAAI3D,OAAO,GAAoD,EAAE,CAAA;IACjE,IAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiB,UAAU,CAAC1I,MAAM,EAAE,EAAEyH,CAAC,CAAE;QAC1C,IAAIa,IAAI,GAAGI,UAAU,CAACjB,CAAC,CAAC,CAAA;QACxB,IAAI2D,GAAG,GAAG3D,CAAC,KAAKiB,UAAU,CAAC1I,MAAM,GAAG,CAAC,CAAA;QACrC,IAAIqL,iBAAiB,GACnBF,eAAe,KAAK,GAAG,GACnBtK,QAAQ,GACRA,QAAQ,CAAC8C,KAAK,CAACwH,eAAe,CAACnL,MAAM,CAAC,IAAI,GAAG,CAAA;QACnD,IAAI8H,KAAK,GAAGwD,SAAS,CACnB;YAAE9J,IAAI,EAAE8G,IAAI,CAACD,YAAY;YAAEE,aAAa,EAAED,IAAI,CAACC,aAAa;YAAE6C,GAAAA;SAAK,EACnEC,iBAAiB,CAClB,CAAA;QAED,IAAInF,KAAK,GAAGoC,IAAI,CAACpC,KAAK,CAAA;QAEtB,IACE,CAAC4B,KAAK,IACNsD,GAAG,IACHjE,YAAY,IACZ,CAACuB,UAAU,CAACA,UAAU,CAAC1I,MAAM,GAAG,CAAC,CAAC,CAACkG,KAAK,CAACvG,KAAK,EAC9C;YACAmI,KAAK,GAAGwD,SAAS,CACf;gBACE9J,IAAI,EAAE8G,IAAI,CAACD,YAAY;gBACvBE,aAAa,EAAED,IAAI,CAACC,aAAa;gBACjC6C,GAAG,EAAE,KAAA;aACN,EACDC,iBAAiB,CAClB,CAAA;QACF,CAAA;QAED,IAAI,CAACvD,KAAK,EAAE;YACV,OAAO,IAAI,CAAA;QACZ,CAAA;QAEDyD,MAAM,CAAC7F,MAAM,CAACwF,aAAa,EAAEpD,KAAK,CAACE,MAAM,CAAC,CAAA;QAE1CR,OAAO,CAAC5F,IAAI,CAAC;YACX,gCAAA;YACAoG,MAAM,EAAEkD,aAAiC;YACzCrK,QAAQ,EAAE4H,SAAS,CAAC;gBAAC0C,eAAe;gBAAErD,KAAK,CAACjH,QAAQ;aAAC,CAAC;YACtD2K,YAAY,EAAEC,iBAAiB,CAC7BhD,SAAS,CAAC;gBAAC0C,eAAe;gBAAErD,KAAK,CAAC0D,YAAY;aAAC,CAAC,CACjD;YACDtF,KAAAA;QACD,CAAA,CAAC,CAAA;QAEF,IAAI4B,KAAK,CAAC0D,YAAY,KAAK,GAAG,EAAE;YAC9BL,eAAe,GAAG1C,SAAS,CAAC;gBAAC0C,eAAe;gBAAErD,KAAK,CAAC0D,YAAY;aAAC,CAAC,CAAA;QACnE,CAAA;IACF,CAAA;IAED,OAAOhE,OAAO,CAAA;AAChB,CAAA;AAEA;;;;CAIG,YACakE,YAAYA,CAC1BC,YAAkB,EAClB3D,MAAAA,EAEa;IAAA,IAFbA,WAAAA,KAAAA,GAAAA;QAAAA,SAEI,CAAA,CAAS,CAAA;IAAA,CAAA;IAEb,IAAIxG,IAAI,GAAWmK,YAAY,CAAA;IAC/B,IAAInK,IAAI,CAACgI,QAAQ,CAAC,GAAG,CAAC,IAAIhI,IAAI,KAAK,GAAG,IAAI,CAACA,IAAI,CAACgI,QAAQ,CAAC,IAAI,CAAC,EAAE;QAC9D1I,OAAO,CACL,KAAK,EACL,eAAeU,GAAAA,IAAI,GACbA,mCAAAA,GAAAA,CAAAA,IAAAA,GAAAA,IAAI,CAACS,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,GAAqC,oCAAA,CAAA,GAAA,kEACE,GAAA,CAChCT,oCAAAA,GAAAA,IAAI,CAACS,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,GAAA,KAAA,CAAI,CACpE,CAAA;QACDT,IAAI,GAAGA,IAAI,CAACS,OAAO,CAAC,KAAK,EAAE,IAAI,CAAS,CAAA;IACzC,CAAA;IAED,+DAAA;IACA,MAAM2J,MAAM,GAAGpK,IAAI,CAACyB,UAAU,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAA;IAE9C,MAAMhC,SAAS,IAAI4K,CAAM,GACvBA,CAAC,IAAI,IAAI,GAAG,EAAE,GAAG,OAAOA,CAAC,KAAK,QAAQ,GAAGA,CAAC,GAAGpF,MAAM,CAACoF,CAAC,CAAC,CAAA;IAExD,MAAM1C,QAAQ,GAAG3H,IAAI,CAClB4H,KAAK,CAAC,KAAK,CAAC,CACZ3J,GAAG,CAAC,CAACoL,OAAO,EAAElL,KAAK,EAAEmM,KAAK,KAAI;QAC7B,MAAMC,aAAa,GAAGpM,KAAK,KAAKmM,KAAK,CAAC9L,MAAM,GAAG,CAAC,CAAA;QAEhD,gDAAA;QACA,IAAI+L,aAAa,IAAIlB,OAAO,KAAK,GAAG,EAAE;YACpC,MAAMmB,IAAI,GAAG,GAAsB,CAAA;YACnC,kBAAA;YACA,OAAO/K,SAAS,CAAC+G,MAAM,CAACgE,IAAI,CAAC,CAAC,CAAA;QAC/B,CAAA;QAED,MAAMC,QAAQ,GAAGpB,OAAO,CAAC/C,KAAK,CAAC,kBAAkB,CAAC,CAAA;QAClD,IAAImE,QAAQ,EAAE;YACZ,MAAM,GAAGvL,GAAG,EAAEwL,QAAQ,CAAC,GAAGD,QAAQ,CAAA;YAClC,IAAIE,KAAK,GAAGnE,MAAM,CAACtH,GAAsB,CAAC,CAAA;YAC1CmD,SAAS,CAACqI,QAAQ,KAAK,GAAG,IAAIC,KAAK,IAAI,IAAI,EAAA,aAAA,GAAezL,GAAG,GAAA,UAAS,CAAC,CAAA;YACvE,OAAOO,SAAS,CAACkL,KAAK,CAAC,CAAA;QACxB,CAAA;QAED,4DAAA;QACA,OAAOtB,OAAO,CAAC5I,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAA;KACnC,CAAA,AACD,wBAAA;KACC0I,MAAM,EAAEE,OAAO,GAAK,CAAC,CAACA,OAAO,CAAC,CAAA;IAEjC,OAAOe,MAAM,GAAGzC,QAAQ,CAACxC,IAAI,CAAC,GAAG,CAAC,CAAA;AACpC,CAAA;AAiDA;;;;;CAKG,GACa,SAAA2E,SAASA,CAIvBc,OAAiC,EACjCvL,QAAgB,EAAA;IAEhB,IAAI,OAAOuL,OAAO,KAAK,QAAQ,EAAE;QAC/BA,OAAO,GAAG;YAAE5K,IAAI,EAAE4K,OAAO;YAAE7D,aAAa,EAAE,KAAK;YAAE6C,GAAG,EAAE,IAAA;SAAM,CAAA;IAC7D,CAAA;IAED,IAAI,CAACiB,OAAO,EAAEC,cAAc,CAAC,GAAGC,WAAW,CACzCH,OAAO,CAAC5K,IAAI,EACZ4K,OAAO,CAAC7D,aAAa,EACrB6D,OAAO,CAAChB,GAAG,CACZ,CAAA;IAED,IAAItD,KAAK,GAAGjH,QAAQ,CAACiH,KAAK,CAACuE,OAAO,CAAC,CAAA;IACnC,IAAI,CAACvE,KAAK,EAAE,OAAO,IAAI,CAAA;IAEvB,IAAIqD,eAAe,GAAGrD,KAAK,CAAC,CAAC,CAAC,CAAA;IAC9B,IAAI0D,YAAY,GAAGL,eAAe,CAAClJ,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAA;IAC3D,IAAIuK,aAAa,GAAG1E,KAAK,CAACnE,KAAK,CAAC,CAAC,CAAC,CAAA;IAClC,IAAIqE,MAAM,GAAWsE,cAAc,CAAC1B,MAAM,CACxC,CAAC6B,IAAI,EAAA7H,IAAA,EAA6BjF,KAAK,KAAI;QAAA,IAApC,EAAE+M,SAAS,EAAEnD,UAAAA,EAAY,GAAA3E,IAAA,CAAA;QAC9B,qEAAA;QACA,qEAAA;QACA,IAAI8H,SAAS,KAAK,GAAG,EAAE;YACrB,IAAIC,UAAU,GAAGH,aAAa,CAAC7M,KAAK,CAAC,IAAI,EAAE,CAAA;YAC3C6L,YAAY,GAAGL,eAAe,CAC3BxH,KAAK,CAAC,CAAC,EAAEwH,eAAe,CAACnL,MAAM,GAAG2M,UAAU,CAAC3M,MAAM,CAAC,CACpDiC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAA;QAC5B,CAAA;QAED,MAAM6B,KAAK,GAAG0I,aAAa,CAAC7M,KAAK,CAAC,CAAA;QAClC,IAAI4J,UAAU,IAAI,CAACzF,KAAK,EAAE;YACxB2I,IAAI,CAACC,SAAS,CAAC,GAAG5M,SAAS,CAAA;QAC5B,CAAA,MAAM;YACL2M,IAAI,CAACC,SAAS,CAAC,GAAG,CAAC5I,KAAK,IAAI,EAAE,EAAE7B,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;QACrD,CAAA;QACD,OAAOwK,IAAI,CAAA;KACZ,EACD,CAAA,CAAE,CACH,CAAA;IAED,OAAO;QACLzE,MAAM;QACNnH,QAAQ,EAAEsK,eAAe;QACzBK,YAAY;QACZY,OAAAA;KACD,CAAA;AACH,CAAA;AAIA,SAASG,WAAWA,CAClB/K,IAAY,EACZ+G,aAAa,EACb6C,GAAG,EAAO;IAAA,IADV7C,aAAa,KAAA,KAAA,CAAA,EAAA;QAAbA,aAAa,GAAG,KAAK,CAAA;IAAA,CAAA;IAAA,IACrB6C,GAAG,KAAA,KAAA,CAAA,EAAA;QAAHA,GAAG,GAAG,IAAI,CAAA;IAAA,CAAA;IAEVtK,OAAO,CACLU,IAAI,KAAK,GAAG,IAAI,CAACA,IAAI,CAACgI,QAAQ,CAAC,GAAG,CAAC,IAAIhI,IAAI,CAACgI,QAAQ,CAAC,IAAI,CAAC,EAC1D,eAAA,GAAehI,IAAI,GACbA,mCAAAA,GAAAA,CAAAA,IAAAA,GAAAA,IAAI,CAACS,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,GAAqC,oCAAA,CAAA,GAAA,kEACE,GAAA,CAAA,uCAChCT,IAAI,CAACS,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,GAAA,KAAA,CAAI,CACpE,CAAA;IAED,IAAI+F,MAAM,GAAwB,EAAE,CAAA;IACpC,IAAI4E,YAAY,GACd,GAAG,GACHpL,IAAI,CACDS,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAA,kDAAA;KACtBA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA,+BAAA;KACpBA,OAAO,CAAC,oBAAoB,EAAE,MAAM,CAAC,CAAA,6BAAA;KACrCA,OAAO,CACN,mBAAmB,EACnB,CAAC4K,CAAS,EAAEH,SAAiB,EAAEnD,UAAU,KAAI;QAC3CvB,MAAM,CAACpG,IAAI,CAAC;YAAE8K,SAAS;YAAEnD,UAAU,EAAEA,UAAU,IAAI,IAAA;QAAI,CAAE,CAAC,CAAA;QAC1D,OAAOA,UAAU,GAAG,cAAc,GAAG,YAAY,CAAA;IACnD,CAAC,CACF,CAAA;IAEL,IAAI/H,IAAI,CAACgI,QAAQ,CAAC,GAAG,CAAC,EAAE;QACtBxB,MAAM,CAACpG,IAAI,CAAC;YAAE8K,SAAS,EAAE,GAAA;QAAK,CAAA,CAAC,CAAA;QAC/BE,YAAY,IACVpL,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,IAAI,GACzB,OAAO,CAAA,qDAAA;WACP,mBAAmB,CAAC,CAAA,qCAAA;KAC3B,MAAM,IAAI4J,GAAG,EAAE;QACd,oDAAA;QACAwB,YAAY,IAAI,OAAO,CAAA;KACxB,MAAM,IAAIpL,IAAI,KAAK,EAAE,IAAIA,IAAI,KAAK,GAAG,EAAE;QACtC,0EAAA;QACA,wEAAA;QACA,4EAAA;QACA,yEAAA;QACA,wEAAA;QACA,8DAAA;QACA,yDAAA;QACAoL,YAAY,IAAI,eAAe,CAAA;IAChC,CAAA,MAAM,CACL;IAGF,IAAIP,OAAO,GAAG,IAAIS,MAAM,CAACF,YAAY,EAAErE,aAAa,GAAGzI,SAAS,GAAG,GAAG,CAAC,CAAA;IAEvE,OAAO;QAACuM,OAAO;QAAErE,MAAM;KAAC,CAAA;AAC1B,CAAA;AAEM,SAAUL,UAAUA,CAAC7D,KAAa,EAAA;IACtC,IAAI;QACF,OAAOA,KAAK,CACTsF,KAAK,CAAC,GAAG,CAAC,CACV3J,GAAG,EAAEsN,CAAC,GAAKC,kBAAkB,CAACD,CAAC,CAAC,CAAC9K,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CACvD0E,IAAI,CAAC,GAAG,CAAC,CAAA;KACb,CAAC,OAAOpB,KAAK,EAAE;QACdzE,OAAO,CACL,KAAK,EACL,iBAAA,GAAiBgD,KAAK,GAC2C,6CAAA,GAAA,+DAAA,GAAA,CAAA,YAAA,GAClDyB,KAAK,GAAA,IAAA,CAAI,CACzB,CAAA;QAED,OAAOzB,KAAK,CAAA;IACb,CAAA;AACH,CAAA;AAEA;;CAEG,GACa,SAAAsD,aAAaA,CAC3BvG,QAAgB,EAChBoG,QAAgB,EAAA;IAEhB,IAAIA,QAAQ,KAAK,GAAG,EAAE,OAAOpG,QAAQ,CAAA;IAErC,IAAI,CAACA,QAAQ,CAACoM,WAAW,EAAE,CAAChK,UAAU,CAACgE,QAAQ,CAACgG,WAAW,EAAE,CAAC,EAAE;QAC9D,OAAO,IAAI,CAAA;IACZ,CAAA;IAED,6EAAA;IACA,iEAAA;IACA,IAAIC,UAAU,GAAGjG,QAAQ,CAACuC,QAAQ,CAAC,GAAG,CAAC,GACnCvC,QAAQ,CAACjH,MAAM,GAAG,CAAC,GACnBiH,QAAQ,CAACjH,MAAM,CAAA;IACnB,IAAImN,QAAQ,GAAGtM,QAAQ,CAACE,MAAM,CAACmM,UAAU,CAAC,CAAA;IAC1C,IAAIC,QAAQ,IAAIA,QAAQ,KAAK,GAAG,EAAE;QAChC,yCAAA;QACA,OAAO,IAAI,CAAA;IACZ,CAAA;IAED,OAAOtM,QAAQ,CAAC8C,KAAK,CAACuJ,UAAU,CAAC,IAAI,GAAG,CAAA;AAC1C,CAAA;AAEA;;;;CAIG,YACaE,WAAWA,CAAC3M,EAAM,EAAE4M,YAAY,EAAM;IAAA,IAAlBA,YAAY,KAAA,KAAA,CAAA,EAAA;QAAZA,YAAY,GAAG,GAAG,CAAA;IAAA,CAAA;IACpD,IAAI,EACFxM,QAAQ,EAAEyM,UAAU,EACpB5L,MAAM,GAAG,EAAE,EACXC,IAAI,GAAG,EAAA,EACR,GAAG,OAAOlB,EAAE,KAAK,QAAQ,GAAGgB,SAAS,CAAChB,EAAE,CAAC,GAAGA,EAAE,CAAA;IAE/C,IAAII,QAAQ,GAAGyM,UAAU,GACrBA,UAAU,CAACrK,UAAU,CAAC,GAAG,CAAC,GACxBqK,UAAU,GACVC,eAAe,CAACD,UAAU,EAAED,YAAY,CAAC,GAC3CA,YAAY,CAAA;IAEhB,OAAO;QACLxM,QAAQ;QACRa,MAAM,EAAE8L,eAAe,CAAC9L,MAAM,CAAC;QAC/BC,IAAI,EAAE8L,aAAa,CAAC9L,IAAI,CAAA;KACzB,CAAA;AACH,CAAA;AAEA,SAAS4L,eAAeA,CAAClF,YAAoB,EAAEgF,YAAoB,EAAA;IACjE,IAAIlE,QAAQ,GAAGkE,YAAY,CAACpL,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAACmH,KAAK,CAAC,GAAG,CAAC,CAAA;IAC1D,IAAIsE,gBAAgB,GAAGrF,YAAY,CAACe,KAAK,CAAC,GAAG,CAAC,CAAA;IAE9CsE,gBAAgB,CAAC5E,OAAO,EAAE+B,OAAO,IAAI;QACnC,IAAIA,OAAO,KAAK,IAAI,EAAE;YACpB,uDAAA;YACA,IAAI1B,QAAQ,CAACnJ,MAAM,GAAG,CAAC,EAAEmJ,QAAQ,CAACwE,GAAG,EAAE,CAAA;QACxC,CAAA,MAAM,IAAI9C,OAAO,KAAK,GAAG,EAAE;YAC1B1B,QAAQ,CAACvH,IAAI,CAACiJ,OAAO,CAAC,CAAA;QACvB,CAAA;IACH,CAAC,CAAC,CAAA;IAEF,OAAO1B,QAAQ,CAACnJ,MAAM,GAAG,CAAC,GAAGmJ,QAAQ,CAACxC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAA;AACvD,CAAA;AAEA,SAASiH,mBAAmBA,CAC1BC,IAAY,EACZC,KAAa,EACbC,IAAY,EACZvM,IAAmB,EAAA;IAEnB,OACE,oBAAqBqM,GAAAA,IAAI,GACjBC,sCAAAA,GAAAA,CAAAA,MAAAA,GAAAA,KAAK,GAAA,cAAa9M,IAAI,CAACC,SAAS,CACtCO,IAAI,CACL,GAAA,oCAAA,CAAoC,GAAA,CAC7BuM,MAAAA,GAAAA,IAAI,GAAA,0DAAA,CAA2D,GACJ,qEAAA,CAAA;AAEvE,CAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;CAsBG,GACG,SAAUC,0BAA0BA,CAExCxG,OAAY,EAAA;IACZ,OAAOA,OAAO,CAACmD,MAAM,CACnB,CAAC7C,KAAK,EAAEnI,KAAK,GACXA,KAAK,KAAK,CAAC,IAAKmI,KAAK,CAAC5B,KAAK,CAAC1E,IAAI,IAAIsG,KAAK,CAAC5B,KAAK,CAAC1E,IAAI,CAACxB,MAAM,GAAG,CAAE,CACnE,CAAA;AACH,CAAA;AAEA,wEAAA;AACA,oDAAA;AACgB,SAAAiO,mBAAmBA,CAEjCzG,OAAY,EAAE0G,oBAA6B,EAAA;IAC3C,IAAIC,WAAW,GAAGH,0BAA0B,CAACxG,OAAO,CAAC,CAAA;IAErD,2EAAA;IACA,wDAAA;IACA,iFAAA;IACA,IAAI0G,oBAAoB,EAAE;QACxB,OAAOC,WAAW,CAAC1O,GAAG,CAAC,CAACqI,KAAK,EAAErD,GAAG,GAChCA,GAAG,KAAK0J,WAAW,CAACnO,MAAM,GAAG,CAAC,GAAG8H,KAAK,CAACjH,QAAQ,GAAGiH,KAAK,CAAC0D,YAAY,CACrE,CAAA;IACF,CAAA;IAED,OAAO2C,WAAW,CAAC1O,GAAG,EAAEqI,KAAK,GAAKA,KAAK,CAAC0D,YAAY,CAAC,CAAA;AACvD,CAAA;AAEA;;CAEG,GACG,SAAU4C,SAASA,CACvBC,KAAS,EACTC,cAAwB,EACxBC,gBAAwB,EACxBC,cAAc,EAAQ;IAAA,IAAtBA,cAAc,KAAA,KAAA,CAAA,EAAA;QAAdA,cAAc,GAAG,KAAK,CAAA;IAAA,CAAA;IAEtB,IAAI/N,EAAiB,CAAA;IACrB,IAAI,OAAO4N,KAAK,KAAK,QAAQ,EAAE;QAC7B5N,EAAE,GAAGgB,SAAS,CAAC4M,KAAK,CAAC,CAAA;IACtB,CAAA,MAAM;QACL5N,EAAE,GAAAkE,QAAA,CAAQ0J,CAAAA,CAAAA,EAAAA,KAAK,CAAE,CAAA;QAEjBxK,SAAS,CACP,CAACpD,EAAE,CAACI,QAAQ,IAAI,CAACJ,EAAE,CAACI,QAAQ,CAACmI,QAAQ,CAAC,GAAG,CAAC,EAC1C4E,mBAAmB,CAAC,GAAG,EAAE,UAAU,EAAE,QAAQ,EAAEnN,EAAE,CAAC,CACnD,CAAA;QACDoD,SAAS,CACP,CAACpD,EAAE,CAACI,QAAQ,IAAI,CAACJ,EAAE,CAACI,QAAQ,CAACmI,QAAQ,CAAC,GAAG,CAAC,EAC1C4E,mBAAmB,CAAC,GAAG,EAAE,UAAU,EAAE,MAAM,EAAEnN,EAAE,CAAC,CACjD,CAAA;QACDoD,SAAS,CACP,CAACpD,EAAE,CAACiB,MAAM,IAAI,CAACjB,EAAE,CAACiB,MAAM,CAACsH,QAAQ,CAAC,GAAG,CAAC,EACtC4E,mBAAmB,CAAC,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAEnN,EAAE,CAAC,CAC/C,CAAA;IACF,CAAA;IAED,IAAIgO,WAAW,GAAGJ,KAAK,KAAK,EAAE,IAAI5N,EAAE,CAACI,QAAQ,KAAK,EAAE,CAAA;IACpD,IAAIyM,UAAU,GAAGmB,WAAW,GAAG,GAAG,GAAGhO,EAAE,CAACI,QAAQ,CAAA;IAEhD,IAAI6N,IAAY,CAAA;IAEhB,uEAAA;IACA,EAAA;IACA,6EAAA;IACA,0EAAA;IACA,2EAAA;IACA,8EAAA;IACA,6EAAA;IACA,8EAAA;IACA,mEAAA;IACA,IAAIpB,UAAU,IAAI,IAAI,EAAE;QACtBoB,IAAI,GAAGH,gBAAgB,CAAA;IACxB,CAAA,MAAM;QACL,IAAII,kBAAkB,GAAGL,cAAc,CAACtO,MAAM,GAAG,CAAC,CAAA;QAElD,qEAAA;QACA,uEAAA;QACA,uEAAA;QACA,kCAAA;QACA,IAAI,CAACwO,cAAc,IAAIlB,UAAU,CAACrK,UAAU,CAAC,IAAI,CAAC,EAAE;YAClD,IAAI2L,UAAU,GAAGtB,UAAU,CAAClE,KAAK,CAAC,GAAG,CAAC,CAAA;YAEtC,MAAOwF,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,CAAE;gBAC7BA,UAAU,CAACC,KAAK,EAAE,CAAA;gBAClBF,kBAAkB,IAAI,CAAC,CAAA;YACxB,CAAA;YAEDlO,EAAE,CAACI,QAAQ,GAAG+N,UAAU,CAACjI,IAAI,CAAC,GAAG,CAAC,CAAA;QACnC,CAAA;QAED+H,IAAI,GAAGC,kBAAkB,IAAI,CAAC,GAAGL,cAAc,CAACK,kBAAkB,CAAC,GAAG,GAAG,CAAA;IAC1E,CAAA;IAED,IAAInN,IAAI,GAAG4L,WAAW,CAAC3M,EAAE,EAAEiO,IAAI,CAAC,CAAA;IAEhC,wEAAA;IACA,IAAII,wBAAwB,GAC1BxB,UAAU,IAAIA,UAAU,KAAK,GAAG,IAAIA,UAAU,CAAC9D,QAAQ,CAAC,GAAG,CAAC,CAAA;IAC9D,uEAAA;IACA,IAAIuF,uBAAuB,GACzB,CAACN,WAAW,IAAInB,UAAU,KAAK,GAAG,KAAKiB,gBAAgB,CAAC/E,QAAQ,CAAC,GAAG,CAAC,CAAA;IACvE,IACE,CAAChI,IAAI,CAACX,QAAQ,CAAC2I,QAAQ,CAAC,GAAG,CAAC,IAAA,CAC3BsF,wBAAwB,IAAIC,uBAAuB,CAAC,EACrD;QACAvN,IAAI,CAACX,QAAQ,IAAI,GAAG,CAAA;IACrB,CAAA;IAED,OAAOW,IAAI,CAAA;AACb,CAAA;AAEA;;CAEG,GACG,SAAUwN,aAAaA,CAACvO,EAAM,EAAA;IAClC,sDAAA;IACA,OAAOA,EAAE,KAAK,EAAE,IAAKA,EAAW,CAACI,QAAQ,KAAK,EAAE,GAC5C,GAAG,GACH,OAAOJ,EAAE,KAAK,QAAQ,GACtBgB,SAAS,CAAChB,EAAE,CAAC,CAACI,QAAQ,GACtBJ,EAAE,CAACI,QAAQ,CAAA;AACjB,CAAA;AAEA;;CAEG,SACU4H,SAAS,IAAIwG,KAAe,GACvCA,KAAK,CAACtI,IAAI,CAAC,GAAG,CAAC,CAAC1E,OAAO,CAAC,QAAQ,EAAE,GAAG,EAAC;AAExC;;CAEG,SACUwJ,iBAAiB,IAAI5K,QAAgB,GAChDA,QAAQ,CAACoB,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,EAAC;AAEnD;;CAEG,GACI,MAAMuL,eAAe,IAAI9L,MAAc,GAC5C,CAACA,MAAM,IAAIA,MAAM,KAAK,GAAG,GACrB,EAAE,GACFA,MAAM,CAACuB,UAAU,CAAC,GAAG,CAAC,GACtBvB,MAAM,GACN,GAAG,GAAGA,MAAM,CAAA;AAElB;;CAEG,GACI,MAAM+L,aAAa,IAAI9L,IAAY,GACxC,CAACA,IAAI,IAAIA,IAAI,KAAK,GAAG,GAAG,EAAE,GAAGA,IAAI,CAACsB,UAAU,CAAC,GAAG,CAAC,GAAGtB,IAAI,GAAG,GAAG,GAAGA,IAAI,CAAA;AAOvE;;;CAGG,GACI,MAAMuN,IAAI,GAAiB,SAArBA,IAAIA,CAAkBjH,IAAI,EAAEkH,IAAI,EAAS;IAAA,IAAbA,IAAI,KAAA,KAAA,CAAA,EAAA;QAAJA,IAAI,GAAG,CAAA,CAAE,CAAA;IAAA,CAAA;IAChD,IAAIC,YAAY,GAAG,OAAOD,IAAI,KAAK,QAAQ,GAAG;QAAEE,MAAM,EAAEF,IAAAA;IAAI,CAAE,GAAGA,IAAI,CAAA;IAErE,IAAIG,OAAO,GAAG,IAAIC,OAAO,CAACH,YAAY,CAACE,OAAO,CAAC,CAAA;IAC/C,IAAI,CAACA,OAAO,CAACE,GAAG,CAAC,cAAc,CAAC,EAAE;QAChCF,OAAO,CAACG,GAAG,CAAC,cAAc,EAAE,iCAAiC,CAAC,CAAA;IAC/D,CAAA;IAED,OAAO,IAAIC,QAAQ,CAAC1O,IAAI,CAACC,SAAS,CAACgH,IAAI,CAAC,EAAAtD,QAAA,CAAA,CAAA,CAAA,EACnCyK,YAAY,EAAA;QACfE,OAAAA;IAAO,CAAA,CACR,CAAC,CAAA;AACJ,EAAC;MAEYK,oBAAoB,CAAA;IAK/BC,WAAYA,CAAA3H,IAAO,EAAEkH,IAAmB,CAAA;QAJxC,IAAI,CAAAU,IAAA,GAAW,sBAAsB,CAAA;QAKnC,IAAI,CAAC5H,IAAI,GAAGA,IAAI,CAAA;QAChB,IAAI,CAACkH,IAAI,GAAGA,IAAI,IAAI,IAAI,CAAA;IAC1B,CAAA;AACD,CAAA;AAED;;;CAGG,GACa,SAAAlH,IAAIA,CAAIA,IAAO,EAAEkH,IAA4B,EAAA;IAC3D,OAAO,IAAIQ,oBAAoB,CAC7B1H,IAAI,EACJ,OAAOkH,IAAI,KAAK,QAAQ,GAAG;QAAEE,MAAM,EAAEF,IAAAA;KAAM,GAAGA,IAAI,CACnD,CAAA;AACH,CAAA;AAQM,MAAOW,oBAAqB,SAAQ9L,KAAK,CAAA;AAAA,CAAA;MAElC+L,YAAY,CAAA;IAWvBH,WAAYA,CAAA3H,IAA6B,EAAEmH,YAA2B,CAAA;QAV9D,IAAA,CAAAY,cAAc,GAAgB,IAAIhK,GAAG,EAAU,CAAA;QAI/C,IAAA,CAAAiK,WAAW,GACjB,IAAIjK,GAAG,EAAE,CAAA;QAGX,IAAY,CAAAkK,YAAA,GAAa,EAAE,CAAA;QAGzBrM,SAAS,CACPoE,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAI,CAACkI,KAAK,CAACC,OAAO,CAACnI,IAAI,CAAC,EACxD,oCAAoC,CACrC,CAAA;QAED,wEAAA;QACA,eAAA;QACA,IAAIoI,MAAyC,CAAA;QAC7C,IAAI,CAACC,YAAY,GAAG,IAAIC,OAAO,CAAC,CAAC1D,CAAC,EAAE2D,CAAC,GAAMH,MAAM,GAAGG,CAAE,CAAC,CAAA;QACvD,IAAI,CAACC,UAAU,GAAG,IAAIC,eAAe,EAAE,CAAA;QACvC,IAAIC,OAAO,GAAGA,IACZN,MAAM,CAAC,IAAIP,oBAAoB,CAAC,uBAAuB,CAAC,CAAC,CAAA;QAC3D,IAAI,CAACc,mBAAmB,GAAG,IACzB,IAAI,CAACH,UAAU,CAACI,MAAM,CAAChL,mBAAmB,CAAC,OAAO,EAAE8K,OAAO,CAAC,CAAA;QAC9D,IAAI,CAACF,UAAU,CAACI,MAAM,CAACjL,gBAAgB,CAAC,OAAO,EAAE+K,OAAO,CAAC,CAAA;QAEzD,IAAI,CAAC1I,IAAI,GAAGsD,MAAM,CAAC/L,OAAO,CAACyI,IAAI,CAAC,CAAC2C,MAAM,CACrC,CAACkG,GAAG,EAAAC,KAAA,KAAA;YAAA,IAAE,CAACrQ,GAAG,EAAEoD,KAAK,CAAC,GAAAiN,KAAA,CAAA;YAAA,OAChBxF,MAAM,CAAC7F,MAAM,CAACoL,GAAG,EAAE;gBACjB,CAACpQ,GAAG,CAAA,EAAG,IAAI,CAACsQ,YAAY,CAACtQ,GAAG,EAAEoD,KAAK,CAAA;aACpC,CAAC,CAAA;SACJ,EAAA,CAAA,CAAE,CACH,CAAA;QAED,IAAI,IAAI,CAACmN,IAAI,EAAE;YACb,oCAAA;YACA,IAAI,CAACL,mBAAmB,EAAE,CAAA;QAC3B,CAAA;QAED,IAAI,CAACzB,IAAI,GAAGC,YAAY,CAAA;IAC1B,CAAA;IAEQ4B,YAAYA,CAClBtQ,GAAW,EACXoD,KAAiC,EAAA;QAEjC,IAAI,CAAA,CAAEA,KAAK,YAAYyM,OAAO,CAAC,EAAE;YAC/B,OAAOzM,KAAK,CAAA;QACb,CAAA;QAED,IAAI,CAACoM,YAAY,CAACtO,IAAI,CAAClB,GAAG,CAAC,CAAA;QAC3B,IAAI,CAACsP,cAAc,CAACkB,GAAG,CAACxQ,GAAG,CAAC,CAAA;QAE5B,+DAAA;QACA,yCAAA;QACA,IAAIyQ,OAAO,GAAmBZ,OAAO,CAACa,IAAI,CAAC;YAACtN,KAAK;YAAE,IAAI,CAACwM,YAAY;SAAC,CAAC,CAACe,IAAI,EACxEpJ,IAAI,GAAK,IAAI,CAACqJ,QAAQ,CAACH,OAAO,EAAEzQ,GAAG,EAAEZ,SAAS,EAAEmI,IAAe,CAAC,GAChE1C,KAAK,GAAK,IAAI,CAAC+L,QAAQ,CAACH,OAAO,EAAEzQ,GAAG,EAAE6E,KAAgB,CAAC,CACzD,CAAA;QAED,uEAAA;QACA,oCAAA;QACA4L,OAAO,CAACI,KAAK,CAAC,KAAO,CAAA,AAAC,CAAC,CAAA;QAEvBhG,MAAM,CAACiG,cAAc,CAACL,OAAO,EAAE,UAAU,EAAE;YAAEM,GAAG,EAAEA,IAAM,IAAA;QAAI,CAAE,CAAC,CAAA;QAC/D,OAAON,OAAO,CAAA;IAChB,CAAA;IAEQG,QAAQA,CACdH,OAAuB,EACvBzQ,GAAW,EACX6E,KAAc,EACd0C,IAAc,EAAA;QAEd,IACE,IAAI,CAACwI,UAAU,CAACI,MAAM,CAACa,OAAO,IAC9BnM,KAAK,YAAYuK,oBAAoB,EACrC;YACA,IAAI,CAACc,mBAAmB,EAAE,CAAA;YAC1BrF,MAAM,CAACiG,cAAc,CAACL,OAAO,EAAE,QAAQ,EAAE;gBAAEM,GAAG,EAAEA,IAAMlM,KAAAA;YAAK,CAAE,CAAC,CAAA;YAC9D,OAAOgL,OAAO,CAACF,MAAM,CAAC9K,KAAK,CAAC,CAAA;QAC7B,CAAA;QAED,IAAI,CAACyK,cAAc,CAAC2B,MAAM,CAACjR,GAAG,CAAC,CAAA;QAE/B,IAAI,IAAI,CAACuQ,IAAI,EAAE;YACb,yBAAA;YACA,IAAI,CAACL,mBAAmB,EAAE,CAAA;QAC3B,CAAA;QAED,mFAAA;QACA,6CAAA;QACA,IAAIrL,KAAK,KAAKzF,SAAS,IAAImI,IAAI,KAAKnI,SAAS,EAAE;YAC7C,IAAI8R,cAAc,GAAG,IAAI5N,KAAK,CAC5B,0BAA0BtD,GAAAA,GAAG,GAAA,4CAAA,iDACwB,CACtD,CAAA;YACD6K,MAAM,CAACiG,cAAc,CAACL,OAAO,EAAE,QAAQ,EAAE;gBAAEM,GAAG,EAAEA,IAAMG,cAAAA;YAAc,CAAE,CAAC,CAAA;YACvE,IAAI,CAACC,IAAI,CAAC,KAAK,EAAEnR,GAAG,CAAC,CAAA;YACrB,OAAO6P,OAAO,CAACF,MAAM,CAACuB,cAAc,CAAC,CAAA;QACtC,CAAA;QAED,IAAI3J,IAAI,KAAKnI,SAAS,EAAE;YACtByL,MAAM,CAACiG,cAAc,CAACL,OAAO,EAAE,QAAQ,EAAE;gBAAEM,GAAG,EAAEA,IAAMlM,KAAAA;YAAK,CAAE,CAAC,CAAA;YAC9D,IAAI,CAACsM,IAAI,CAAC,KAAK,EAAEnR,GAAG,CAAC,CAAA;YACrB,OAAO6P,OAAO,CAACF,MAAM,CAAC9K,KAAK,CAAC,CAAA;QAC7B,CAAA;QAEDgG,MAAM,CAACiG,cAAc,CAACL,OAAO,EAAE,OAAO,EAAE;YAAEM,GAAG,EAAEA,IAAMxJ,IAAAA;QAAI,CAAE,CAAC,CAAA;QAC5D,IAAI,CAAC4J,IAAI,CAAC,KAAK,EAAEnR,GAAG,CAAC,CAAA;QACrB,OAAOuH,IAAI,CAAA;IACb,CAAA;IAEQ4J,IAAIA,CAACH,OAAgB,EAAEI,UAAmB,EAAA;QAChD,IAAI,CAAC7B,WAAW,CAACnH,OAAO,EAAEiJ,UAAU,GAAKA,UAAU,CAACL,OAAO,EAAEI,UAAU,CAAC,CAAC,CAAA;IAC3E,CAAA;IAEAE,SAASA,CAAC1P,EAAmD,EAAA;QAC3D,IAAI,CAAC2N,WAAW,CAACiB,GAAG,CAAC5O,EAAE,CAAC,CAAA;QACxB,OAAO,IAAM,IAAI,CAAC2N,WAAW,CAAC0B,MAAM,CAACrP,EAAE,CAAC,CAAA;IAC1C,CAAA;IAEA2P,MAAMA,GAAA;QACJ,IAAI,CAACxB,UAAU,CAACyB,KAAK,EAAE,CAAA;QACvB,IAAI,CAAClC,cAAc,CAAClH,OAAO,CAAC,CAACiE,CAAC,EAAEoF,CAAC,GAAK,IAAI,CAACnC,cAAc,CAAC2B,MAAM,CAACQ,CAAC,CAAC,CAAC,CAAA;QACpE,IAAI,CAACN,IAAI,CAAC,IAAI,CAAC,CAAA;IACjB,CAAA;IAEA,MAAMO,WAAWA,CAACvB,MAAmB,EAAA;QACnC,IAAIa,OAAO,GAAG,KAAK,CAAA;QACnB,IAAI,CAAC,IAAI,CAACT,IAAI,EAAE;YACd,IAAIN,OAAO,GAAGA,IAAM,IAAI,CAACsB,MAAM,EAAE,CAAA;YACjCpB,MAAM,CAACjL,gBAAgB,CAAC,OAAO,EAAE+K,OAAO,CAAC,CAAA;YACzCe,OAAO,GAAG,MAAM,IAAInB,OAAO,EAAE8B,OAAO,IAAI;gBACtC,IAAI,CAACL,SAAS,EAAEN,OAAO,IAAI;oBACzBb,MAAM,CAAChL,mBAAmB,CAAC,OAAO,EAAE8K,OAAO,CAAC,CAAA;oBAC5C,IAAIe,OAAO,IAAI,IAAI,CAACT,IAAI,EAAE;wBACxBoB,OAAO,CAACX,OAAO,CAAC,CAAA;oBACjB,CAAA;gBACH,CAAC,CAAC,CAAA;YACJ,CAAC,CAAC,CAAA;QACH,CAAA;QACD,OAAOA,OAAO,CAAA;IAChB,CAAA;IAEA,IAAIT,IAAIA,GAAA;QACN,OAAO,IAAI,CAACjB,cAAc,CAACsC,IAAI,KAAK,CAAC,CAAA;IACvC,CAAA;IAEA,IAAIC,aAAaA,GAAA;QACf1O,SAAS,CACP,IAAI,CAACoE,IAAI,KAAK,IAAI,IAAI,IAAI,CAACgJ,IAAI,EAC/B,2DAA2D,CAC5D,CAAA;QAED,OAAO1F,MAAM,CAAC/L,OAAO,CAAC,IAAI,CAACyI,IAAI,CAAC,CAAC2C,MAAM,CACrC,CAACkG,GAAG,EAAA0B,KAAA,KAAA;YAAA,IAAE,CAAC9R,GAAG,EAAEoD,KAAK,CAAC,GAAA0O,KAAA,CAAA;YAAA,OAChBjH,MAAM,CAAC7F,MAAM,CAACoL,GAAG,EAAE;gBACjB,CAACpQ,GAAG,CAAA,EAAG+R,oBAAoB,CAAC3O,KAAK,CAAA;aAClC,CAAC,CAAA;SACJ,EAAA,CAAA,CAAE,CACH,CAAA;IACH,CAAA;IAEA,IAAI4O,WAAWA,GAAA;QACb,OAAOvC,KAAK,CAACzB,IAAI,CAAC,IAAI,CAACsB,cAAc,CAAC,CAAA;IACxC,CAAA;AACD,CAAA;AAED,SAAS2C,gBAAgBA,CAAC7O,KAAU,EAAA;IAClC,OACEA,KAAK,YAAYyM,OAAO,IAAKzM,KAAwB,CAAC8O,QAAQ,KAAK,IAAI,CAAA;AAE3E,CAAA;AAEA,SAASH,oBAAoBA,CAAC3O,KAAU,EAAA;IACtC,IAAI,CAAC6O,gBAAgB,CAAC7O,KAAK,CAAC,EAAE;QAC5B,OAAOA,KAAK,CAAA;IACb,CAAA;IAED,IAAIA,KAAK,CAAC+O,MAAM,EAAE;QAChB,MAAM/O,KAAK,CAAC+O,MAAM,CAAA;IACnB,CAAA;IACD,OAAO/O,KAAK,CAACgP,KAAK,CAAA;AACpB,CAAA;AAOO,MAAMC,KAAK,GAAkB,SAAvBA,KAAKA,CAAmB9K,IAAI,EAAEkH,IAAI,EAAS;IAAA,IAAbA,IAAI,KAAA,KAAA,CAAA,EAAA;QAAJA,IAAI,GAAG,CAAA,CAAE,CAAA;IAAA,CAAA;IAClD,IAAIC,YAAY,GAAG,OAAOD,IAAI,KAAK,QAAQ,GAAG;QAAEE,MAAM,EAAEF,IAAAA;IAAI,CAAE,GAAGA,IAAI,CAAA;IAErE,OAAO,IAAIY,YAAY,CAAC9H,IAAI,EAAEmH,YAAY,CAAC,CAAA;AAC7C,EAAC;AAOD;;;CAGG,GACI,MAAM4D,QAAQ,GAAqB,SAA7BA,QAAQA,CAAsBxP,GAAG,EAAE2L,IAAI,EAAU;IAAA,IAAdA,IAAI,KAAA,KAAA,CAAA,EAAA;QAAJA,IAAI,GAAG,GAAG,CAAA;IAAA,CAAA;IACxD,IAAIC,YAAY,GAAGD,IAAI,CAAA;IACvB,IAAI,OAAOC,YAAY,KAAK,QAAQ,EAAE;QACpCA,YAAY,GAAG;YAAEC,MAAM,EAAED,YAAAA;SAAc,CAAA;KACxC,MAAM,IAAI,OAAOA,YAAY,CAACC,MAAM,KAAK,WAAW,EAAE;QACrDD,YAAY,CAACC,MAAM,GAAG,GAAG,CAAA;IAC1B,CAAA;IAED,IAAIC,OAAO,GAAG,IAAIC,OAAO,CAACH,YAAY,CAACE,OAAO,CAAC,CAAA;IAC/CA,OAAO,CAACG,GAAG,CAAC,UAAU,EAAEjM,GAAG,CAAC,CAAA;IAE5B,OAAO,IAAIkM,QAAQ,CAAC,IAAI,EAAA/K,QAAA,CAAA,CAAA,GACnByK,YAAY,EAAA;QACfE,OAAAA;IAAO,CAAA,CACR,CAAC,CAAA;AACJ,EAAC;AAED;;;;CAIG,SACU2D,gBAAgB,GAAqBA,CAACzP,GAAG,EAAE2L,IAAI,KAAI;IAC9D,IAAI+D,QAAQ,GAAGF,QAAQ,CAACxP,GAAG,EAAE2L,IAAI,CAAC,CAAA;IAClC+D,QAAQ,CAAC5D,OAAO,CAACG,GAAG,CAAC,yBAAyB,EAAE,MAAM,CAAC,CAAA;IACvD,OAAOyD,QAAQ,CAAA;AACjB,EAAC;AAED;;;;;CAKG,SACUjR,OAAO,GAAqBA,CAACuB,GAAG,EAAE2L,IAAI,KAAI;IACrD,IAAI+D,QAAQ,GAAGF,QAAQ,CAACxP,GAAG,EAAE2L,IAAI,CAAC,CAAA;IAClC+D,QAAQ,CAAC5D,OAAO,CAACG,GAAG,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAA;IAC/C,OAAOyD,QAAQ,CAAA;AACjB,EAAC;AAQD;;;;;;;CAOG,SACUC,iBAAiB,CAAA;IAO5BvD,WACEA,CAAAP,MAAc,EACd+D,UAA8B,EAC9BnL,IAAS,EACToL,QAAQ,CAAQ;QAAA,IAAhBA,QAAQ,KAAA,KAAA,CAAA,EAAA;YAARA,QAAQ,GAAG,KAAK,CAAA;QAAA,CAAA;QAEhB,IAAI,CAAChE,MAAM,GAAGA,MAAM,CAAA;QACpB,IAAI,CAAC+D,UAAU,GAAGA,UAAU,IAAI,EAAE,CAAA;QAClC,IAAI,CAACC,QAAQ,GAAGA,QAAQ,CAAA;QACxB,IAAIpL,IAAI,YAAYjE,KAAK,EAAE;YACzB,IAAI,CAACiE,IAAI,GAAGA,IAAI,CAAC1D,QAAQ,EAAE,CAAA;YAC3B,IAAI,CAACgB,KAAK,GAAG0C,IAAI,CAAA;QAClB,CAAA,MAAM;YACL,IAAI,CAACA,IAAI,GAAGA,IAAI,CAAA;QACjB,CAAA;IACH,CAAA;AACD,CAAA;AAED;;;CAGG,GACG,SAAUqL,oBAAoBA,CAAC/N,KAAU,EAAA;IAC7C,OACEA,KAAK,IAAI,IAAI,IACb,OAAOA,KAAK,CAAC8J,MAAM,KAAK,QAAQ,IAChC,OAAO9J,KAAK,CAAC6N,UAAU,KAAK,QAAQ,IACpC,OAAO7N,KAAK,CAAC8N,QAAQ,KAAK,SAAS,IACnC,MAAM,IAAI9N,KAAK,CAAA;AAEnB;ACr/BA,MAAMgO,uBAAuB,GAAyB;IACpD,MAAM;IACN,KAAK;IACL,OAAO;IACP,QAAQ;CACT,CAAA;AACD,MAAMC,oBAAoB,GAAG,IAAIxN,GAAG,CAClCuN,uBAAuB,CACxB,CAAA;AAED,MAAME,sBAAsB,GAAiB;IAC3C,KAAK,EACL;OAAGF,uBAAuB;CAC3B,CAAA;AACD,MAAMG,mBAAmB,GAAG,IAAI1N,GAAG,CAAayN,sBAAsB,CAAC,CAAA;AAEvE,MAAME,mBAAmB,GAAG,IAAI3N,GAAG,CAAC;IAAC,GAAG;IAAE,GAAG;IAAE,GAAG;IAAE,GAAG;IAAE,GAAG;CAAC,CAAC,CAAA;AAC9D,MAAM4N,iCAAiC,GAAG,IAAI5N,GAAG,CAAC;IAAC,GAAG;IAAE,GAAG;CAAC,CAAC,CAAA;AAEtD,MAAM6N,eAAe,GAA6B;IACvDhU,KAAK,EAAE,MAAM;IACbc,QAAQ,EAAEb,SAAS;IACnBgU,UAAU,EAAEhU,SAAS;IACrBiU,UAAU,EAAEjU,SAAS;IACrBkU,WAAW,EAAElU,SAAS;IACtBmU,QAAQ,EAAEnU,SAAS;IACnBoP,IAAI,EAAEpP,SAAS;IACfoU,IAAI,EAAEpU,SAAAA;EACP;AAEM,MAAMqU,YAAY,GAA0B;IACjDtU,KAAK,EAAE,MAAM;IACboI,IAAI,EAAEnI,SAAS;IACfgU,UAAU,EAAEhU,SAAS;IACrBiU,UAAU,EAAEjU,SAAS;IACrBkU,WAAW,EAAElU,SAAS;IACtBmU,QAAQ,EAAEnU,SAAS;IACnBoP,IAAI,EAAEpP,SAAS;IACfoU,IAAI,EAAEpU,SAAAA;EACP;AAEM,MAAMsU,YAAY,GAAqB;IAC5CvU,KAAK,EAAE,WAAW;IAClBwU,OAAO,EAAEvU,SAAS;IAClBwU,KAAK,EAAExU,SAAS;IAChBa,QAAQ,EAAEb,SAAAA;EACX;AAED,MAAMyU,kBAAkB,GAAG,+BAA+B,CAAA;AAE1D,MAAMC,yBAAyB,IAAgCtO,KAAK,GAAA,CAAM;QACxEuO,gBAAgB,EAAEC,OAAO,CAACxO,KAAK,CAACuO,gBAAgB,CAAA;IACjD,CAAA,CAAC,CAAA;AAEF,MAAME,uBAAuB,GAAG,0BAA0B,CAAA;AAE1D,YAAA;AAEA,gFAAA;AACA,sBAAA;AACA,gFAAA;AAEA;;CAEG,GACG,SAAUC,YAAYA,CAACzF,IAAgB,EAAA;IAC3C,MAAM0F,YAAY,GAAG1F,IAAI,CAAC1M,MAAM,GAC5B0M,IAAI,CAAC1M,MAAM,GACX,OAAOA,MAAM,KAAK,WAAW,GAC7BA,MAAM,uCACN3C,SAAS,CAAA;IACb,MAAMgV,SAAS,GACb,OAAOD,YAAY,KAAK,WAAW,IACnC,OAAOA,YAAY,CAACzR,QAAQ,KAAK,WAAW,IAC5C,OAAOyR,YAAY,CAACzR,QAAQ,CAAC2R,aAAa,KAAK,WAAW,CAAA;IAC5D,MAAMC,QAAQ,GAAG,CAACF,SAAS,CAAA;IAE3BjR,SAAS,CACPsL,IAAI,CAAC/I,MAAM,CAACpG,MAAM,GAAG,CAAC,EACtB,2DAA2D,CAC5D,CAAA;IAED,IAAIqG,kBAA8C,CAAA;IAClD,IAAI8I,IAAI,CAAC9I,kBAAkB,EAAE;QAC3BA,kBAAkB,GAAG8I,IAAI,CAAC9I,kBAAkB,CAAA;IAC7C,CAAA,MAAM,IAAI8I,IAAI,CAAC8F,mBAAmB,EAAE;QACnC,2EAAA;QACA,IAAIA,mBAAmB,GAAG9F,IAAI,CAAC8F,mBAAmB,CAAA;QAClD5O,kBAAkB,IAAIH,KAAK,GAAA,CAAM;gBAC/BuO,gBAAgB,EAAEQ,mBAAmB,CAAC/O,KAAK,CAAA;YAC5C,CAAA,CAAC,CAAA;IACH,CAAA,MAAM;QACLG,kBAAkB,GAAGmO,yBAAyB,CAAA;IAC/C,CAAA;IAED,qBAAA;IACA,IAAIjO,QAAQ,GAAkB,CAAA,CAAE,CAAA;IAChC,qCAAA;IACA,IAAI2O,UAAU,GAAG/O,yBAAyB,CACxCgJ,IAAI,CAAC/I,MAAM,EACXC,kBAAkB,EAClBvG,SAAS,EACTyG,QAAQ,CACT,CAAA;IACD,IAAI4O,kBAAyD,CAAA;IAC7D,IAAIlO,QAAQ,GAAGkI,IAAI,CAAClI,QAAQ,IAAI,GAAG,CAAA;IACnC,IAAImO,gBAAgB,GAAGjG,IAAI,CAACkG,qBAAqB,IAAIC,mBAAmB,CAAA;IACxE,IAAIC,2BAA2B,GAAGpG,IAAI,CAACqG,gCAAgC,CAAA;IAEvE,+BAAA;IACA,IAAIC,MAAM,GAAA9Q,QAAA,CAAA;QACR+Q,iBAAiB,EAAE,KAAK;QACxBC,sBAAsB,EAAE,KAAK;QAC7BC,mBAAmB,EAAE,KAAK;QAC1BC,kBAAkB,EAAE,KAAK;QACzB3H,oBAAoB,EAAE,KAAK;QAC3B4H,8BAA8B,EAAE,KAAA;KAC7B3G,EAAAA,IAAI,CAACsG,MAAM,CACf,CAAA;IACD,+BAAA;IACA,IAAIM,eAAe,GAAwB,IAAI,CAAA;IAC/C,6DAAA;IACA,IAAI9F,WAAW,GAAG,IAAIjK,GAAG,EAAoB,CAAA;IAC7C,sEAAA;IACA,0CAAA;IACA,IAAIgQ,uBAAuB,GAAG,IAAI,CAAA;IAClC,IAAIC,gBAAgB,GAAG,IAAIjQ,GAAG,EAAU,CAAA;IACxC,iFAAA;IACA,IAAIkQ,oBAAoB,GAAkC,IAAI,CAAA;IAC9D,8DAAA;IACA,IAAIC,uBAAuB,GAA2C,IAAI,CAAA;IAC1E,8DAAA;IACA,IAAIC,iBAAiB,GAAqC,IAAI,CAAA;IAC9D,8EAAA;IACA,4EAAA;IACA,4EAAA;IACA,uCAAA;IACA,gFAAA;IACA,0CAAA;IACA,IAAIC,qBAAqB,GAAGlH,IAAI,CAACmH,aAAa,IAAI,IAAI,CAAA;IAEtD,IAAIC,cAAc,GAAGxP,WAAW,CAACmO,UAAU,EAAE/F,IAAI,CAAC/N,OAAO,CAACT,QAAQ,EAAEsG,QAAQ,CAAC,CAAA;IAC7E,IAAIuP,aAAa,GAAqB,IAAI,CAAA;IAE1C,IAAID,cAAc,IAAI,IAAI,IAAI,CAAChB,2BAA2B,EAAE;QAC1D,kEAAA;QACA,2CAAA;QACA,IAAIhQ,KAAK,GAAGkR,sBAAsB,CAAC,GAAG,EAAE;YACtC5V,QAAQ,EAAEsO,IAAI,CAAC/N,OAAO,CAACT,QAAQ,CAACE,QAAAA;QACjC,CAAA,CAAC,CAAA;QACF,IAAI,EAAE2G,OAAO,EAAEtB,KAAAA,EAAO,GAAGwQ,sBAAsB,CAACxB,UAAU,CAAC,CAAA;QAC3DqB,cAAc,GAAG/O,OAAO,CAAA;QACxBgP,aAAa,GAAG;YAAE,CAACtQ,KAAK,CAACQ,EAAE,CAAA,EAAGnB,KAAAA;SAAO,CAAA;IACtC,CAAA;IAED,iFAAA;IACA,4EAAA;IACA,2EAAA;IACA,0EAAA;IACA,yEAAA;IACA,8DAAA;IACA,IAAIgR,cAAc,IAAI,CAACpH,IAAI,CAACmH,aAAa,EAAE;QACzC,IAAIK,QAAQ,GAAGC,aAAa,CAC1BL,cAAc,EACdrB,UAAU,EACV/F,IAAI,CAAC/N,OAAO,CAACT,QAAQ,CAACE,QAAQ,CAC/B,CAAA;QACD,IAAI8V,QAAQ,CAACE,MAAM,EAAE;YACnBN,cAAc,GAAG,IAAI,CAAA;QACtB,CAAA;IACF,CAAA;IAED,IAAIO,WAAoB,CAAA;IACxB,IAAI,CAACP,cAAc,EAAE;QACnBO,WAAW,GAAG,KAAK,CAAA;QACnBP,cAAc,GAAG,EAAE,CAAA;QAEnB,qEAAA;QACA,+EAAA;QACA,oEAAA;QACA,IAAId,MAAM,CAACG,mBAAmB,EAAE;YAC9B,IAAIe,QAAQ,GAAGC,aAAa,CAC1B,IAAI,EACJ1B,UAAU,EACV/F,IAAI,CAAC/N,OAAO,CAACT,QAAQ,CAACE,QAAQ,CAC/B,CAAA;YACD,IAAI8V,QAAQ,CAACE,MAAM,IAAIF,QAAQ,CAACnP,OAAO,EAAE;gBACvC+O,cAAc,GAAGI,QAAQ,CAACnP,OAAO,CAAA;YAClC,CAAA;QACF,CAAA;IACF,CAAA,MAAM,IAAI+O,cAAc,CAAC7L,IAAI,EAAEqM,CAAC,GAAKA,CAAC,CAAC7Q,KAAK,CAAC8Q,IAAI,CAAC,EAAE;QACnD,4EAAA;QACA,qEAAA;QACAF,WAAW,GAAG,KAAK,CAAA;IACpB,CAAA,MAAM,IAAI,CAACP,cAAc,CAAC7L,IAAI,EAAEqM,CAAC,GAAKA,CAAC,CAAC7Q,KAAK,CAAC+Q,MAAM,CAAC,EAAE;QACtD,wDAAA;QACAH,WAAW,GAAG,IAAI,CAAA;IACnB,CAAA,MAAM,IAAIrB,MAAM,CAACG,mBAAmB,EAAE;QACrC,wEAAA;QACA,4EAAA;QACA,qCAAA;QACA,IAAI7N,UAAU,GAAGoH,IAAI,CAACmH,aAAa,GAAGnH,IAAI,CAACmH,aAAa,CAACvO,UAAU,GAAG,IAAI,CAAA;QAC1E,IAAImP,MAAM,GAAG/H,IAAI,CAACmH,aAAa,GAAGnH,IAAI,CAACmH,aAAa,CAACY,MAAM,GAAG,IAAI,CAAA;QAClE,IAAIC,kBAAkB,IAAIJ,CAAyB,IAAI;YACrD,mCAAA;YACA,IAAI,CAACA,CAAC,CAAC7Q,KAAK,CAAC+Q,MAAM,EAAE;gBACnB,OAAO,IAAI,CAAA;YACZ,CAAA;YACD,+CAAA;YACA,IACE,OAAOF,CAAC,CAAC7Q,KAAK,CAAC+Q,MAAM,KAAK,UAAU,IACpCF,CAAC,CAAC7Q,KAAK,CAAC+Q,MAAM,CAACG,OAAO,KAAK,IAAI,EAC/B;gBACA,OAAO,KAAK,CAAA;YACb,CAAA;YACD,2DAAA;YACA,OACGrP,UAAU,IAAIA,UAAU,CAACgP,CAAC,CAAC7Q,KAAK,CAACQ,EAAE,CAAC,KAAK5G,SAAS,IAClDoX,MAAM,IAAIA,MAAM,CAACH,CAAC,CAAC7Q,KAAK,CAACQ,EAAE,CAAC,KAAK5G,SAAU,CAAA;SAE/C,CAAA;QAED,4DAAA;QACA,IAAIoX,MAAM,EAAE;YACV,IAAIzS,GAAG,GAAG8R,cAAc,CAACc,SAAS,EAC/BN,CAAC,GAAKG,MAAO,CAACH,CAAC,CAAC7Q,KAAK,CAACQ,EAAE,CAAC,KAAK5G,SAAS,CACzC,CAAA;YACDgX,WAAW,GAAGP,cAAc,CAAC5S,KAAK,CAAC,CAAC,EAAEc,GAAG,GAAG,CAAC,CAAC,CAACuG,KAAK,CAACmM,kBAAkB,CAAC,CAAA;QACzE,CAAA,MAAM;YACLL,WAAW,GAAGP,cAAc,CAACvL,KAAK,CAACmM,kBAAkB,CAAC,CAAA;QACvD,CAAA;IACF,CAAA,MAAM;QACL,wEAAA;QACA,mDAAA;QACAL,WAAW,GAAG3H,IAAI,CAACmH,aAAa,IAAI,IAAI,CAAA;IACzC,CAAA;IAED,IAAIgB,MAAc,CAAA;IAClB,IAAIzX,KAAK,GAAgB;QACvB0X,aAAa,EAAEpI,IAAI,CAAC/N,OAAO,CAACnB,MAAM;QAClCU,QAAQ,EAAEwO,IAAI,CAAC/N,OAAO,CAACT,QAAQ;QAC/B6G,OAAO,EAAE+O,cAAc;QACvBO,WAAW;QACXU,UAAU,EAAE3D,eAAe;QAC3B,0DAAA;QACA4D,qBAAqB,EAAEtI,IAAI,CAACmH,aAAa,IAAI,IAAI,GAAG,KAAK,GAAG,IAAI;QAChEoB,kBAAkB,EAAE,KAAK;QACzBC,YAAY,EAAE,MAAM;QACpB5P,UAAU,EAAGoH,IAAI,CAACmH,aAAa,IAAInH,IAAI,CAACmH,aAAa,CAACvO,UAAU,IAAK,CAAA,CAAE;QACvE6P,UAAU,EAAGzI,IAAI,CAACmH,aAAa,IAAInH,IAAI,CAACmH,aAAa,CAACsB,UAAU,IAAK,IAAI;QACzEV,MAAM,EAAG/H,IAAI,CAACmH,aAAa,IAAInH,IAAI,CAACmH,aAAa,CAACY,MAAM,IAAKV,aAAa;QAC1EqB,QAAQ,EAAE,IAAIC,GAAG,EAAE;QACnBC,QAAQ,EAAE,IAAID,GAAG,EAAE;KACpB,CAAA;IAED,0DAAA;IACA,yEAAA;IACA,IAAIE,aAAa,GAAkBC,MAAa,CAAC/X,GAAG,CAAA;IAEpD,0EAAA;IACA,eAAA;IACA,IAAIgY,yBAAyB,GAAG,KAAK,CAAA;IAErC,4CAAA;IACA,IAAIC,2BAAmD,CAAA;IAEvD,qEAAA;IACA,IAAIC,4BAA4B,GAAG,KAAK,CAAA;IAExC,6DAAA;IACA,IAAIC,sBAAsB,GAA6B,IAAIP,GAAG,EAG3D,CAAA;IAEH,wEAAA;IACA,IAAIQ,2BAA2B,GAAwB,IAAI,CAAA;IAE3D,mEAAA;IACA,yCAAA;IACA,IAAIC,2BAA2B,GAAG,KAAK,CAAA;IAEvC,+DAAA;IACA,4CAAA;IACA,sBAAA;IACA,wCAAA;IACA,IAAIC,sBAAsB,GAAG,KAAK,CAAA;IAElC,0EAAA;IACA,+CAAA;IACA,IAAIC,uBAAuB,GAAa,EAAE,CAAA;IAE1C,6EAAA;IACA,6CAAA;IACA,IAAIC,qBAAqB,GAAgB,IAAI1S,GAAG,EAAE,CAAA;IAElD,8CAAA;IACA,IAAI2S,gBAAgB,GAAG,IAAIb,GAAG,EAA2B,CAAA;IAEzD,uDAAA;IACA,IAAIc,kBAAkB,GAAG,CAAC,CAAA;IAE1B,4EAAA;IACA,6EAAA;IACA,aAAA;IACA,IAAIC,uBAAuB,GAAG,CAAC,CAAC,CAAA;IAEhC,oEAAA;IACA,IAAIC,cAAc,GAAG,IAAIhB,GAAG,EAAkB,CAAA;IAE9C,+CAAA;IACA,IAAIiB,gBAAgB,GAAG,IAAI/S,GAAG,EAAU,CAAA;IAExC,6DAAA;IACA,IAAIgT,gBAAgB,GAAG,IAAIlB,GAAG,EAA0B,CAAA;IAExD,sEAAA;IACA,IAAImB,cAAc,GAAG,IAAInB,GAAG,EAAkB,CAAA;IAE9C,sEAAA;IACA,0DAAA;IACA,IAAIoB,eAAe,GAAG,IAAIlT,GAAG,EAAU,CAAA;IAEvC,iEAAA;IACA,0EAAA;IACA,wEAAA;IACA,iDAAA;IACA,IAAImT,eAAe,GAAG,IAAIrB,GAAG,EAAwB,CAAA;IAErD,0EAAA;IACA,kDAAA;IACA,IAAIsB,gBAAgB,GAAG,IAAItB,GAAG,EAA2B,CAAA;IAEzD,+EAAA;IACA,oDAAA;IACA,IAAIuB,kBAAkB,GAAG,IAAIvB,GAAG,EAG7B,CAAA;IAEH,6EAAA;IACA,8EAAA;IACA,IAAIwB,2BAA2B,GAA6BxZ,SAAS,CAAA;IAErE,0EAAA;IACA,2CAAA;IACA,kDAAA;IACA,SAASyZ,UAAUA,GAAA;QACjB,oFAAA;QACA,mEAAA;QACAxD,eAAe,GAAG5G,IAAI,CAAC/N,OAAO,CAACiB,MAAM,EACnCuC,IAAA,IAA+C;YAAA,IAA9C,EAAE3E,MAAM,EAAEsX,aAAa,EAAE5W,QAAQ,EAAEqB,KAAAA,EAAO,GAAA4C,IAAA,CAAA;YACzC,+DAAA;YACA,yBAAA;YACA,IAAI0U,2BAA2B,EAAE;gBAC/BA,2BAA2B,EAAE,CAAA;gBAC7BA,2BAA2B,GAAGxZ,SAAS,CAAA;gBACvC,OAAA;YACD,CAAA;YAEDgB,OAAO,CACLsY,gBAAgB,CAAC9G,IAAI,KAAK,CAAC,IAAItQ,KAAK,IAAI,IAAI,EAC5C,oEAAoE,GAClE,wEAAwE,GACxE,uEAAuE,GACvE,yEAAyE,GACzE,iEAAiE,GACjE,yDAAyD,CAC5D,CAAA;YAED,IAAIwX,UAAU,GAAGC,qBAAqB,CAAC;gBACrCC,eAAe,EAAE7Z,KAAK,CAACc,QAAQ;gBAC/BmB,YAAY,EAAEnB,QAAQ;gBACtB4W,aAAAA;YACD,CAAA,CAAC,CAAA;YAEF,IAAIiC,UAAU,IAAIxX,KAAK,IAAI,IAAI,EAAE;gBAC/B,yEAAA;gBACA,IAAI2X,wBAAwB,GAAG,IAAIpJ,OAAO,EAAQ8B,OAAO,IAAI;oBAC3DiH,2BAA2B,GAAGjH,OAAO,CAAA;gBACvC,CAAC,CAAC,CAAA;gBACFlD,IAAI,CAAC/N,OAAO,CAACe,EAAE,CAACH,KAAK,GAAG,CAAC,CAAC,CAAC,CAAA;gBAE3B,uCAAA;gBACA4X,aAAa,CAACJ,UAAU,EAAE;oBACxB3Z,KAAK,EAAE,SAAS;oBAChBc,QAAQ;oBACR0T,OAAOA,GAAA;wBACLuF,aAAa,CAACJ,UAAW,EAAE;4BACzB3Z,KAAK,EAAE,YAAY;4BACnBwU,OAAO,EAAEvU,SAAS;4BAClBwU,KAAK,EAAExU,SAAS;4BAChBa,QAAAA;wBACD,CAAA,CAAC,CAAA;wBACF,+DAAA;wBACA,sCAAA;wBACA,yDAAA;wBACAgZ,wBAAwB,CAACtI,IAAI,CAAC,IAAMlC,IAAI,CAAC/N,OAAO,CAACe,EAAE,CAACH,KAAK,CAAC,CAAC,CAAA;qBAC5D;oBACDsS,KAAKA,GAAA;wBACH,IAAIyD,QAAQ,GAAG,IAAID,GAAG,CAACjY,KAAK,CAACkY,QAAQ,CAAC,CAAA;wBACtCA,QAAQ,CAACtI,GAAG,CAAC+J,UAAW,EAAEpF,YAAY,CAAC,CAAA;wBACvCyF,WAAW,CAAC;4BAAE9B,QAAAA;wBAAQ,CAAE,CAAC,CAAA;oBAC3B,CAAA;gBACD,CAAA,CAAC,CAAA;gBACF,OAAA;YACD,CAAA;YAED,OAAO+B,eAAe,CAACvC,aAAa,EAAE5W,QAAQ,CAAC,CAAA;QACjD,CAAC,CACF,CAAA;QAED,IAAImU,SAAS,EAAE;YACb,iEAAA;YACA,oDAAA;YACAiF,yBAAyB,CAAClF,YAAY,EAAEwD,sBAAsB,CAAC,CAAA;YAC/D,IAAI2B,uBAAuB,GAAGA,IAC5BC,yBAAyB,CAACpF,YAAY,EAAEwD,sBAAsB,CAAC,CAAA;YACjExD,YAAY,CAACjP,gBAAgB,CAAC,UAAU,EAAEoU,uBAAuB,CAAC,CAAA;YAClE1B,2BAA2B,GAAGA,IAC5BzD,YAAY,CAAChP,mBAAmB,CAAC,UAAU,EAAEmU,uBAAuB,CAAC,CAAA;QACxE,CAAA;QAED,4EAAA;QACA,2EAAA;QACA,8EAAA;QACA,6EAAA;QACA,oBAAA;QACA,IAAI,CAACna,KAAK,CAACiX,WAAW,EAAE;YACtBgD,eAAe,CAAC7B,MAAa,CAAC/X,GAAG,EAAEL,KAAK,CAACc,QAAQ,EAAE;gBACjDuZ,gBAAgB,EAAE,IAAA;YACnB,CAAA,CAAC,CAAA;QACH,CAAA;QAED,OAAO5C,MAAM,CAAA;IACf,CAAA;IAEA,0CAAA;IACA,SAAS6C,OAAOA,GAAA;QACd,IAAIpE,eAAe,EAAE;YACnBA,eAAe,EAAE,CAAA;QAClB,CAAA;QACD,IAAIuC,2BAA2B,EAAE;YAC/BA,2BAA2B,EAAE,CAAA;QAC9B,CAAA;QACDrI,WAAW,CAACmK,KAAK,EAAE,CAAA;QACnBjC,2BAA2B,IAAIA,2BAA2B,CAACjG,KAAK,EAAE,CAAA;QAClErS,KAAK,CAACgY,QAAQ,CAAC/O,OAAO,CAAC,CAAC+D,CAAC,EAAEnM,GAAG,GAAK2Z,aAAa,CAAC3Z,GAAG,CAAC,CAAC,CAAA;QACtDb,KAAK,CAACkY,QAAQ,CAACjP,OAAO,CAAC,CAAC+D,CAAC,EAAEnM,GAAG,GAAK4Z,aAAa,CAAC5Z,GAAG,CAAC,CAAC,CAAA;IACxD,CAAA;IAEA,4CAAA;IACA,SAASsR,SAASA,CAAC1P,EAAoB,EAAA;QACrC2N,WAAW,CAACiB,GAAG,CAAC5O,EAAE,CAAC,CAAA;QACnB,OAAO,IAAM2N,WAAW,CAAC0B,MAAM,CAACrP,EAAE,CAAC,CAAA;IACrC,CAAA;IAEA,gEAAA;IACA,SAASuX,WAAWA,CAClBU,QAA8B,EAC9BC,IAAAA,EAGM;QAAA,IAHNA,SAAAA,KAAAA,GAAAA;YAAAA,OAGI,CAAA,CAAE,CAAA;QAAA,CAAA;QAEN3a,KAAK,GAAA8E,QAAA,CAAA,CAAA,CAAA,EACA9E,KAAK,EACL0a,QAAQ,CACZ,CAAA;QAED,wEAAA;QACA,iBAAA;QACA,IAAIE,iBAAiB,GAAa,EAAE,CAAA;QACpC,IAAIC,mBAAmB,GAAa,EAAE,CAAA;QAEtC,IAAIjF,MAAM,CAACC,iBAAiB,EAAE;YAC5B7V,KAAK,CAACgY,QAAQ,CAAC/O,OAAO,CAAC,CAAC6R,OAAO,EAAEja,GAAG,KAAI;gBACtC,IAAIia,OAAO,CAAC9a,KAAK,KAAK,MAAM,EAAE;oBAC5B,IAAIqZ,eAAe,CAAC1J,GAAG,CAAC9O,GAAG,CAAC,EAAE;wBAC5B,mDAAA;wBACAga,mBAAmB,CAAC9Y,IAAI,CAAClB,GAAG,CAAC,CAAA;oBAC9B,CAAA,MAAM;wBACL,oEAAA;wBACA,yBAAA;wBACA+Z,iBAAiB,CAAC7Y,IAAI,CAAClB,GAAG,CAAC,CAAA;oBAC5B,CAAA;gBACF,CAAA;YACH,CAAC,CAAC,CAAA;QACH,CAAA;QAED,uEAAA;QACA,4EAAA;QACA,4EAAA;QACA,CAAC;eAAGuP,WAAW;SAAC,CAACnH,OAAO,EAAEiJ,UAAU,GAClCA,UAAU,CAAClS,KAAK,EAAE;gBAChBqZ,eAAe,EAAEwB,mBAAmB;gBACpCE,2BAA2B,EAAEJ,IAAI,CAACK,kBAAkB;gBACpDC,kBAAkB,EAAEN,IAAI,CAACO,SAAS,KAAK,IAAA;YACxC,CAAA,CAAC,CACH,CAAA;QAED,+EAAA;QACA,IAAItF,MAAM,CAACC,iBAAiB,EAAE;YAC5B+E,iBAAiB,CAAC3R,OAAO,EAAEpI,GAAG,GAAKb,KAAK,CAACgY,QAAQ,CAAClG,MAAM,CAACjR,GAAG,CAAC,CAAC,CAAA;YAC9Dga,mBAAmB,CAAC5R,OAAO,EAAEpI,GAAG,GAAK2Z,aAAa,CAAC3Z,GAAG,CAAC,CAAC,CAAA;QACzD,CAAA;IACH,CAAA;IAEA,mFAAA;IACA,uEAAA;IACA,iCAAA;IACA,qDAAA;IACA,yCAAA;IACA,SAASsa,kBAAkBA,CACzBra,QAAkB,EAClB4Z,QAA0E,EAAAU,KAAA,EAC/B;QAAA,IAAAC,eAAA,EAAAC,gBAAA,CAAA;QAAA,IAA3C,EAAEJ,SAAAA,EAAS,GAAAE,KAAA,KAAA,KAAA,CAAA,GAA8B,CAAA,CAAE,GAAAA,KAAA,CAAA;QAE3C,mDAAA;QACA,8CAAA;QACA,qDAAA;QACA,+DAAA;QACA,8DAAA;QACA,IAAIG,cAAc,GAChBvb,KAAK,CAAC+X,UAAU,IAAI,IAAI,IACxB/X,KAAK,CAAC2X,UAAU,CAAC1D,UAAU,IAAI,IAAI,IACnCuH,gBAAgB,CAACxb,KAAK,CAAC2X,UAAU,CAAC1D,UAAU,CAAC,IAC7CjU,KAAK,CAAC2X,UAAU,CAAC3X,KAAK,KAAK,SAAS,IACpC,CAAA,CAAAqb,eAAA,GAAAva,QAAQ,CAACd,KAAK,KAAA,IAAA,GAAA,KAAA,CAAA,GAAdqb,eAAA,CAAgBI,WAAW,MAAK,IAAI,CAAA;QAEtC,IAAI1D,UAA4B,CAAA;QAChC,IAAI2C,QAAQ,CAAC3C,UAAU,EAAE;YACvB,IAAIrM,MAAM,CAACgQ,IAAI,CAAChB,QAAQ,CAAC3C,UAAU,CAAC,CAAC5X,MAAM,GAAG,CAAC,EAAE;gBAC/C4X,UAAU,GAAG2C,QAAQ,CAAC3C,UAAU,CAAA;YACjC,CAAA,MAAM;gBACL,oEAAA;gBACAA,UAAU,GAAG,IAAI,CAAA;YAClB,CAAA;SACF,MAAM,IAAIwD,cAAc,EAAE;YACzB,+DAAA;YACAxD,UAAU,GAAG/X,KAAK,CAAC+X,UAAU,CAAA;QAC9B,CAAA,MAAM;YACL,sDAAA;YACAA,UAAU,GAAG,IAAI,CAAA;QAClB,CAAA;QAED,8DAAA;QACA,IAAI7P,UAAU,GAAGwS,QAAQ,CAACxS,UAAU,GAChCyT,eAAe,CACb3b,KAAK,CAACkI,UAAU,EAChBwS,QAAQ,CAACxS,UAAU,EACnBwS,QAAQ,CAAC/S,OAAO,IAAI,EAAE,EACtB+S,QAAQ,CAACrD,MAAM,CAChB,GACDrX,KAAK,CAACkI,UAAU,CAAA;QAEpB,uEAAA;QACA,wBAAA;QACA,IAAIgQ,QAAQ,GAAGlY,KAAK,CAACkY,QAAQ,CAAA;QAC7B,IAAIA,QAAQ,CAACzF,IAAI,GAAG,CAAC,EAAE;YACrByF,QAAQ,GAAG,IAAID,GAAG,CAACC,QAAQ,CAAC,CAAA;YAC5BA,QAAQ,CAACjP,OAAO,CAAC,CAAC+D,CAAC,EAAEsF,CAAC,GAAK4F,QAAQ,CAACtI,GAAG,CAAC0C,CAAC,EAAEiC,YAAY,CAAC,CAAC,CAAA;QAC1D,CAAA;QAED,mEAAA;QACA,8CAAA;QACA,IAAIsD,kBAAkB,GACpBQ,yBAAyB,KAAK,IAAI,IACjCrY,KAAK,CAAC2X,UAAU,CAAC1D,UAAU,IAAI,IAAI,IAClCuH,gBAAgB,CAACxb,KAAK,CAAC2X,UAAU,CAAC1D,UAAU,CAAC,IAC7C,CAAA,CAAAqH,gBAAA,GAAAxa,QAAQ,CAACd,KAAK,KAAdsb,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,gBAAA,CAAgBG,WAAW,MAAK,IAAK,CAAA;QAEzC,8EAAA;QACA,IAAInG,kBAAkB,EAAE;YACtBD,UAAU,GAAGC,kBAAkB,CAAA;YAC/BA,kBAAkB,GAAGrV,SAAS,CAAA;QAC/B,CAAA;QAED,IAAIyY,2BAA2B,EAAE,CAEhC;aAAM,IAAIP,aAAa,KAAKC,MAAa,CAAC/X,GAAG,EAAE,CAE/C;aAAM,IAAI8X,aAAa,KAAKC,MAAa,CAACpW,IAAI,EAAE;YAC/CsN,IAAI,CAAC/N,OAAO,CAACQ,IAAI,CAACjB,QAAQ,EAAEA,QAAQ,CAACd,KAAK,CAAC,CAAA;QAC5C,CAAA,MAAM,IAAImY,aAAa,KAAKC,MAAa,CAAC/V,OAAO,EAAE;YAClDiN,IAAI,CAAC/N,OAAO,CAACa,OAAO,CAACtB,QAAQ,EAAEA,QAAQ,CAACd,KAAK,CAAC,CAAA;QAC/C,CAAA;QAED,IAAIgb,kBAAkD,CAAA;QAEtD,6EAAA;QACA,IAAI7C,aAAa,KAAKC,MAAa,CAAC/X,GAAG,EAAE;YACvC,uEAAA;YACA,IAAIub,UAAU,GAAGpD,sBAAsB,CAAC5G,GAAG,CAAC5R,KAAK,CAACc,QAAQ,CAACE,QAAQ,CAAC,CAAA;YACpE,IAAI4a,UAAU,IAAIA,UAAU,CAACjM,GAAG,CAAC7O,QAAQ,CAACE,QAAQ,CAAC,EAAE;gBACnDga,kBAAkB,GAAG;oBACnBnB,eAAe,EAAE7Z,KAAK,CAACc,QAAQ;oBAC/BmB,YAAY,EAAEnB,QAAAA;iBACf,CAAA;aACF,MAAM,IAAI0X,sBAAsB,CAAC7I,GAAG,CAAC7O,QAAQ,CAACE,QAAQ,CAAC,EAAE;gBACxD,wEAAA;gBACA,kEAAA;gBACAga,kBAAkB,GAAG;oBACnBnB,eAAe,EAAE/Y,QAAQ;oBACzBmB,YAAY,EAAEjC,KAAK,CAACc,QAAAA;iBACrB,CAAA;YACF,CAAA;SACF,MAAM,IAAIyX,4BAA4B,EAAE;YACvC,+CAAA;YACA,IAAIsD,OAAO,GAAGrD,sBAAsB,CAAC5G,GAAG,CAAC5R,KAAK,CAACc,QAAQ,CAACE,QAAQ,CAAC,CAAA;YACjE,IAAI6a,OAAO,EAAE;gBACXA,OAAO,CAACxK,GAAG,CAACvQ,QAAQ,CAACE,QAAQ,CAAC,CAAA;YAC/B,CAAA,MAAM;gBACL6a,OAAO,GAAG,IAAI1V,GAAG,CAAS;oBAACrF,QAAQ,CAACE,QAAQ;iBAAC,CAAC,CAAA;gBAC9CwX,sBAAsB,CAAC5I,GAAG,CAAC5P,KAAK,CAACc,QAAQ,CAACE,QAAQ,EAAE6a,OAAO,CAAC,CAAA;YAC7D,CAAA;YACDb,kBAAkB,GAAG;gBACnBnB,eAAe,EAAE7Z,KAAK,CAACc,QAAQ;gBAC/BmB,YAAY,EAAEnB,QAAAA;aACf,CAAA;QACF,CAAA;QAEDkZ,WAAW,CAAAlV,QAAA,CAAA,CAAA,CAAA,EAEJ4V,QAAQ,EAAA;YACX3C,UAAU;YACV7P,UAAU;YACVwP,aAAa,EAAES,aAAa;YAC5BrX,QAAQ;YACRmW,WAAW,EAAE,IAAI;YACjBU,UAAU,EAAE3D,eAAe;YAC3B8D,YAAY,EAAE,MAAM;YACpBF,qBAAqB,EAAEkE,sBAAsB,CAC3Chb,QAAQ,EACR4Z,QAAQ,CAAC/S,OAAO,IAAI3H,KAAK,CAAC2H,OAAO,CAClC;YACDkQ,kBAAkB;YAClBK,QAAAA;SAEF,CAAA,EAAA;YACE8C,kBAAkB;YAClBE,SAAS,EAAEA,SAAS,KAAK,IAAA;QAC1B,CAAA,CACF,CAAA;QAED,iCAAA;QACA/C,aAAa,GAAGC,MAAa,CAAC/X,GAAG,CAAA;QACjCgY,yBAAyB,GAAG,KAAK,CAAA;QACjCE,4BAA4B,GAAG,KAAK,CAAA;QACpCG,2BAA2B,GAAG,KAAK,CAAA;QACnCC,sBAAsB,GAAG,KAAK,CAAA;QAC9BC,uBAAuB,GAAG,EAAE,CAAA;IAC9B,CAAA;IAEA,4EAAA;IACA,sCAAA;IACA,eAAemD,QAAQA,CACrBnb,EAAsB,EACtB+Z,IAA4B,EAAA;QAE5B,IAAI,OAAO/Z,EAAE,KAAK,QAAQ,EAAE;YAC1B0O,IAAI,CAAC/N,OAAO,CAACe,EAAE,CAAC1B,EAAE,CAAC,CAAA;YACnB,OAAA;QACD,CAAA;QAED,IAAIob,cAAc,GAAGC,WAAW,CAC9Bjc,KAAK,CAACc,QAAQ,EACdd,KAAK,CAAC2H,OAAO,EACbP,QAAQ,EACRwO,MAAM,CAACI,kBAAkB,EACzBpV,EAAE,EACFgV,MAAM,CAACvH,oBAAoB,EAC3BsM,IAAI,IAAJA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAI,CAAEuB,WAAW,EACjBvB,IAAI,IAAA,IAAA,GAAA,KAAA,CAAA,GAAJA,IAAI,CAAEwB,QAAQ,CACf,CAAA;QACD,IAAI,EAAExa,IAAI,EAAEya,UAAU,EAAE1W,KAAAA,EAAO,GAAG2W,wBAAwB,CACxDzG,MAAM,CAACE,sBAAsB,EAC7B,KAAK,EACLkG,cAAc,EACdrB,IAAI,CACL,CAAA;QAED,IAAId,eAAe,GAAG7Z,KAAK,CAACc,QAAQ,CAAA;QACpC,IAAImB,YAAY,GAAGlB,cAAc,CAACf,KAAK,CAACc,QAAQ,EAAEa,IAAI,EAAEgZ,IAAI,IAAIA,IAAI,CAAC3a,KAAK,CAAC,CAAA;QAE3E,6EAAA;QACA,yEAAA;QACA,0EAAA;QACA,2EAAA;QACA,kCAAA;QACAiC,YAAY,GAAA6C,QAAA,CACP7C,CAAAA,CAAAA,EAAAA,YAAY,EACZqN,IAAI,CAAC/N,OAAO,CAACG,cAAc,CAACO,YAAY,CAAC,CAC7C,CAAA;QAED,IAAIqa,WAAW,GAAG3B,IAAI,IAAIA,IAAI,CAACvY,OAAO,IAAI,IAAI,GAAGuY,IAAI,CAACvY,OAAO,GAAGnC,SAAS,CAAA;QAEzE,IAAIyX,aAAa,GAAGU,MAAa,CAACpW,IAAI,CAAA;QAEtC,IAAIsa,WAAW,KAAK,IAAI,EAAE;YACxB5E,aAAa,GAAGU,MAAa,CAAC/V,OAAO,CAAA;QACtC,CAAA,MAAM,IAAIia,WAAW,KAAK,KAAK,EAAE,CAEjC;aAAM,IACLF,UAAU,IAAI,IAAI,IAClBZ,gBAAgB,CAACY,UAAU,CAACnI,UAAU,CAAC,IACvCmI,UAAU,CAAClI,UAAU,KAAKlU,KAAK,CAACc,QAAQ,CAACE,QAAQ,GAAGhB,KAAK,CAACc,QAAQ,CAACe,MAAM,EACzE;YACA,uEAAA;YACA,uEAAA;YACA,oEAAA;YACA,qEAAA;YACA6V,aAAa,GAAGU,MAAa,CAAC/V,OAAO,CAAA;QACtC,CAAA;QAED,IAAIwV,kBAAkB,GACpB8C,IAAI,IAAI,oBAAoB,IAAIA,IAAI,GAChCA,IAAI,CAAC9C,kBAAkB,KAAK,IAAI,GAChC5X,SAAS,CAAA;QAEf,IAAIib,SAAS,GAAG,CAACP,IAAI,IAAIA,IAAI,CAACM,kBAAkB,MAAM,IAAI,CAAA;QAE1D,IAAItB,UAAU,GAAGC,qBAAqB,CAAC;YACrCC,eAAe;YACf5X,YAAY;YACZyV,aAAAA;QACD,CAAA,CAAC,CAAA;QAEF,IAAIiC,UAAU,EAAE;YACd,uCAAA;YACAI,aAAa,CAACJ,UAAU,EAAE;gBACxB3Z,KAAK,EAAE,SAAS;gBAChBc,QAAQ,EAAEmB,YAAY;gBACtBuS,OAAOA,GAAA;oBACLuF,aAAa,CAACJ,UAAW,EAAE;wBACzB3Z,KAAK,EAAE,YAAY;wBACnBwU,OAAO,EAAEvU,SAAS;wBAClBwU,KAAK,EAAExU,SAAS;wBAChBa,QAAQ,EAAEmB,YAAAA;oBACX,CAAA,CAAC,CAAA;oBACF,mCAAA;oBACA8Z,QAAQ,CAACnb,EAAE,EAAE+Z,IAAI,CAAC,CAAA;iBACnB;gBACDlG,KAAKA,GAAA;oBACH,IAAIyD,QAAQ,GAAG,IAAID,GAAG,CAACjY,KAAK,CAACkY,QAAQ,CAAC,CAAA;oBACtCA,QAAQ,CAACtI,GAAG,CAAC+J,UAAW,EAAEpF,YAAY,CAAC,CAAA;oBACvCyF,WAAW,CAAC;wBAAE9B,QAAAA;oBAAQ,CAAE,CAAC,CAAA;gBAC3B,CAAA;YACD,CAAA,CAAC,CAAA;YACF,OAAA;QACD,CAAA;QAED,OAAO,MAAM+B,eAAe,CAACvC,aAAa,EAAEzV,YAAY,EAAE;YACxDma,UAAU;YACV,yEAAA;YACA,2DAAA;YACAG,YAAY,EAAE7W,KAAK;YACnBmS,kBAAkB;YAClBzV,OAAO,EAAEuY,IAAI,IAAIA,IAAI,CAACvY,OAAO;YAC7Boa,oBAAoB,EAAE7B,IAAI,IAAIA,IAAI,CAAC8B,uBAAuB;YAC1DvB,SAAAA;QACD,CAAA,CAAC,CAAA;IACJ,CAAA;IAEA,6EAAA;IACA,yEAAA;IACA,uCAAA;IACA,SAASwB,UAAUA,GAAA;QACjBC,oBAAoB,EAAE,CAAA;QACtB3C,WAAW,CAAC;YAAElC,YAAY,EAAE,SAAA;QAAS,CAAE,CAAC,CAAA;QAExC,wEAAA;QACA,6EAAA;QACA,IAAI9X,KAAK,CAAC2X,UAAU,CAAC3X,KAAK,KAAK,YAAY,EAAE;YAC3C,OAAA;QACD,CAAA;QAED,8EAAA;QACA,4EAAA;QACA,+BAAA;QACA,IAAIA,KAAK,CAAC2X,UAAU,CAAC3X,KAAK,KAAK,MAAM,EAAE;YACrCia,eAAe,CAACja,KAAK,CAAC0X,aAAa,EAAE1X,KAAK,CAACc,QAAQ,EAAE;gBACnD8b,8BAA8B,EAAE,IAAA;YACjC,CAAA,CAAC,CAAA;YACF,OAAA;QACD,CAAA;QAED,qEAAA;QACA,4EAAA;QACA,+EAAA;QACA3C,eAAe,CACb9B,aAAa,IAAInY,KAAK,CAAC0X,aAAa,EACpC1X,KAAK,CAAC2X,UAAU,CAAC7W,QAAQ,EACzB;YACE+b,kBAAkB,EAAE7c,KAAK,CAAC2X,UAAU;YACpC,4CAAA;YACA6E,oBAAoB,EAAEjE,4BAA4B,KAAK,IAAA;QACxD,CAAA,CACF,CAAA;IACH,CAAA;IAEA,6EAAA;IACA,kFAAA;IACA,aAAA;IACA,eAAe0B,eAAeA,CAC5BvC,aAA4B,EAC5B5W,QAAkB,EAClB6Z,IAWC,EAAA;QAED,2EAAA;QACA,wEAAA;QACA,4CAAA;QACArC,2BAA2B,IAAIA,2BAA2B,CAACjG,KAAK,EAAE,CAAA;QAClEiG,2BAA2B,GAAG,IAAI,CAAA;QAClCH,aAAa,GAAGT,aAAa,CAAA;QAC7BgB,2BAA2B,GACzB,CAACiC,IAAI,IAAIA,IAAI,CAACiC,8BAA8B,MAAM,IAAI,CAAA;QAExD,yEAAA;QACA,yDAAA;QACAE,kBAAkB,CAAC9c,KAAK,CAACc,QAAQ,EAAEd,KAAK,CAAC2H,OAAO,CAAC,CAAA;QACjD0Q,yBAAyB,GAAG,CAACsC,IAAI,IAAIA,IAAI,CAAC9C,kBAAkB,MAAM,IAAI,CAAA;QAEtEU,4BAA4B,GAAG,CAACoC,IAAI,IAAIA,IAAI,CAAC6B,oBAAoB,MAAM,IAAI,CAAA;QAE3E,IAAIO,WAAW,GAAGzH,kBAAkB,IAAID,UAAU,CAAA;QAClD,IAAI2H,iBAAiB,GAAGrC,IAAI,IAAIA,IAAI,CAACkC,kBAAkB,CAAA;QACvD,IAAIlV,OAAO,GAAGT,WAAW,CAAC6V,WAAW,EAAEjc,QAAQ,EAAEsG,QAAQ,CAAC,CAAA;QAC1D,IAAI8T,SAAS,GAAG,CAACP,IAAI,IAAIA,IAAI,CAACO,SAAS,MAAM,IAAI,CAAA;QAEjD,IAAIpE,QAAQ,GAAGC,aAAa,CAACpP,OAAO,EAAEoV,WAAW,EAAEjc,QAAQ,CAACE,QAAQ,CAAC,CAAA;QACrE,IAAI8V,QAAQ,CAACE,MAAM,IAAIF,QAAQ,CAACnP,OAAO,EAAE;YACvCA,OAAO,GAAGmP,QAAQ,CAACnP,OAAO,CAAA;QAC3B,CAAA;QAED,0EAAA;QACA,IAAI,CAACA,OAAO,EAAE;YACZ,IAAI,EAAEjC,KAAK,EAAEuX,eAAe,EAAE5W,KAAAA,EAAO,GAAG6W,qBAAqB,CAC3Dpc,QAAQ,CAACE,QAAQ,CAClB,CAAA;YACDma,kBAAkB,CAChBra,QAAQ,EACR;gBACE6G,OAAO,EAAEsV,eAAe;gBACxB/U,UAAU,EAAE,CAAA,CAAE;gBACdmP,MAAM,EAAE;oBACN,CAAChR,KAAK,CAACQ,EAAE,CAAA,EAAGnB,KAAAA;gBACb,CAAA;YACF,CAAA,EACD;gBAAEwV,SAAAA;YAAW,CAAA,CACd,CAAA;YACD,OAAA;QACD,CAAA;QAED,qEAAA;QACA,uBAAA;QACA,EAAA;QACA,0EAAA;QACA,gFAAA;QACA,8CAAA;QACA,IACElb,KAAK,CAACiX,WAAW,IACjB,CAAC0B,sBAAsB,IACvBwE,gBAAgB,CAACnd,KAAK,CAACc,QAAQ,EAAEA,QAAQ,CAAC,IAC1C,CAAA,CAAE6Z,IAAI,IAAIA,IAAI,CAACyB,UAAU,IAAIZ,gBAAgB,CAACb,IAAI,CAACyB,UAAU,CAACnI,UAAU,CAAC,CAAC,EAC1E;YACAkH,kBAAkB,CAACra,QAAQ,EAAE;gBAAE6G,OAAAA;YAAS,CAAA,EAAE;gBAAEuT,SAAAA;YAAW,CAAA,CAAC,CAAA;YACxD,OAAA;QACD,CAAA;QAED,kDAAA;QACA5C,2BAA2B,GAAG,IAAIzH,eAAe,EAAE,CAAA;QACnD,IAAIuM,OAAO,GAAGC,uBAAuB,CACnC/N,IAAI,CAAC/N,OAAO,EACZT,QAAQ,EACRwX,2BAA2B,CAACtH,MAAM,EAClC2J,IAAI,IAAIA,IAAI,CAACyB,UAAU,CACxB,CAAA;QACD,IAAIkB,mBAAoD,CAAA;QAExD,IAAI3C,IAAI,IAAIA,IAAI,CAAC4B,YAAY,EAAE;YAC7B,0EAAA;YACA,uEAAA;YACA,yEAAA;YACA,+CAAA;YACAe,mBAAmB,GAAG;gBACpBC,mBAAmB,CAAC5V,OAAO,CAAC,CAACtB,KAAK,CAACQ,EAAE;gBACrC;oBAAEmJ,IAAI,EAAE/J,UAAU,CAACP,KAAK;oBAAEA,KAAK,EAAEiV,IAAI,CAAC4B,YAAAA;gBAAc,CAAA;aACrD,CAAA;QACF,CAAA,MAAM,IACL5B,IAAI,IACJA,IAAI,CAACyB,UAAU,IACfZ,gBAAgB,CAACb,IAAI,CAACyB,UAAU,CAACnI,UAAU,CAAC,EAC5C;YACA,kDAAA;YACA,IAAIuJ,YAAY,GAAG,MAAMC,YAAY,CACnCL,OAAO,EACPtc,QAAQ,EACR6Z,IAAI,CAACyB,UAAU,EACfzU,OAAO,EACPmP,QAAQ,CAACE,MAAM,EACf;gBAAE5U,OAAO,EAAEuY,IAAI,CAACvY,OAAO;gBAAE8Y,SAAAA;YAAS,CAAE,CACrC,CAAA;YAED,IAAIsC,YAAY,CAACE,cAAc,EAAE;gBAC/B,OAAA;YACD,CAAA;YAED,0EAAA;YACA,kEAAA;YACA,IAAIF,YAAY,CAACF,mBAAmB,EAAE;gBACpC,IAAI,CAACK,OAAO,EAAE7T,MAAM,CAAC,GAAG0T,YAAY,CAACF,mBAAmB,CAAA;gBACxD,IACEM,aAAa,CAAC9T,MAAM,CAAC,IACrB2J,oBAAoB,CAAC3J,MAAM,CAACpE,KAAK,CAAC,IAClCoE,MAAM,CAACpE,KAAK,CAAC8J,MAAM,KAAK,GAAG,EAC3B;oBACA8I,2BAA2B,GAAG,IAAI,CAAA;oBAElC6C,kBAAkB,CAACra,QAAQ,EAAE;wBAC3B6G,OAAO,EAAE6V,YAAY,CAAC7V,OAAO;wBAC7BO,UAAU,EAAE,CAAA,CAAE;wBACdmP,MAAM,EAAE;4BACN,CAACsG,OAAO,CAAA,EAAG7T,MAAM,CAACpE,KAAAA;wBACnB,CAAA;oBACF,CAAA,CAAC,CAAA;oBACF,OAAA;gBACD,CAAA;YACF,CAAA;YAEDiC,OAAO,GAAG6V,YAAY,CAAC7V,OAAO,IAAIA,OAAO,CAAA;YACzC2V,mBAAmB,GAAGE,YAAY,CAACF,mBAAmB,CAAA;YACtDN,iBAAiB,GAAGa,oBAAoB,CAAC/c,QAAQ,EAAE6Z,IAAI,CAACyB,UAAU,CAAC,CAAA;YACnElB,SAAS,GAAG,KAAK,CAAA;YACjB,8DAAA;YACApE,QAAQ,CAACE,MAAM,GAAG,KAAK,CAAA;YAEvB,uCAAA;YACAoG,OAAO,GAAGC,uBAAuB,CAC/B/N,IAAI,CAAC/N,OAAO,EACZ6b,OAAO,CAACzZ,GAAG,EACXyZ,OAAO,CAACpM,MAAM,CACf,CAAA;QACF,CAAA;QAED,eAAA;QACA,IAAI,EACF0M,cAAc,EACd/V,OAAO,EAAEmW,cAAc,EACvB5V,UAAU,EACVmP,MAAAA,EACD,GAAG,MAAM0G,aAAa,CACrBX,OAAO,EACPtc,QAAQ,EACR6G,OAAO,EACPmP,QAAQ,CAACE,MAAM,EACfgG,iBAAiB,EACjBrC,IAAI,IAAIA,IAAI,CAACyB,UAAU,EACvBzB,IAAI,IAAIA,IAAI,CAACqD,iBAAiB,EAC9BrD,IAAI,IAAIA,IAAI,CAACvY,OAAO,EACpBuY,IAAI,IAAIA,IAAI,CAACN,gBAAgB,KAAK,IAAI,EACtCa,SAAS,EACToC,mBAAmB,CACpB,CAAA;QAED,IAAII,cAAc,EAAE;YAClB,OAAA;QACD,CAAA;QAED,0EAAA;QACA,2EAAA;QACA,4DAAA;QACApF,2BAA2B,GAAG,IAAI,CAAA;QAElC6C,kBAAkB,CAACra,QAAQ,EAAAgE,QAAA,CAAA;YACzB6C,OAAO,EAAEmW,cAAc,IAAInW,OAAAA;SACxBsW,EAAAA,sBAAsB,CAACX,mBAAmB,CAAC,EAAA;YAC9CpV,UAAU;YACVmP,MAAAA;QAAM,CAAA,CACP,CAAC,CAAA;IACJ,CAAA;IAEA,2EAAA;IACA,mBAAA;IACA,eAAeoG,YAAYA,CACzBL,OAAgB,EAChBtc,QAAkB,EAClBsb,UAAsB,EACtBzU,OAAiC,EACjCuW,UAAmB,EACnBvD,IAAAA,EAAqD;QAAA,IAArDA,SAAAA,KAAAA,GAAAA;YAAAA,OAAmD,CAAA,CAAE,CAAA;QAAA,CAAA;QAErDgC,oBAAoB,EAAE,CAAA;QAEtB,+BAAA;QACA,IAAIhF,UAAU,GAAGwG,uBAAuB,CAACrd,QAAQ,EAAEsb,UAAU,CAAC,CAAA;QAC9DpC,WAAW,CAAC;YAAErC,UAAAA;QAAU,CAAE,EAAE;YAAEuD,SAAS,EAAEP,IAAI,CAACO,SAAS,KAAK,IAAA;QAAI,CAAE,CAAC,CAAA;QAEnE,IAAIgD,UAAU,EAAE;YACd,IAAIE,cAAc,GAAG,MAAMC,cAAc,CACvC1W,OAAO,EACP7G,QAAQ,CAACE,QAAQ,EACjBoc,OAAO,CAACpM,MAAM,CACf,CAAA;YACD,IAAIoN,cAAc,CAACpO,IAAI,KAAK,SAAS,EAAE;gBACrC,OAAO;oBAAE0N,cAAc,EAAE,IAAA;iBAAM,CAAA;YAChC,CAAA,MAAM,IAAIU,cAAc,CAACpO,IAAI,KAAK,OAAO,EAAE;gBAC1C,IAAI,EAAEsO,UAAU,EAAE5Y,KAAAA,EAAO,GAAG6Y,wBAAwB,CAClDzd,QAAQ,CAACE,QAAQ,EACjBod,cAAc,CACf,CAAA;gBACD,OAAO;oBACLzW,OAAO,EAAEyW,cAAc,CAACI,cAAc;oBACtClB,mBAAmB,EAAE;wBACnBgB,UAAU;wBACV;4BACEtO,IAAI,EAAE/J,UAAU,CAACP,KAAK;4BACtBA,KAAAA;yBACD;qBAAA;iBAEJ,CAAA;YACF,CAAA,MAAM,IAAI,CAAC0Y,cAAc,CAACzW,OAAO,EAAE;gBAClC,IAAI,EAAEsV,eAAe,EAAEvX,KAAK,EAAEW,KAAAA,EAAO,GAAG6W,qBAAqB,CAC3Dpc,QAAQ,CAACE,QAAQ,CAClB,CAAA;gBACD,OAAO;oBACL2G,OAAO,EAAEsV,eAAe;oBACxBK,mBAAmB,EAAE;wBACnBjX,KAAK,CAACQ,EAAE;wBACR;4BACEmJ,IAAI,EAAE/J,UAAU,CAACP,KAAK;4BACtBA,KAAAA;yBACD;qBAAA;iBAEJ,CAAA;YACF,CAAA,MAAM;gBACLiC,OAAO,GAAGyW,cAAc,CAACzW,OAAO,CAAA;YACjC,CAAA;QACF,CAAA;QAED,qCAAA;QACA,IAAImC,MAAkB,CAAA;QACtB,IAAI2U,WAAW,GAAGC,cAAc,CAAC/W,OAAO,EAAE7G,QAAQ,CAAC,CAAA;QAEnD,IAAI,CAAC2d,WAAW,CAACpY,KAAK,CAACjG,MAAM,IAAI,CAACqe,WAAW,CAACpY,KAAK,CAAC8Q,IAAI,EAAE;YACxDrN,MAAM,GAAG;gBACPkG,IAAI,EAAE/J,UAAU,CAACP,KAAK;gBACtBA,KAAK,EAAEkR,sBAAsB,CAAC,GAAG,EAAE;oBACjC+H,MAAM,EAAEvB,OAAO,CAACuB,MAAM;oBACtB3d,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;oBAC3B2c,OAAO,EAAEc,WAAW,CAACpY,KAAK,CAACQ,EAAAA;iBAC5B,CAAA;aACF,CAAA;QACF,CAAA,MAAM;YACL,IAAI+X,OAAO,GAAG,MAAMC,gBAAgB,CAClC,QAAQ,EACR7e,KAAK,EACLod,OAAO,EACP;gBAACqB,WAAW;aAAC,EACb9W,OAAO,EACP,IAAI,CACL,CAAA;YACDmC,MAAM,GAAG8U,OAAO,CAACH,WAAW,CAACpY,KAAK,CAACQ,EAAE,CAAC,CAAA;YAEtC,IAAIuW,OAAO,CAACpM,MAAM,CAACa,OAAO,EAAE;gBAC1B,OAAO;oBAAE6L,cAAc,EAAE,IAAA;iBAAM,CAAA;YAChC,CAAA;QACF,CAAA;QAED,IAAIoB,gBAAgB,CAAChV,MAAM,CAAC,EAAE;YAC5B,IAAI1H,OAAgB,CAAA;YACpB,IAAIuY,IAAI,IAAIA,IAAI,CAACvY,OAAO,IAAI,IAAI,EAAE;gBAChCA,OAAO,GAAGuY,IAAI,CAACvY,OAAO,CAAA;YACvB,CAAA,MAAM;gBACL,qEAAA;gBACA,uEAAA;gBACA,sBAAA;gBACA,IAAItB,QAAQ,GAAGie,yBAAyB,CACtCjV,MAAM,CAACuJ,QAAQ,CAAC5D,OAAO,CAACmC,GAAG,CAAC,UAAU,CAAE,EACxC,IAAInQ,GAAG,CAAC2b,OAAO,CAACzZ,GAAG,CAAC,EACpByD,QAAQ,CACT,CAAA;gBACDhF,OAAO,GAAGtB,QAAQ,KAAKd,KAAK,CAACc,QAAQ,CAACE,QAAQ,GAAGhB,KAAK,CAACc,QAAQ,CAACe,MAAM,CAAA;YACvE,CAAA;YACD,MAAMmd,uBAAuB,CAAC5B,OAAO,EAAEtT,MAAM,EAAE,IAAI,EAAE;gBACnDsS,UAAU;gBACVha,OAAAA;YACD,CAAA,CAAC,CAAA;YACF,OAAO;gBAAEsb,cAAc,EAAE,IAAA;aAAM,CAAA;QAChC,CAAA;QAED,IAAIuB,gBAAgB,CAACnV,MAAM,CAAC,EAAE;YAC5B,MAAM8M,sBAAsB,CAAC,GAAG,EAAE;gBAAE5G,IAAI,EAAE,cAAA;YAAgB,CAAA,CAAC,CAAA;QAC5D,CAAA;QAED,IAAI4N,aAAa,CAAC9T,MAAM,CAAC,EAAE;YACzB,qEAAA;YACA,6DAAA;YACA,IAAIoV,aAAa,GAAG3B,mBAAmB,CAAC5V,OAAO,EAAE8W,WAAW,CAACpY,KAAK,CAACQ,EAAE,CAAC,CAAA;YAEtE,kEAAA;YACA,uEAAA;YACA,qEAAA;YACA,qEAAA;YACA,QAAA;YACA,IAAI,CAAC8T,IAAI,IAAIA,IAAI,CAACvY,OAAO,MAAM,IAAI,EAAE;gBACnC+V,aAAa,GAAGC,MAAa,CAACpW,IAAI,CAAA;YACnC,CAAA;YAED,OAAO;gBACL2F,OAAO;gBACP2V,mBAAmB,EAAE;oBAAC4B,aAAa,CAAC7Y,KAAK,CAACQ,EAAE;oBAAEiD,MAAM;iBAAA;aACrD,CAAA;QACF,CAAA;QAED,OAAO;YACLnC,OAAO;YACP2V,mBAAmB,EAAE;gBAACmB,WAAW,CAACpY,KAAK,CAACQ,EAAE;gBAAEiD,MAAM;aAAA;SACnD,CAAA;IACH,CAAA;IAEA,yEAAA;IACA,eAAA;IACA,eAAeiU,aAAaA,CAC1BX,OAAgB,EAChBtc,QAAkB,EAClB6G,OAAiC,EACjCuW,UAAmB,EACnBrB,kBAA+B,EAC/BT,UAAuB,EACvB4B,iBAA8B,EAC9B5b,OAAiB,EACjBiY,gBAA0B,EAC1Ba,SAAmB,EACnBoC,mBAAyC,EAAA;QAEzC,kEAAA;QACA,IAAIN,iBAAiB,GACnBH,kBAAkB,IAAIgB,oBAAoB,CAAC/c,QAAQ,EAAEsb,UAAU,CAAC,CAAA;QAElE,yEAAA;QACA,gEAAA;QACA,IAAI+C,gBAAgB,GAClB/C,UAAU,IACV4B,iBAAiB,IACjBoB,2BAA2B,CAACpC,iBAAiB,CAAC,CAAA;QAEhD,0EAAA;QACA,wEAAA;QACA,yEAAA;QACA,+CAAA;QACA,2EAAA;QACA,kDAAA;QACA,IAAIqC,2BAA2B,GAC7B,CAAC3G,2BAA2B,IAAA,CAC3B,CAAC9C,MAAM,CAACG,mBAAmB,IAAI,CAACsE,gBAAgB,CAAC,CAAA;QAEpD,yEAAA;QACA,uEAAA;QACA,2EAAA;QACA,qEAAA;QACA,iCAAA;QACA,IAAI6D,UAAU,EAAE;YACd,IAAImB,2BAA2B,EAAE;gBAC/B,IAAItH,UAAU,GAAGuH,oBAAoB,CAAChC,mBAAmB,CAAC,CAAA;gBAC1DtD,WAAW,CAAAlV,QAAA,CAAA;oBAEP6S,UAAU,EAAEqF,iBAAAA;iBACRjF,EAAAA,UAAU,KAAK9X,SAAS,GAAG;oBAAE8X,UAAAA;iBAAY,GAAG,CAAA,CAAE,CAEpD,EAAA;oBACEmD,SAAAA;gBACD,CAAA,CACF,CAAA;YACF,CAAA;YAED,IAAIkD,cAAc,GAAG,MAAMC,cAAc,CACvC1W,OAAO,EACP7G,QAAQ,CAACE,QAAQ,EACjBoc,OAAO,CAACpM,MAAM,CACf,CAAA;YAED,IAAIoN,cAAc,CAACpO,IAAI,KAAK,SAAS,EAAE;gBACrC,OAAO;oBAAE0N,cAAc,EAAE,IAAA;iBAAM,CAAA;YAChC,CAAA,MAAM,IAAIU,cAAc,CAACpO,IAAI,KAAK,OAAO,EAAE;gBAC1C,IAAI,EAAEsO,UAAU,EAAE5Y,KAAAA,EAAO,GAAG6Y,wBAAwB,CAClDzd,QAAQ,CAACE,QAAQ,EACjBod,cAAc,CACf,CAAA;gBACD,OAAO;oBACLzW,OAAO,EAAEyW,cAAc,CAACI,cAAc;oBACtCtW,UAAU,EAAE,CAAA,CAAE;oBACdmP,MAAM,EAAE;wBACN,CAACiH,UAAU,CAAA,EAAG5Y,KAAAA;oBACf,CAAA;iBACF,CAAA;YACF,CAAA,MAAM,IAAI,CAAC0Y,cAAc,CAACzW,OAAO,EAAE;gBAClC,IAAI,EAAEjC,KAAK,EAAEuX,eAAe,EAAE5W,KAAAA,EAAO,GAAG6W,qBAAqB,CAC3Dpc,QAAQ,CAACE,QAAQ,CAClB,CAAA;gBACD,OAAO;oBACL2G,OAAO,EAAEsV,eAAe;oBACxB/U,UAAU,EAAE,CAAA,CAAE;oBACdmP,MAAM,EAAE;wBACN,CAAChR,KAAK,CAACQ,EAAE,CAAA,EAAGnB,KAAAA;oBACb,CAAA;iBACF,CAAA;YACF,CAAA,MAAM;gBACLiC,OAAO,GAAGyW,cAAc,CAACzW,OAAO,CAAA;YACjC,CAAA;QACF,CAAA;QAED,IAAIoV,WAAW,GAAGzH,kBAAkB,IAAID,UAAU,CAAA;QAClD,IAAI,CAACkK,aAAa,EAAEC,oBAAoB,CAAC,GAAGC,gBAAgB,CAC1DnQ,IAAI,CAAC/N,OAAO,EACZvB,KAAK,EACL2H,OAAO,EACPwX,gBAAgB,EAChBre,QAAQ,EACR8U,MAAM,CAACG,mBAAmB,IAAIsE,gBAAgB,KAAK,IAAI,EACvDzE,MAAM,CAACK,8BAA8B,EACrC0C,sBAAsB,EACtBC,uBAAuB,EACvBC,qBAAqB,EACrBQ,eAAe,EACfF,gBAAgB,EAChBD,gBAAgB,EAChB6D,WAAW,EACX3V,QAAQ,EACRkW,mBAAmB,CACpB,CAAA;QAED,wEAAA;QACA,wEAAA;QACA,mEAAA;QACAoC,qBAAqB,EAClB/B,OAAO,GACN,CAAA,CAAEhW,OAAO,IAAIA,OAAO,CAACkD,IAAI,EAAEqM,CAAC,GAAKA,CAAC,CAAC7Q,KAAK,CAACQ,EAAE,KAAK8W,OAAO,CAAC,CAAC,IACxD4B,aAAa,IAAIA,aAAa,CAAC1U,IAAI,EAAEqM,CAAC,GAAKA,CAAC,CAAC7Q,KAAK,CAACQ,EAAE,KAAK8W,OAAO,CAAE,CACvE,CAAA;QAED3E,uBAAuB,GAAG,EAAED,kBAAkB,CAAA;QAE9C,6CAAA;QACA,IAAIwG,aAAa,CAACpf,MAAM,KAAK,CAAC,IAAIqf,oBAAoB,CAACrf,MAAM,KAAK,CAAC,EAAE;YACnE,IAAIwf,eAAe,GAAGC,sBAAsB,EAAE,CAAA;YAC9CzE,kBAAkB,CAChBra,QAAQ,EAAAgE,QAAA,CAAA;gBAEN6C,OAAO;gBACPO,UAAU,EAAE,CAAA,CAAE;gBACd,iDAAA;gBACAmP,MAAM,EACJiG,mBAAmB,IAAIM,aAAa,CAACN,mBAAmB,CAAC,CAAC,CAAC,CAAC,GACxD;oBAAE,CAACA,mBAAmB,CAAC,CAAC,CAAC,CAAA,EAAGA,mBAAmB,CAAC,CAAC,CAAC,CAAC5X,KAAAA;gBAAO,CAAA,GAC1D,IAAA;YAAI,CAAA,EACPuY,sBAAsB,CAACX,mBAAmB,CAAC,EAC1CqC,eAAe,GAAG;gBAAE3H,QAAQ,EAAE,IAAIC,GAAG,CAACjY,KAAK,CAACgY,QAAQ,CAAA;aAAG,GAAG,CAAA,CAAE,CAElE,EAAA;gBAAEkD,SAAAA;YAAW,CAAA,CACd,CAAA;YACD,OAAO;gBAAEwC,cAAc,EAAE,IAAA;aAAM,CAAA;QAChC,CAAA;QAED,IAAI2B,2BAA2B,EAAE;YAC/B,IAAIQ,OAAO,GAAyB,CAAA,CAAE,CAAA;YACtC,IAAI,CAAC3B,UAAU,EAAE;gBACf,sEAAA;gBACA2B,OAAO,CAAClI,UAAU,GAAGqF,iBAAiB,CAAA;gBACtC,IAAIjF,UAAU,GAAGuH,oBAAoB,CAAChC,mBAAmB,CAAC,CAAA;gBAC1D,IAAIvF,UAAU,KAAK9X,SAAS,EAAE;oBAC5B4f,OAAO,CAAC9H,UAAU,GAAGA,UAAU,CAAA;gBAChC,CAAA;YACF,CAAA;YACD,IAAIyH,oBAAoB,CAACrf,MAAM,GAAG,CAAC,EAAE;gBACnC0f,OAAO,CAAC7H,QAAQ,GAAG8H,8BAA8B,CAACN,oBAAoB,CAAC,CAAA;YACxE,CAAA;YACDxF,WAAW,CAAC6F,OAAO,EAAE;gBAAE3E,SAAAA;YAAS,CAAE,CAAC,CAAA;QACpC,CAAA;QAEDsE,oBAAoB,CAACvW,OAAO,EAAE8W,EAAE,IAAI;YAClC,IAAIjH,gBAAgB,CAACnJ,GAAG,CAACoQ,EAAE,CAAClf,GAAG,CAAC,EAAE;gBAChCmf,YAAY,CAACD,EAAE,CAAClf,GAAG,CAAC,CAAA;YACrB,CAAA;YACD,IAAIkf,EAAE,CAACnP,UAAU,EAAE;gBACjB,yEAAA;gBACA,oEAAA;gBACA,6BAAA;gBACAkI,gBAAgB,CAAClJ,GAAG,CAACmQ,EAAE,CAAClf,GAAG,EAAEkf,EAAE,CAACnP,UAAU,CAAC,CAAA;YAC5C,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,0DAAA;QACA,IAAIqP,8BAA8B,GAAGA,IACnCT,oBAAoB,CAACvW,OAAO,EAAEiX,CAAC,GAAKF,YAAY,CAACE,CAAC,CAACrf,GAAG,CAAC,CAAC,CAAA;QAC1D,IAAIyX,2BAA2B,EAAE;YAC/BA,2BAA2B,CAACtH,MAAM,CAACjL,gBAAgB,CACjD,OAAO,EACPka,8BAA8B,CAC/B,CAAA;QACF,CAAA;QAED,IAAI,EAAEE,aAAa,EAAEC,cAAAA,EAAgB,GACnC,MAAMC,8BAA8B,CAClCrgB,KAAK,EACL2H,OAAO,EACP4X,aAAa,EACbC,oBAAoB,EACpBpC,OAAO,CACR,CAAA;QAEH,IAAIA,OAAO,CAACpM,MAAM,CAACa,OAAO,EAAE;YAC1B,OAAO;gBAAE6L,cAAc,EAAE,IAAA;aAAM,CAAA;QAChC,CAAA;QAED,uEAAA;QACA,iEAAA;QACA,wDAAA;QACA,IAAIpF,2BAA2B,EAAE;YAC/BA,2BAA2B,CAACtH,MAAM,CAAChL,mBAAmB,CACpD,OAAO,EACPia,8BAA8B,CAC/B,CAAA;QACF,CAAA;QACDT,oBAAoB,CAACvW,OAAO,EAAE8W,EAAE,GAAKjH,gBAAgB,CAAChH,MAAM,CAACiO,EAAE,CAAClf,GAAG,CAAC,CAAC,CAAA;QAErE,8EAAA;QACA,IAAIsS,QAAQ,GAAGmN,YAAY,CAACH,aAAa,CAAC,CAAA;QAC1C,IAAIhN,QAAQ,EAAE;YACZ,MAAM6L,uBAAuB,CAAC5B,OAAO,EAAEjK,QAAQ,CAACrJ,MAAM,EAAE,IAAI,EAAE;gBAC5D1H,OAAAA;YACD,CAAA,CAAC,CAAA;YACF,OAAO;gBAAEsb,cAAc,EAAE,IAAA;aAAM,CAAA;QAChC,CAAA;QAEDvK,QAAQ,GAAGmN,YAAY,CAACF,cAAc,CAAC,CAAA;QACvC,IAAIjN,QAAQ,EAAE;YACZ,+DAAA;YACA,oEAAA;YACA,oBAAA;YACA+F,gBAAgB,CAAC7H,GAAG,CAAC8B,QAAQ,CAACtS,GAAG,CAAC,CAAA;YAClC,MAAMme,uBAAuB,CAAC5B,OAAO,EAAEjK,QAAQ,CAACrJ,MAAM,EAAE,IAAI,EAAE;gBAC5D1H,OAAAA;YACD,CAAA,CAAC,CAAA;YACF,OAAO;gBAAEsb,cAAc,EAAE,IAAA;aAAM,CAAA;QAChC,CAAA;QAED,yCAAA;QACA,IAAI,EAAExV,UAAU,EAAEmP,MAAAA,EAAQ,GAAGkJ,iBAAiB,CAC5CvgB,KAAK,EACL2H,OAAO,EACP4X,aAAa,EACbY,aAAa,EACb7C,mBAAmB,EACnBkC,oBAAoB,EACpBY,cAAc,EACd9G,eAAe,CAChB,CAAA;QAED,8DAAA;QACAA,eAAe,CAACrQ,OAAO,CAAC,CAACuX,YAAY,EAAE7C,OAAO,KAAI;YAChD6C,YAAY,CAACrO,SAAS,EAAEN,OAAO,IAAI;gBACjC,gEAAA;gBACA,6CAAA;gBACA,sEAAA;gBACA,IAAIA,OAAO,IAAI2O,YAAY,CAACpP,IAAI,EAAE;oBAChCkI,eAAe,CAACxH,MAAM,CAAC6L,OAAO,CAAC,CAAA;gBAChC,CAAA;YACH,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,6EAAA;QACA,IAAI/H,MAAM,CAACG,mBAAmB,IAAIsE,gBAAgB,IAAIra,KAAK,CAACqX,MAAM,EAAE;YAClE3L,MAAM,CAAC/L,OAAO,CAACK,KAAK,CAACqX,MAAM,CAAC,CACzBvM,MAAM,EAACoG,KAAA,IAAA;gBAAA,IAAC,CAACrK,EAAE,CAAC,GAAAqK,KAAA,CAAA;gBAAA,OAAK,CAACqO,aAAa,CAAC1U,IAAI,EAAEqM,CAAC,GAAKA,CAAC,CAAC7Q,KAAK,CAACQ,EAAE,KAAKA,EAAE,CAAC,CAAA;YAAA,CAAA,CAAC,CAC/DoC,OAAO,EAAC0J,KAAA,IAAqB;gBAAA,IAApB,CAACgL,OAAO,EAAEjY,KAAK,CAAC,GAAAiN,KAAA,CAAA;gBACxB0E,MAAM,GAAG3L,MAAM,CAAC7F,MAAM,CAACwR,MAAM,IAAI,CAAA,CAAE,EAAE;oBAAE,CAACsG,OAAO,CAAA,EAAGjY,KAAAA;gBAAK,CAAE,CAAC,CAAA;YAC5D,CAAC,CAAC,CAAA;QACL,CAAA;QAED,IAAIia,eAAe,GAAGC,sBAAsB,EAAE,CAAA;QAC9C,IAAIa,kBAAkB,GAAGC,oBAAoB,CAAC1H,uBAAuB,CAAC,CAAA;QACtE,IAAI2H,oBAAoB,GACtBhB,eAAe,IAAIc,kBAAkB,IAAIjB,oBAAoB,CAACrf,MAAM,GAAG,CAAC,CAAA;QAE1E,OAAA2E,QAAA,CAAA;YACE6C,OAAO;YACPO,UAAU;YACVmP,MAAAA;QAAM,CAAA,EACFsJ,oBAAoB,GAAG;YAAE3I,QAAQ,EAAE,IAAIC,GAAG,CAACjY,KAAK,CAACgY,QAAQ,CAAA;SAAG,GAAG,CAAA,CAAE,CAAA,CAAA;IAEzE,CAAA;IAEA,SAASsH,oBAAoBA,CAC3BhC,mBAAoD,EAAA;QAEpD,IAAIA,mBAAmB,IAAI,CAACM,aAAa,CAACN,mBAAmB,CAAC,CAAC,CAAC,CAAC,EAAE;YACjE,qEAAA;YACA,yCAAA;YACA,kEAAA;YACA,OAAO;gBACL,CAACA,mBAAmB,CAAC,CAAC,CAAC,CAAA,EAAGA,mBAAmB,CAAC,CAAC,CAAC,CAAClV,IAAAA;aAClD,CAAA;QACF,CAAA,MAAM,IAAIpI,KAAK,CAAC+X,UAAU,EAAE;YAC3B,IAAIrM,MAAM,CAACgQ,IAAI,CAAC1b,KAAK,CAAC+X,UAAU,CAAC,CAAC5X,MAAM,KAAK,CAAC,EAAE;gBAC9C,OAAO,IAAI,CAAA;YACZ,CAAA,MAAM;gBACL,OAAOH,KAAK,CAAC+X,UAAU,CAAA;YACxB,CAAA;QACF,CAAA;IACH,CAAA;IAEA,SAAS+H,8BAA8BA,CACrCN,oBAA2C,EAAA;QAE3CA,oBAAoB,CAACvW,OAAO,EAAE8W,EAAE,IAAI;YAClC,IAAIjF,OAAO,GAAG9a,KAAK,CAACgY,QAAQ,CAACpG,GAAG,CAACmO,EAAE,CAAClf,GAAG,CAAC,CAAA;YACxC,IAAI+f,mBAAmB,GAAGC,iBAAiB,CACzC5gB,SAAS,EACT6a,OAAO,GAAGA,OAAO,CAAC1S,IAAI,GAAGnI,SAAS,CACnC,CAAA;YACDD,KAAK,CAACgY,QAAQ,CAACpI,GAAG,CAACmQ,EAAE,CAAClf,GAAG,EAAE+f,mBAAmB,CAAC,CAAA;QACjD,CAAC,CAAC,CAAA;QACF,OAAO,IAAI3I,GAAG,CAACjY,KAAK,CAACgY,QAAQ,CAAC,CAAA;IAChC,CAAA;IAEA,0DAAA;IACA,SAAS8I,KAAKA,CACZjgB,GAAW,EACX8c,OAAe,EACfla,IAAmB,EACnBkX,IAAyB,EAAA;QAEzB,IAAIxF,QAAQ,EAAE;YACZ,MAAM,IAAIhR,KAAK,CACb,2EAA2E,GACzE,8EAA8E,GAC9E,6CAA6C,CAChD,CAAA;QACF,CAAA;QAED,IAAI2U,gBAAgB,CAACnJ,GAAG,CAAC9O,GAAG,CAAC,EAAEmf,YAAY,CAACnf,GAAG,CAAC,CAAA;QAChD,IAAIqa,SAAS,GAAG,CAACP,IAAI,IAAIA,IAAI,CAACM,kBAAkB,MAAM,IAAI,CAAA;QAE1D,IAAI8B,WAAW,GAAGzH,kBAAkB,IAAID,UAAU,CAAA;QAClD,IAAI2G,cAAc,GAAGC,WAAW,CAC9Bjc,KAAK,CAACc,QAAQ,EACdd,KAAK,CAAC2H,OAAO,EACbP,QAAQ,EACRwO,MAAM,CAACI,kBAAkB,EACzBvS,IAAI,EACJmS,MAAM,CAACvH,oBAAoB,EAC3BsP,OAAO,EACPhD,IAAI,IAAA,IAAA,GAAA,KAAA,CAAA,GAAJA,IAAI,CAAEwB,QAAQ,CACf,CAAA;QACD,IAAIxU,OAAO,GAAGT,WAAW,CAAC6V,WAAW,EAAEf,cAAc,EAAE5U,QAAQ,CAAC,CAAA;QAEhE,IAAI0P,QAAQ,GAAGC,aAAa,CAACpP,OAAO,EAAEoV,WAAW,EAAEf,cAAc,CAAC,CAAA;QAClE,IAAIlF,QAAQ,CAACE,MAAM,IAAIF,QAAQ,CAACnP,OAAO,EAAE;YACvCA,OAAO,GAAGmP,QAAQ,CAACnP,OAAO,CAAA;QAC3B,CAAA;QAED,IAAI,CAACA,OAAO,EAAE;YACZoZ,eAAe,CACblgB,GAAG,EACH8c,OAAO,EACP/G,sBAAsB,CAAC,GAAG,EAAE;gBAAE5V,QAAQ,EAAEgb,cAAAA;aAAgB,CAAC,EACzD;gBAAEd,SAAAA;YAAS,CAAE,CACd,CAAA;YACD,OAAA;QACD,CAAA;QAED,IAAI,EAAEvZ,IAAI,EAAEya,UAAU,EAAE1W,KAAAA,EAAO,GAAG2W,wBAAwB,CACxDzG,MAAM,CAACE,sBAAsB,EAC7B,IAAI,EACJkG,cAAc,EACdrB,IAAI,CACL,CAAA;QAED,IAAIjV,KAAK,EAAE;YACTqb,eAAe,CAAClgB,GAAG,EAAE8c,OAAO,EAAEjY,KAAK,EAAE;gBAAEwV,SAAAA;YAAW,CAAA,CAAC,CAAA;YACnD,OAAA;QACD,CAAA;QAED,IAAIjT,KAAK,GAAGyW,cAAc,CAAC/W,OAAO,EAAEhG,IAAI,CAAC,CAAA;QAEzC0W,yBAAyB,GAAG,CAACsC,IAAI,IAAIA,IAAI,CAAC9C,kBAAkB,MAAM,IAAI,CAAA;QAEtE,IAAIuE,UAAU,IAAIZ,gBAAgB,CAACY,UAAU,CAACnI,UAAU,CAAC,EAAE;YACzD+M,mBAAmB,CACjBngB,GAAG,EACH8c,OAAO,EACPhc,IAAI,EACJsG,KAAK,EACLN,OAAO,EACPmP,QAAQ,CAACE,MAAM,EACfkE,SAAS,EACTkB,UAAU,CACX,CAAA;YACD,OAAA;QACD,CAAA;QAED,yEAAA;QACA,gBAAA;QACAjD,gBAAgB,CAACvJ,GAAG,CAAC/O,GAAG,EAAE;YAAE8c,OAAO;YAAEhc,IAAAA;QAAM,CAAA,CAAC,CAAA;QAC5Csf,mBAAmB,CACjBpgB,GAAG,EACH8c,OAAO,EACPhc,IAAI,EACJsG,KAAK,EACLN,OAAO,EACPmP,QAAQ,CAACE,MAAM,EACfkE,SAAS,EACTkB,UAAU,CACX,CAAA;IACH,CAAA;IAEA,+EAAA;IACA,2BAAA;IACA,eAAe4E,mBAAmBA,CAChCngB,GAAW,EACX8c,OAAe,EACfhc,IAAY,EACZsG,KAA6B,EAC7BiZ,cAAwC,EACxChD,UAAmB,EACnBhD,SAAkB,EAClBkB,UAAsB,EAAA;QAEtBO,oBAAoB,EAAE,CAAA;QACtBxD,gBAAgB,CAACrH,MAAM,CAACjR,GAAG,CAAC,CAAA;QAE5B,SAASsgB,uBAAuBA,CAACjK,CAAyB,EAAA;YACxD,IAAI,CAACA,CAAC,CAAC7Q,KAAK,CAACjG,MAAM,IAAI,CAAC8W,CAAC,CAAC7Q,KAAK,CAAC8Q,IAAI,EAAE;gBACpC,IAAIzR,KAAK,GAAGkR,sBAAsB,CAAC,GAAG,EAAE;oBACtC+H,MAAM,EAAEvC,UAAU,CAACnI,UAAU;oBAC7BjT,QAAQ,EAAEW,IAAI;oBACdgc,OAAO,EAAEA,OAAAA;gBACV,CAAA,CAAC,CAAA;gBACFoD,eAAe,CAAClgB,GAAG,EAAE8c,OAAO,EAAEjY,KAAK,EAAE;oBAAEwV,SAAAA;gBAAW,CAAA,CAAC,CAAA;gBACnD,OAAO,IAAI,CAAA;YACZ,CAAA;YACD,OAAO,KAAK,CAAA;QACd,CAAA;QAEA,IAAI,CAACgD,UAAU,IAAIiD,uBAAuB,CAAClZ,KAAK,CAAC,EAAE;YACjD,OAAA;QACD,CAAA;QAED,8CAAA;QACA,IAAImZ,eAAe,GAAGphB,KAAK,CAACgY,QAAQ,CAACpG,GAAG,CAAC/Q,GAAG,CAAC,CAAA;QAC7CwgB,kBAAkB,CAACxgB,GAAG,EAAEygB,oBAAoB,CAAClF,UAAU,EAAEgF,eAAe,CAAC,EAAE;YACzElG,SAAAA;QACD,CAAA,CAAC,CAAA;QAEF,IAAIqG,eAAe,GAAG,IAAI1Q,eAAe,EAAE,CAAA;QAC3C,IAAI2Q,YAAY,GAAGnE,uBAAuB,CACxC/N,IAAI,CAAC/N,OAAO,EACZI,IAAI,EACJ4f,eAAe,CAACvQ,MAAM,EACtBoL,UAAU,CACX,CAAA;QAED,IAAI8B,UAAU,EAAE;YACd,IAAIE,cAAc,GAAG,MAAMC,cAAc,CACvC6C,cAAc,EACdvf,IAAI,EACJ6f,YAAY,CAACxQ,MAAM,CACpB,CAAA;YAED,IAAIoN,cAAc,CAACpO,IAAI,KAAK,SAAS,EAAE;gBACrC,OAAA;YACD,CAAA,MAAM,IAAIoO,cAAc,CAACpO,IAAI,KAAK,OAAO,EAAE;gBAC1C,IAAI,EAAEtK,KAAAA,EAAO,GAAG6Y,wBAAwB,CAAC5c,IAAI,EAAEyc,cAAc,CAAC,CAAA;gBAC9D2C,eAAe,CAAClgB,GAAG,EAAE8c,OAAO,EAAEjY,KAAK,EAAE;oBAAEwV,SAAAA;gBAAW,CAAA,CAAC,CAAA;gBACnD,OAAA;YACD,CAAA,MAAM,IAAI,CAACkD,cAAc,CAACzW,OAAO,EAAE;gBAClCoZ,eAAe,CACblgB,GAAG,EACH8c,OAAO,EACP/G,sBAAsB,CAAC,GAAG,EAAE;oBAAE5V,QAAQ,EAAEW,IAAAA;iBAAM,CAAC,EAC/C;oBAAEuZ,SAAAA;gBAAS,CAAE,CACd,CAAA;gBACD,OAAA;YACD,CAAA,MAAM;gBACLgG,cAAc,GAAG9C,cAAc,CAACzW,OAAO,CAAA;gBACvCM,KAAK,GAAGyW,cAAc,CAACwC,cAAc,EAAEvf,IAAI,CAAC,CAAA;gBAE5C,IAAIwf,uBAAuB,CAAClZ,KAAK,CAAC,EAAE;oBAClC,OAAA;gBACD,CAAA;YACF,CAAA;QACF,CAAA;QAED,kCAAA;QACA6Q,gBAAgB,CAAClJ,GAAG,CAAC/O,GAAG,EAAE0gB,eAAe,CAAC,CAAA;QAE1C,IAAIE,iBAAiB,GAAG1I,kBAAkB,CAAA;QAC1C,IAAI2I,aAAa,GAAG,MAAM7C,gBAAgB,CACxC,QAAQ,EACR7e,KAAK,EACLwhB,YAAY,EACZ;YAACvZ,KAAK;SAAC,EACPiZ,cAAc,EACdrgB,GAAG,CACJ,CAAA;QACD,IAAI2c,YAAY,GAAGkE,aAAa,CAACzZ,KAAK,CAAC5B,KAAK,CAACQ,EAAE,CAAC,CAAA;QAEhD,IAAI2a,YAAY,CAACxQ,MAAM,CAACa,OAAO,EAAE;YAC/B,sEAAA;YACA,yEAAA;YACA,IAAIiH,gBAAgB,CAAClH,GAAG,CAAC/Q,GAAG,CAAC,KAAK0gB,eAAe,EAAE;gBACjDzI,gBAAgB,CAAChH,MAAM,CAACjR,GAAG,CAAC,CAAA;YAC7B,CAAA;YACD,OAAA;QACD,CAAA;QAED,2EAAA;QACA,0EAAA;QACA,OAAA;QACA,IAAI+U,MAAM,CAACC,iBAAiB,IAAIwD,eAAe,CAAC1J,GAAG,CAAC9O,GAAG,CAAC,EAAE;YACxD,IAAIie,gBAAgB,CAACtB,YAAY,CAAC,IAAII,aAAa,CAACJ,YAAY,CAAC,EAAE;gBACjE6D,kBAAkB,CAACxgB,GAAG,EAAE8gB,cAAc,CAAC1hB,SAAS,CAAC,CAAC,CAAA;gBAClD,OAAA;YACD,CAAA;QACD,oDAAA;QACD,CAAA,MAAM;YACL,IAAI6e,gBAAgB,CAACtB,YAAY,CAAC,EAAE;gBAClC1E,gBAAgB,CAAChH,MAAM,CAACjR,GAAG,CAAC,CAAA;gBAC5B,IAAImY,uBAAuB,GAAGyI,iBAAiB,EAAE;oBAC/C,oEAAA;oBACA,oEAAA;oBACA,qEAAA;oBACA,6CAAA;oBACAJ,kBAAkB,CAACxgB,GAAG,EAAE8gB,cAAc,CAAC1hB,SAAS,CAAC,CAAC,CAAA;oBAClD,OAAA;gBACD,CAAA,MAAM;oBACLiZ,gBAAgB,CAAC7H,GAAG,CAACxQ,GAAG,CAAC,CAAA;oBACzBwgB,kBAAkB,CAACxgB,GAAG,EAAEggB,iBAAiB,CAACzE,UAAU,CAAC,CAAC,CAAA;oBACtD,OAAO4C,uBAAuB,CAACwC,YAAY,EAAEhE,YAAY,EAAE,KAAK,EAAE;wBAChEQ,iBAAiB,EAAE5B,UAAAA;oBACpB,CAAA,CAAC,CAAA;gBACH,CAAA;YACF,CAAA;YAED,yCAAA;YACA,IAAIwB,aAAa,CAACJ,YAAY,CAAC,EAAE;gBAC/BuD,eAAe,CAAClgB,GAAG,EAAE8c,OAAO,EAAEH,YAAY,CAAC9X,KAAK,CAAC,CAAA;gBACjD,OAAA;YACD,CAAA;QACF,CAAA;QAED,IAAIuZ,gBAAgB,CAACzB,YAAY,CAAC,EAAE;YAClC,MAAM5G,sBAAsB,CAAC,GAAG,EAAE;gBAAE5G,IAAI,EAAE,cAAA;YAAgB,CAAA,CAAC,CAAA;QAC5D,CAAA;QAED,yEAAA;QACA,gCAAA;QACA,IAAI/N,YAAY,GAAGjC,KAAK,CAAC2X,UAAU,CAAC7W,QAAQ,IAAId,KAAK,CAACc,QAAQ,CAAA;QAC9D,IAAI8gB,mBAAmB,GAAGvE,uBAAuB,CAC/C/N,IAAI,CAAC/N,OAAO,EACZU,YAAY,EACZsf,eAAe,CAACvQ,MAAM,CACvB,CAAA;QACD,IAAI+L,WAAW,GAAGzH,kBAAkB,IAAID,UAAU,CAAA;QAClD,IAAI1N,OAAO,GACT3H,KAAK,CAAC2X,UAAU,CAAC3X,KAAK,KAAK,MAAM,GAC7BkH,WAAW,CAAC6V,WAAW,EAAE/c,KAAK,CAAC2X,UAAU,CAAC7W,QAAQ,EAAEsG,QAAQ,CAAC,GAC7DpH,KAAK,CAAC2H,OAAO,CAAA;QAEnB3D,SAAS,CAAC2D,OAAO,EAAE,8CAA8C,CAAC,CAAA;QAElE,IAAIka,MAAM,GAAG,EAAE9I,kBAAkB,CAAA;QACjCE,cAAc,CAACrJ,GAAG,CAAC/O,GAAG,EAAEghB,MAAM,CAAC,CAAA;QAE/B,IAAIC,WAAW,GAAGjB,iBAAiB,CAACzE,UAAU,EAAEoB,YAAY,CAACpV,IAAI,CAAC,CAAA;QAClEpI,KAAK,CAACgY,QAAQ,CAACpI,GAAG,CAAC/O,GAAG,EAAEihB,WAAW,CAAC,CAAA;QAEpC,IAAI,CAACvC,aAAa,EAAEC,oBAAoB,CAAC,GAAGC,gBAAgB,CAC1DnQ,IAAI,CAAC/N,OAAO,EACZvB,KAAK,EACL2H,OAAO,EACPyU,UAAU,EACVna,YAAY,EACZ,KAAK,EACL2T,MAAM,CAACK,8BAA8B,EACrC0C,sBAAsB,EACtBC,uBAAuB,EACvBC,qBAAqB,EACrBQ,eAAe,EACfF,gBAAgB,EAChBD,gBAAgB,EAChB6D,WAAW,EACX3V,QAAQ,EACR;YAACa,KAAK,CAAC5B,KAAK,CAACQ,EAAE;YAAE2W,YAAY;SAAC,CAC/B,CAAA;QAED,uEAAA;QACA,4EAAA;QACA,qDAAA;QACAgC,oBAAoB,CACjB1U,MAAM,EAAEiV,EAAE,GAAKA,EAAE,CAAClf,GAAG,KAAKA,GAAG,CAAC,CAC9BoI,OAAO,EAAE8W,EAAE,IAAI;YACd,IAAIgC,QAAQ,GAAGhC,EAAE,CAAClf,GAAG,CAAA;YACrB,IAAIugB,eAAe,GAAGphB,KAAK,CAACgY,QAAQ,CAACpG,GAAG,CAACmQ,QAAQ,CAAC,CAAA;YAClD,IAAInB,mBAAmB,GAAGC,iBAAiB,CACzC5gB,SAAS,EACTmhB,eAAe,GAAGA,eAAe,CAAChZ,IAAI,GAAGnI,SAAS,CACnD,CAAA;YACDD,KAAK,CAACgY,QAAQ,CAACpI,GAAG,CAACmS,QAAQ,EAAEnB,mBAAmB,CAAC,CAAA;YACjD,IAAI9H,gBAAgB,CAACnJ,GAAG,CAACoS,QAAQ,CAAC,EAAE;gBAClC/B,YAAY,CAAC+B,QAAQ,CAAC,CAAA;YACvB,CAAA;YACD,IAAIhC,EAAE,CAACnP,UAAU,EAAE;gBACjBkI,gBAAgB,CAAClJ,GAAG,CAACmS,QAAQ,EAAEhC,EAAE,CAACnP,UAAU,CAAC,CAAA;YAC9C,CAAA;QACH,CAAC,CAAC,CAAA;QAEJoJ,WAAW,CAAC;YAAEhC,QAAQ,EAAE,IAAIC,GAAG,CAACjY,KAAK,CAACgY,QAAQ,CAAA;QAAC,CAAE,CAAC,CAAA;QAElD,IAAIiI,8BAA8B,GAAGA,IACnCT,oBAAoB,CAACvW,OAAO,EAAE8W,EAAE,GAAKC,YAAY,CAACD,EAAE,CAAClf,GAAG,CAAC,CAAC,CAAA;QAE5D0gB,eAAe,CAACvQ,MAAM,CAACjL,gBAAgB,CACrC,OAAO,EACPka,8BAA8B,CAC/B,CAAA;QAED,IAAI,EAAEE,aAAa,EAAEC,cAAAA,EAAgB,GACnC,MAAMC,8BAA8B,CAClCrgB,KAAK,EACL2H,OAAO,EACP4X,aAAa,EACbC,oBAAoB,EACpBoC,mBAAmB,CACpB,CAAA;QAEH,IAAIL,eAAe,CAACvQ,MAAM,CAACa,OAAO,EAAE;YAClC,OAAA;QACD,CAAA;QAED0P,eAAe,CAACvQ,MAAM,CAAChL,mBAAmB,CACxC,OAAO,EACPia,8BAA8B,CAC/B,CAAA;QAEDhH,cAAc,CAACnH,MAAM,CAACjR,GAAG,CAAC,CAAA;QAC1BiY,gBAAgB,CAAChH,MAAM,CAACjR,GAAG,CAAC,CAAA;QAC5B2e,oBAAoB,CAACvW,OAAO,EAAE0H,CAAC,GAAKmI,gBAAgB,CAAChH,MAAM,CAACnB,CAAC,CAAC9P,GAAG,CAAC,CAAC,CAAA;QAEnE,IAAIsS,QAAQ,GAAGmN,YAAY,CAACH,aAAa,CAAC,CAAA;QAC1C,IAAIhN,QAAQ,EAAE;YACZ,OAAO6L,uBAAuB,CAC5B4C,mBAAmB,EACnBzO,QAAQ,CAACrJ,MAAM,EACf,KAAK,CACN,CAAA;QACF,CAAA;QAEDqJ,QAAQ,GAAGmN,YAAY,CAACF,cAAc,CAAC,CAAA;QACvC,IAAIjN,QAAQ,EAAE;YACZ,+DAAA;YACA,oEAAA;YACA,oBAAA;YACA+F,gBAAgB,CAAC7H,GAAG,CAAC8B,QAAQ,CAACtS,GAAG,CAAC,CAAA;YAClC,OAAOme,uBAAuB,CAC5B4C,mBAAmB,EACnBzO,QAAQ,CAACrJ,MAAM,EACf,KAAK,CACN,CAAA;QACF,CAAA;QAED,yCAAA;QACA,IAAI,EAAE5B,UAAU,EAAEmP,MAAAA,EAAQ,GAAGkJ,iBAAiB,CAC5CvgB,KAAK,EACL2H,OAAO,EACP4X,aAAa,EACbY,aAAa,EACblgB,SAAS,EACTuf,oBAAoB,EACpBY,cAAc,EACd9G,eAAe,CAChB,CAAA;QAED,yEAAA;QACA,8DAAA;QACA,IAAItZ,KAAK,CAACgY,QAAQ,CAACrI,GAAG,CAAC9O,GAAG,CAAC,EAAE;YAC3B,IAAImhB,WAAW,GAAGL,cAAc,CAACnE,YAAY,CAACpV,IAAI,CAAC,CAAA;YACnDpI,KAAK,CAACgY,QAAQ,CAACpI,GAAG,CAAC/O,GAAG,EAAEmhB,WAAW,CAAC,CAAA;QACrC,CAAA;QAEDtB,oBAAoB,CAACmB,MAAM,CAAC,CAAA;QAE5B,wEAAA;QACA,uEAAA;QACA,mDAAA;QACA,IACE7hB,KAAK,CAAC2X,UAAU,CAAC3X,KAAK,KAAK,SAAS,IACpC6hB,MAAM,GAAG7I,uBAAuB,EAChC;YACAhV,SAAS,CAACmU,aAAa,EAAE,yBAAyB,CAAC,CAAA;YACnDG,2BAA2B,IAAIA,2BAA2B,CAACjG,KAAK,EAAE,CAAA;YAElE8I,kBAAkB,CAACnb,KAAK,CAAC2X,UAAU,CAAC7W,QAAQ,EAAE;gBAC5C6G,OAAO;gBACPO,UAAU;gBACVmP,MAAM;gBACNW,QAAQ,EAAE,IAAIC,GAAG,CAACjY,KAAK,CAACgY,QAAQ,CAAA;YACjC,CAAA,CAAC,CAAA;QACH,CAAA,MAAM;YACL,uEAAA;YACA,kEAAA;YACA,uEAAA;YACAgC,WAAW,CAAC;gBACV3C,MAAM;gBACNnP,UAAU,EAAEyT,eAAe,CACzB3b,KAAK,CAACkI,UAAU,EAChBA,UAAU,EACVP,OAAO,EACP0P,MAAM,CACP;gBACDW,QAAQ,EAAE,IAAIC,GAAG,CAACjY,KAAK,CAACgY,QAAQ,CAAA;YACjC,CAAA,CAAC,CAAA;YACFW,sBAAsB,GAAG,KAAK,CAAA;QAC/B,CAAA;IACH,CAAA;IAEA,+EAAA;IACA,eAAesI,mBAAmBA,CAChCpgB,GAAW,EACX8c,OAAe,EACfhc,IAAY,EACZsG,KAA6B,EAC7BN,OAAiC,EACjCuW,UAAmB,EACnBhD,SAAkB,EAClBkB,UAAuB,EAAA;QAEvB,IAAIgF,eAAe,GAAGphB,KAAK,CAACgY,QAAQ,CAACpG,GAAG,CAAC/Q,GAAG,CAAC,CAAA;QAC7CwgB,kBAAkB,CAChBxgB,GAAG,EACHggB,iBAAiB,CACfzE,UAAU,EACVgF,eAAe,GAAGA,eAAe,CAAChZ,IAAI,GAAGnI,SAAS,CACnD,EACD;YAAEib,SAAAA;QAAW,CAAA,CACd,CAAA;QAED,IAAIqG,eAAe,GAAG,IAAI1Q,eAAe,EAAE,CAAA;QAC3C,IAAI2Q,YAAY,GAAGnE,uBAAuB,CACxC/N,IAAI,CAAC/N,OAAO,EACZI,IAAI,EACJ4f,eAAe,CAACvQ,MAAM,CACvB,CAAA;QAED,IAAIkN,UAAU,EAAE;YACd,IAAIE,cAAc,GAAG,MAAMC,cAAc,CACvC1W,OAAO,EACPhG,IAAI,EACJ6f,YAAY,CAACxQ,MAAM,CACpB,CAAA;YAED,IAAIoN,cAAc,CAACpO,IAAI,KAAK,SAAS,EAAE;gBACrC,OAAA;YACD,CAAA,MAAM,IAAIoO,cAAc,CAACpO,IAAI,KAAK,OAAO,EAAE;gBAC1C,IAAI,EAAEtK,KAAAA,EAAO,GAAG6Y,wBAAwB,CAAC5c,IAAI,EAAEyc,cAAc,CAAC,CAAA;gBAC9D2C,eAAe,CAAClgB,GAAG,EAAE8c,OAAO,EAAEjY,KAAK,EAAE;oBAAEwV,SAAAA;gBAAW,CAAA,CAAC,CAAA;gBACnD,OAAA;YACD,CAAA,MAAM,IAAI,CAACkD,cAAc,CAACzW,OAAO,EAAE;gBAClCoZ,eAAe,CACblgB,GAAG,EACH8c,OAAO,EACP/G,sBAAsB,CAAC,GAAG,EAAE;oBAAE5V,QAAQ,EAAEW,IAAAA;iBAAM,CAAC,EAC/C;oBAAEuZ,SAAAA;gBAAS,CAAE,CACd,CAAA;gBACD,OAAA;YACD,CAAA,MAAM;gBACLvT,OAAO,GAAGyW,cAAc,CAACzW,OAAO,CAAA;gBAChCM,KAAK,GAAGyW,cAAc,CAAC/W,OAAO,EAAEhG,IAAI,CAAC,CAAA;YACtC,CAAA;QACF,CAAA;QAED,+CAAA;QACAmX,gBAAgB,CAAClJ,GAAG,CAAC/O,GAAG,EAAE0gB,eAAe,CAAC,CAAA;QAE1C,IAAIE,iBAAiB,GAAG1I,kBAAkB,CAAA;QAC1C,IAAI6F,OAAO,GAAG,MAAMC,gBAAgB,CAClC,QAAQ,EACR7e,KAAK,EACLwhB,YAAY,EACZ;YAACvZ,KAAK;SAAC,EACPN,OAAO,EACP9G,GAAG,CACJ,CAAA;QACD,IAAIiJ,MAAM,GAAG8U,OAAO,CAAC3W,KAAK,CAAC5B,KAAK,CAACQ,EAAE,CAAC,CAAA;QAEpC,4EAAA;QACA,uEAAA;QACA,4EAAA;QACA,wBAAA;QACA,IAAIoY,gBAAgB,CAACnV,MAAM,CAAC,EAAE;YAC5BA,MAAM,GACJ,AAAC,MAAMmY,mBAAmB,CAACnY,MAAM,EAAE0X,YAAY,CAACxQ,MAAM,EAAE,IAAI,CAAC,IAC7DlH,MAAM,CAAA;QACT,CAAA;QAED,0EAAA;QACA,uEAAA;QACA,IAAIgP,gBAAgB,CAAClH,GAAG,CAAC/Q,GAAG,CAAC,KAAK0gB,eAAe,EAAE;YACjDzI,gBAAgB,CAAChH,MAAM,CAACjR,GAAG,CAAC,CAAA;QAC7B,CAAA;QAED,IAAI2gB,YAAY,CAACxQ,MAAM,CAACa,OAAO,EAAE;YAC/B,OAAA;QACD,CAAA;QAED,uEAAA;QACA,gEAAA;QACA,IAAIwH,eAAe,CAAC1J,GAAG,CAAC9O,GAAG,CAAC,EAAE;YAC5BwgB,kBAAkB,CAACxgB,GAAG,EAAE8gB,cAAc,CAAC1hB,SAAS,CAAC,CAAC,CAAA;YAClD,OAAA;QACD,CAAA;QAED,0EAAA;QACA,IAAI6e,gBAAgB,CAAChV,MAAM,CAAC,EAAE;YAC5B,IAAIkP,uBAAuB,GAAGyI,iBAAiB,EAAE;gBAC/C,oEAAA;gBACA,uDAAA;gBACAJ,kBAAkB,CAACxgB,GAAG,EAAE8gB,cAAc,CAAC1hB,SAAS,CAAC,CAAC,CAAA;gBAClD,OAAA;YACD,CAAA,MAAM;gBACLiZ,gBAAgB,CAAC7H,GAAG,CAACxQ,GAAG,CAAC,CAAA;gBACzB,MAAMme,uBAAuB,CAACwC,YAAY,EAAE1X,MAAM,EAAE,KAAK,CAAC,CAAA;gBAC1D,OAAA;YACD,CAAA;QACF,CAAA;QAED,yCAAA;QACA,IAAI8T,aAAa,CAAC9T,MAAM,CAAC,EAAE;YACzBiX,eAAe,CAAClgB,GAAG,EAAE8c,OAAO,EAAE7T,MAAM,CAACpE,KAAK,CAAC,CAAA;YAC3C,OAAA;QACD,CAAA;QAED1B,SAAS,CAAC,CAACib,gBAAgB,CAACnV,MAAM,CAAC,EAAE,iCAAiC,CAAC,CAAA;QAEvE,0CAAA;QACAuX,kBAAkB,CAACxgB,GAAG,EAAE8gB,cAAc,CAAC7X,MAAM,CAAC1B,IAAI,CAAC,CAAC,CAAA;IACtD,CAAA;IAEA;;;;;;;;;;;;;;;;;;GAkBG,GACH,eAAe4W,uBAAuBA,CACpC5B,OAAgB,EAChBjK,QAAwB,EACxB+O,YAAqB,EAAAC,MAAA,EASf;QAAA,IARN,EACE/F,UAAU,EACV4B,iBAAiB,EACjB5b,OAAAA,yBAKE,CAAA,CAAE,GAAA+f,MAAA,CAAA;QAEN,IAAIhP,QAAQ,CAACE,QAAQ,CAAC5D,OAAO,CAACE,GAAG,CAAC,oBAAoB,CAAC,EAAE;YACvDgJ,sBAAsB,GAAG,IAAI,CAAA;QAC9B,CAAA;QAED,IAAI7X,QAAQ,GAAGqS,QAAQ,CAACE,QAAQ,CAAC5D,OAAO,CAACmC,GAAG,CAAC,UAAU,CAAC,CAAA;QACxD5N,SAAS,CAAClD,QAAQ,EAAE,qDAAqD,CAAC,CAAA;QAC1EA,QAAQ,GAAGie,yBAAyB,CAClCje,QAAQ,EACR,IAAIW,GAAG,CAAC2b,OAAO,CAACzZ,GAAG,CAAC,EACpByD,QAAQ,CACT,CAAA;QACD,IAAIgb,gBAAgB,GAAGrhB,cAAc,CAACf,KAAK,CAACc,QAAQ,EAAEA,QAAQ,EAAE;YAC9D2a,WAAW,EAAE,IAAA;QACd,CAAA,CAAC,CAAA;QAEF,IAAIxG,SAAS,EAAE;YACb,IAAIoN,gBAAgB,GAAG,KAAK,CAAA;YAE5B,IAAIlP,QAAQ,CAACE,QAAQ,CAAC5D,OAAO,CAACE,GAAG,CAAC,yBAAyB,CAAC,EAAE;gBAC5D,gEAAA;gBACA0S,gBAAgB,GAAG,IAAI,CAAA;aACxB,MAAM,IAAI3N,kBAAkB,CAACzJ,IAAI,CAACnK,QAAQ,CAAC,EAAE;gBAC5C,MAAM6C,GAAG,GAAG2L,IAAI,CAAC/N,OAAO,CAACC,SAAS,CAACV,QAAQ,CAAC,CAAA;gBAC5CuhB,gBAAgB,GACd,sDAAA;gBACA1e,GAAG,CAACmC,MAAM,KAAKkP,YAAY,CAAClU,QAAQ,CAACgF,MAAM,IAC3C,uEAAA;gBACAyB,aAAa,CAAC5D,GAAG,CAAC3C,QAAQ,EAAEoG,QAAQ,CAAC,IAAI,IAAI,CAAA;YAChD,CAAA;YAED,IAAIib,gBAAgB,EAAE;gBACpB,IAAIjgB,OAAO,EAAE;oBACX4S,YAAY,CAAClU,QAAQ,CAACsB,OAAO,CAACtB,QAAQ,CAAC,CAAA;gBACxC,CAAA,MAAM;oBACLkU,YAAY,CAAClU,QAAQ,CAAC+E,MAAM,CAAC/E,QAAQ,CAAC,CAAA;gBACvC,CAAA;gBACD,OAAA;YACD,CAAA;QACF,CAAA;QAED,mEAAA;QACA,iDAAA;QACAwX,2BAA2B,GAAG,IAAI,CAAA;QAElC,IAAIgK,qBAAqB,GACvBlgB,OAAO,KAAK,IAAI,IAAI+Q,QAAQ,CAACE,QAAQ,CAAC5D,OAAO,CAACE,GAAG,CAAC,iBAAiB,CAAC,GAChEyI,MAAa,CAAC/V,OAAO,GACrB+V,MAAa,CAACpW,IAAI,CAAA;QAExB,yEAAA;QACA,mBAAA;QACA,IAAI,EAAEiS,UAAU,EAAEC,UAAU,EAAEC,WAAAA,EAAa,GAAGnU,KAAK,CAAC2X,UAAU,CAAA;QAC9D,IACE,CAACyE,UAAU,IACX,CAAC4B,iBAAiB,IAClB/J,UAAU,IACVC,UAAU,IACVC,WAAW,EACX;YACAiI,UAAU,GAAGgD,2BAA2B,CAACpf,KAAK,CAAC2X,UAAU,CAAC,CAAA;QAC3D,CAAA;QAED,2EAAA;QACA,4EAAA;QACA,sBAAA;QACA,IAAIwH,gBAAgB,GAAG/C,UAAU,IAAI4B,iBAAiB,CAAA;QACtD,IACEjK,iCAAiC,CAACpE,GAAG,CAACwD,QAAQ,CAACE,QAAQ,CAAC7D,MAAM,CAAC,IAC/D2P,gBAAgB,IAChB3D,gBAAgB,CAAC2D,gBAAgB,CAAClL,UAAU,CAAC,EAC7C;YACA,MAAMgG,eAAe,CAACqI,qBAAqB,EAAEF,gBAAgB,EAAE;gBAC7DhG,UAAU,EAAAtX,QAAA,CAAA,CAAA,CAAA,EACLqa,gBAAgB,EAAA;oBACnBjL,UAAU,EAAEpT,QAAAA;iBACb,CAAA;gBACD,wCAAA;gBACA+W,kBAAkB,EAAEQ,yBAAyB;gBAC7CmE,oBAAoB,EAAE0F,YAAY,GAC9B3J,4BAA4B,GAC5BtY,SAAAA;YACL,CAAA,CAAC,CAAA;QACH,CAAA,MAAM;YACL,sEAAA;YACA,sBAAA;YACA,IAAI4c,kBAAkB,GAAGgB,oBAAoB,CAC3CuE,gBAAgB,EAChBhG,UAAU,CACX,CAAA;YACD,MAAMnC,eAAe,CAACqI,qBAAqB,EAAEF,gBAAgB,EAAE;gBAC7DvF,kBAAkB;gBAClB,wDAAA;gBACAmB,iBAAiB;gBACjB,wCAAA;gBACAnG,kBAAkB,EAAEQ,yBAAyB;gBAC7CmE,oBAAoB,EAAE0F,YAAY,GAC9B3J,4BAA4B,GAC5BtY,SAAAA;YACL,CAAA,CAAC,CAAA;QACH,CAAA;IACH,CAAA;IAEA,yEAAA;IACA,qDAAA;IACA,eAAe4e,gBAAgBA,CAC7B7O,IAAyB,EACzBhQ,KAAkB,EAClBod,OAAgB,EAChBmC,aAAuC,EACvC5X,OAAiC,EACjC4a,UAAyB,EAAA;QAEzB,IAAI3D,OAA2C,CAAA;QAC/C,IAAI4D,WAAW,GAA+B,CAAA,CAAE,CAAA;QAChD,IAAI;YACF5D,OAAO,GAAG,MAAM6D,oBAAoB,CAClClN,gBAAgB,EAChBvF,IAAI,EACJhQ,KAAK,EACLod,OAAO,EACPmC,aAAa,EACb5X,OAAO,EACP4a,UAAU,EACV7b,QAAQ,EACRF,kBAAkB,CACnB,CAAA;SACF,CAAC,OAAOjC,CAAC,EAAE;YACV,yEAAA;YACA,mDAAA;YACAgb,aAAa,CAACtW,OAAO,EAAEiO,CAAC,IAAI;gBAC1BsL,WAAW,CAACtL,CAAC,CAAC7Q,KAAK,CAACQ,EAAE,CAAC,GAAG;oBACxBmJ,IAAI,EAAE/J,UAAU,CAACP,KAAK;oBACtBA,KAAK,EAAEnB,CAAAA;iBACR,CAAA;YACH,CAAC,CAAC,CAAA;YACF,OAAOie,WAAW,CAAA;QACnB,CAAA;QAED,KAAK,IAAI,CAAC7E,OAAO,EAAE7T,MAAM,CAAC,IAAI4B,MAAM,CAAC/L,OAAO,CAACif,OAAO,CAAC,CAAE;YACrD,IAAI8D,kCAAkC,CAAC5Y,MAAM,CAAC,EAAE;gBAC9C,IAAIuJ,QAAQ,GAAGvJ,MAAM,CAACA,MAAkB,CAAA;gBACxC0Y,WAAW,CAAC7E,OAAO,CAAC,GAAG;oBACrB3N,IAAI,EAAE/J,UAAU,CAACkN,QAAQ;oBACzBE,QAAQ,EAAEsP,wCAAwC,CAChDtP,QAAQ,EACR+J,OAAO,EACPO,OAAO,EACPhW,OAAO,EACPP,QAAQ,EACRwO,MAAM,CAACvH,oBAAoB,CAAA;iBAE9B,CAAA;YACF,CAAA,MAAM;gBACLmU,WAAW,CAAC7E,OAAO,CAAC,GAAG,MAAMiF,qCAAqC,CAChE9Y,MAAM,CACP,CAAA;YACF,CAAA;QACF,CAAA;QAED,OAAO0Y,WAAW,CAAA;IACpB,CAAA;IAEA,eAAenC,8BAA8BA,CAC3CrgB,KAAkB,EAClB2H,OAAiC,EACjC4X,aAAuC,EACvCsD,cAAqC,EACrCzF,OAAgB,EAAA;QAEhB,IAAI0F,cAAc,GAAG9iB,KAAK,CAAC2H,OAAO,CAAA;QAElC,4CAAA;QACA,IAAIob,oBAAoB,GAAGlE,gBAAgB,CACzC,QAAQ,EACR7e,KAAK,EACLod,OAAO,EACPmC,aAAa,EACb5X,OAAO,EACP,IAAI,CACL,CAAA;QAED,IAAIqb,qBAAqB,GAAGtS,OAAO,CAACuS,GAAG,CACrCJ,cAAc,CAACjjB,GAAG,CAAC,OAAOsgB,CAAC,IAAI;YAC7B,IAAIA,CAAC,CAACvY,OAAO,IAAIuY,CAAC,CAACjY,KAAK,IAAIiY,CAAC,CAACtP,UAAU,EAAE;gBACxC,IAAIgO,OAAO,GAAG,MAAMC,gBAAgB,CAClC,QAAQ,EACR7e,KAAK,EACLqd,uBAAuB,CAAC/N,IAAI,CAAC/N,OAAO,EAAE2e,CAAC,CAACve,IAAI,EAAEue,CAAC,CAACtP,UAAU,CAACI,MAAM,CAAC,EAClE;oBAACkP,CAAC,CAACjY,KAAK;iBAAC,EACTiY,CAAC,CAACvY,OAAO,EACTuY,CAAC,CAACrf,GAAG,CACN,CAAA;gBACD,IAAIiJ,MAAM,GAAG8U,OAAO,CAACsB,CAAC,CAACjY,KAAK,CAAC5B,KAAK,CAACQ,EAAE,CAAC,CAAA;gBACtC,yEAAA;gBACA,OAAO;oBAAE,CAACqZ,CAAC,CAACrf,GAAG,CAAA,EAAGiJ,MAAAA;iBAAQ,CAAA;YAC3B,CAAA,MAAM;gBACL,OAAO4G,OAAO,CAAC8B,OAAO,CAAC;oBACrB,CAAC0N,CAAC,CAACrf,GAAG,CAAA,EAAG;wBACPmP,IAAI,EAAE/J,UAAU,CAACP,KAAK;wBACtBA,KAAK,EAAEkR,sBAAsB,CAAC,GAAG,EAAE;4BACjC5V,QAAQ,EAAEkf,CAAC,CAACve,IAAAA;yBACb,CAAA;oBACa,CAAA;gBACjB,CAAA,CAAC,CAAA;YACH,CAAA;QACH,CAAC,CAAC,CACH,CAAA;QAED,IAAIwe,aAAa,GAAG,MAAM4C,oBAAoB,CAAA;QAC9C,IAAI3C,cAAc,GAAG,CAAC,MAAM4C,qBAAqB,EAAEjY,MAAM,CACvD,CAACkG,GAAG,EAAEN,CAAC,GAAKjF,MAAM,CAAC7F,MAAM,CAACoL,GAAG,EAAEN,CAAC,CAAC,EACjC,CAAA,CAAE,CACH,CAAA;QAED,MAAMD,OAAO,CAACuS,GAAG,CAAC;YAChBC,gCAAgC,CAC9Bvb,OAAO,EACPwY,aAAa,EACb/C,OAAO,CAACpM,MAAM,EACd8R,cAAc,EACd9iB,KAAK,CAACkI,UAAU,CACjB;YACDib,6BAA6B,CAACxb,OAAO,EAAEyY,cAAc,EAAEyC,cAAc,CAAC;SACvE,CAAC,CAAA;QAEF,OAAO;YACL1C,aAAa;YACbC,cAAAA;SACD,CAAA;IACH,CAAA;IAEA,SAASzD,oBAAoBA,GAAA;QAC3B,6CAAA;QACAhE,sBAAsB,GAAG,IAAI,CAAA;QAE7B,qEAAA;QACA,eAAA;QACAC,uBAAuB,CAAC7W,IAAI,CAAC,GAAG2d,qBAAqB,EAAE,CAAC,CAAA;QAExD,gCAAA;QACAvG,gBAAgB,CAAClQ,OAAO,CAAC,CAAC+D,CAAC,EAAEnM,GAAG,KAAI;YAClC,IAAIiY,gBAAgB,CAACnJ,GAAG,CAAC9O,GAAG,CAAC,EAAE;gBAC7BgY,qBAAqB,CAACxH,GAAG,CAACxQ,GAAG,CAAC,CAAA;gBAC9Bmf,YAAY,CAACnf,GAAG,CAAC,CAAA;YAClB,CAAA;QACH,CAAC,CAAC,CAAA;IACJ,CAAA;IAEA,SAASwgB,kBAAkBA,CACzBxgB,GAAW,EACXia,OAAgB,EAChBH,IAAAA,EAAkC;QAAA,IAAlCA,SAAAA,KAAAA,GAAAA;YAAAA,OAAgC,CAAA,CAAE,CAAA;QAAA,CAAA;QAElC3a,KAAK,CAACgY,QAAQ,CAACpI,GAAG,CAAC/O,GAAG,EAAEia,OAAO,CAAC,CAAA;QAChCd,WAAW,CACT;YAAEhC,QAAQ,EAAE,IAAIC,GAAG,CAACjY,KAAK,CAACgY,QAAQ,CAAA;QAAG,CAAA,EACrC;YAAEkD,SAAS,EAAE,CAACP,IAAI,IAAIA,IAAI,CAACO,SAAS,MAAM,IAAA;QAAM,CAAA,CACjD,CAAA;IACH,CAAA;IAEA,SAAS6F,eAAeA,CACtBlgB,GAAW,EACX8c,OAAe,EACfjY,KAAU,EACViV,IAAA,EAAkC;QAAA,IAAlCA,IAAA,KAAA,KAAA,CAAA,EAAA;YAAAA,IAAA,GAAgC,CAAA,CAAE,CAAA;QAAA,CAAA;QAElC,IAAIuE,aAAa,GAAG3B,mBAAmB,CAACvd,KAAK,CAAC2H,OAAO,EAAEgW,OAAO,CAAC,CAAA;QAC/DnD,aAAa,CAAC3Z,GAAG,CAAC,CAAA;QAClBmZ,WAAW,CACT;YACE3C,MAAM,EAAE;gBACN,CAAC6H,aAAa,CAAC7Y,KAAK,CAACQ,EAAE,CAAA,EAAGnB,KAAAA;aAC3B;YACDsS,QAAQ,EAAE,IAAIC,GAAG,CAACjY,KAAK,CAACgY,QAAQ,CAAA;QACjC,CAAA,EACD;YAAEkD,SAAS,EAAE,CAACP,IAAI,IAAIA,IAAI,CAACO,SAAS,MAAM,IAAA;QAAI,CAAE,CACjD,CAAA;IACH,CAAA;IAEA,SAASkI,UAAUA,CAAcviB,GAAW,EAAA;QAC1C,IAAI+U,MAAM,CAACC,iBAAiB,EAAE;YAC5BuD,cAAc,CAACxJ,GAAG,CAAC/O,GAAG,EAAE,CAACuY,cAAc,CAACxH,GAAG,CAAC/Q,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;YAC3D,yEAAA;YACA,sBAAA;YACA,IAAIwY,eAAe,CAAC1J,GAAG,CAAC9O,GAAG,CAAC,EAAE;gBAC5BwY,eAAe,CAACvH,MAAM,CAACjR,GAAG,CAAC,CAAA;YAC5B,CAAA;QACF,CAAA;QACD,OAAOb,KAAK,CAACgY,QAAQ,CAACpG,GAAG,CAAC/Q,GAAG,CAAC,IAAIyT,YAAY,CAAA;IAChD,CAAA;IAEA,SAASkG,aAAaA,CAAC3Z,GAAW,EAAA;QAChC,IAAIia,OAAO,GAAG9a,KAAK,CAACgY,QAAQ,CAACpG,GAAG,CAAC/Q,GAAG,CAAC,CAAA;QACrC,yEAAA;QACA,yEAAA;QACA,kDAAA;QACA,IACEiY,gBAAgB,CAACnJ,GAAG,CAAC9O,GAAG,CAAC,IACzB,CAAA,CAAEia,OAAO,IAAIA,OAAO,CAAC9a,KAAK,KAAK,SAAS,IAAIiZ,cAAc,CAACtJ,GAAG,CAAC9O,GAAG,CAAC,CAAC,EACpE;YACAmf,YAAY,CAACnf,GAAG,CAAC,CAAA;QAClB,CAAA;QACDsY,gBAAgB,CAACrH,MAAM,CAACjR,GAAG,CAAC,CAAA;QAC5BoY,cAAc,CAACnH,MAAM,CAACjR,GAAG,CAAC,CAAA;QAC1BqY,gBAAgB,CAACpH,MAAM,CAACjR,GAAG,CAAC,CAAA;QAC5BwY,eAAe,CAACvH,MAAM,CAACjR,GAAG,CAAC,CAAA;QAC3BgY,qBAAqB,CAAC/G,MAAM,CAACjR,GAAG,CAAC,CAAA;QACjCb,KAAK,CAACgY,QAAQ,CAAClG,MAAM,CAACjR,GAAG,CAAC,CAAA;IAC5B,CAAA;IAEA,SAASwiB,2BAA2BA,CAACxiB,GAAW,EAAA;QAC9C,IAAI+U,MAAM,CAACC,iBAAiB,EAAE;YAC5B,IAAIyN,KAAK,GAAG,CAAClK,cAAc,CAACxH,GAAG,CAAC/Q,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAC9C,IAAIyiB,KAAK,IAAI,CAAC,EAAE;gBACdlK,cAAc,CAACtH,MAAM,CAACjR,GAAG,CAAC,CAAA;gBAC1BwY,eAAe,CAAChI,GAAG,CAACxQ,GAAG,CAAC,CAAA;YACzB,CAAA,MAAM;gBACLuY,cAAc,CAACxJ,GAAG,CAAC/O,GAAG,EAAEyiB,KAAK,CAAC,CAAA;YAC/B,CAAA;QACF,CAAA,MAAM;YACL9I,aAAa,CAAC3Z,GAAG,CAAC,CAAA;QACnB,CAAA;QACDmZ,WAAW,CAAC;YAAEhC,QAAQ,EAAE,IAAIC,GAAG,CAACjY,KAAK,CAACgY,QAAQ,CAAA;QAAC,CAAE,CAAC,CAAA;IACpD,CAAA;IAEA,SAASgI,YAAYA,CAACnf,GAAW,EAAA;QAC/B,IAAI+P,UAAU,GAAGkI,gBAAgB,CAAClH,GAAG,CAAC/Q,GAAG,CAAC,CAAA;QAC1CmD,SAAS,CAAC4M,UAAU,EAAgC/P,6BAAAA,GAAAA,GAAK,CAAC,CAAA;QAC1D+P,UAAU,CAACyB,KAAK,EAAE,CAAA;QAClByG,gBAAgB,CAAChH,MAAM,CAACjR,GAAG,CAAC,CAAA;IAC9B,CAAA;IAEA,SAAS0iB,gBAAgBA,CAAC7H,IAAc,EAAA;QACtC,KAAK,IAAI7a,GAAG,IAAI6a,IAAI,CAAE;YACpB,IAAIZ,OAAO,GAAGsI,UAAU,CAACviB,GAAG,CAAC,CAAA;YAC7B,IAAImhB,WAAW,GAAGL,cAAc,CAAC7G,OAAO,CAAC1S,IAAI,CAAC,CAAA;YAC9CpI,KAAK,CAACgY,QAAQ,CAACpI,GAAG,CAAC/O,GAAG,EAAEmhB,WAAW,CAAC,CAAA;QACrC,CAAA;IACH,CAAA;IAEA,SAASpC,sBAAsBA,GAAA;QAC7B,IAAI4D,QAAQ,GAAG,EAAE,CAAA;QACjB,IAAI7D,eAAe,GAAG,KAAK,CAAA;QAC3B,KAAK,IAAI9e,GAAG,IAAIqY,gBAAgB,CAAE;YAChC,IAAI4B,OAAO,GAAG9a,KAAK,CAACgY,QAAQ,CAACpG,GAAG,CAAC/Q,GAAG,CAAC,CAAA;YACrCmD,SAAS,CAAC8W,OAAO,EAAuBja,oBAAAA,GAAAA,GAAK,CAAC,CAAA;YAC9C,IAAIia,OAAO,CAAC9a,KAAK,KAAK,SAAS,EAAE;gBAC/BkZ,gBAAgB,CAACpH,MAAM,CAACjR,GAAG,CAAC,CAAA;gBAC5B2iB,QAAQ,CAACzhB,IAAI,CAAClB,GAAG,CAAC,CAAA;gBAClB8e,eAAe,GAAG,IAAI,CAAA;YACvB,CAAA;QACF,CAAA;QACD4D,gBAAgB,CAACC,QAAQ,CAAC,CAAA;QAC1B,OAAO7D,eAAe,CAAA;IACxB,CAAA;IAEA,SAASe,oBAAoBA,CAAC+C,QAAgB,EAAA;QAC5C,IAAIC,UAAU,GAAG,EAAE,CAAA;QACnB,KAAK,IAAI,CAAC7iB,GAAG,EAAEgG,EAAE,CAAC,IAAIoS,cAAc,CAAE;YACpC,IAAIpS,EAAE,GAAG4c,QAAQ,EAAE;gBACjB,IAAI3I,OAAO,GAAG9a,KAAK,CAACgY,QAAQ,CAACpG,GAAG,CAAC/Q,GAAG,CAAC,CAAA;gBACrCmD,SAAS,CAAC8W,OAAO,EAAuBja,oBAAAA,GAAAA,GAAK,CAAC,CAAA;gBAC9C,IAAIia,OAAO,CAAC9a,KAAK,KAAK,SAAS,EAAE;oBAC/BggB,YAAY,CAACnf,GAAG,CAAC,CAAA;oBACjBoY,cAAc,CAACnH,MAAM,CAACjR,GAAG,CAAC,CAAA;oBAC1B6iB,UAAU,CAAC3hB,IAAI,CAAClB,GAAG,CAAC,CAAA;gBACrB,CAAA;YACF,CAAA;QACF,CAAA;QACD0iB,gBAAgB,CAACG,UAAU,CAAC,CAAA;QAC5B,OAAOA,UAAU,CAACvjB,MAAM,GAAG,CAAC,CAAA;IAC9B,CAAA;IAEA,SAASwjB,UAAUA,CAAC9iB,GAAW,EAAE4B,EAAmB,EAAA;QAClD,IAAImhB,OAAO,GAAY5jB,KAAK,CAACkY,QAAQ,CAACtG,GAAG,CAAC/Q,GAAG,CAAC,IAAI0T,YAAY,CAAA;QAE9D,IAAIgF,gBAAgB,CAAC3H,GAAG,CAAC/Q,GAAG,CAAC,KAAK4B,EAAE,EAAE;YACpC8W,gBAAgB,CAAC3J,GAAG,CAAC/O,GAAG,EAAE4B,EAAE,CAAC,CAAA;QAC9B,CAAA;QAED,OAAOmhB,OAAO,CAAA;IAChB,CAAA;IAEA,SAASnJ,aAAaA,CAAC5Z,GAAW,EAAA;QAChCb,KAAK,CAACkY,QAAQ,CAACpG,MAAM,CAACjR,GAAG,CAAC,CAAA;QAC1B0Y,gBAAgB,CAACzH,MAAM,CAACjR,GAAG,CAAC,CAAA;IAC9B,CAAA;IAEA,wEAAA;IACA,SAASkZ,aAAaA,CAAClZ,GAAW,EAAEgjB,UAAmB,EAAA;QACrD,IAAID,OAAO,GAAG5jB,KAAK,CAACkY,QAAQ,CAACtG,GAAG,CAAC/Q,GAAG,CAAC,IAAI0T,YAAY,CAAA;QAErD,6BAAA;QACA,yWAAA;QACAvQ,SAAS,CACN4f,OAAO,CAAC5jB,KAAK,KAAK,WAAW,IAAI6jB,UAAU,CAAC7jB,KAAK,KAAK,SAAS,IAC7D4jB,OAAO,CAAC5jB,KAAK,KAAK,SAAS,IAAI6jB,UAAU,CAAC7jB,KAAK,KAAK,SAAU,IAC9D4jB,OAAO,CAAC5jB,KAAK,KAAK,SAAS,IAAI6jB,UAAU,CAAC7jB,KAAK,KAAK,YAAa,IACjE4jB,OAAO,CAAC5jB,KAAK,KAAK,SAAS,IAAI6jB,UAAU,CAAC7jB,KAAK,KAAK,WAAY,IAChE4jB,OAAO,CAAC5jB,KAAK,KAAK,YAAY,IAAI6jB,UAAU,CAAC7jB,KAAK,KAAK,WAAY,EAAA,oCAAA,GACjC4jB,OAAO,CAAC5jB,KAAK,GAAA,MAAA,GAAO6jB,UAAU,CAAC7jB,KAAO,CAC5E,CAAA;QAED,IAAIkY,QAAQ,GAAG,IAAID,GAAG,CAACjY,KAAK,CAACkY,QAAQ,CAAC,CAAA;QACtCA,QAAQ,CAACtI,GAAG,CAAC/O,GAAG,EAAEgjB,UAAU,CAAC,CAAA;QAC7B7J,WAAW,CAAC;YAAE9B,QAAAA;QAAQ,CAAE,CAAC,CAAA;IAC3B,CAAA;IAEA,SAAS0B,qBAAqBA,CAAAkK,KAAA,EAQ7B;QAAA,IAR8B,EAC7BjK,eAAe,EACf5X,YAAY,EACZyV,aAAAA,EAKD,GAAAoM,KAAA,CAAA;QACC,IAAIvK,gBAAgB,CAAC9G,IAAI,KAAK,CAAC,EAAE;YAC/B,OAAA;QACD,CAAA;QAED,2EAAA;QACA,iDAAA;QACA,IAAI8G,gBAAgB,CAAC9G,IAAI,GAAG,CAAC,EAAE;YAC7BxR,OAAO,CAAC,KAAK,EAAE,8CAA8C,CAAC,CAAA;QAC/D,CAAA;QAED,IAAItB,OAAO,GAAG2Q,KAAK,CAACzB,IAAI,CAAC0K,gBAAgB,CAAC5Z,OAAO,EAAE,CAAC,CAAA;QACpD,IAAI,CAACga,UAAU,EAAEoK,eAAe,CAAC,GAAGpkB,OAAO,CAACA,OAAO,CAACQ,MAAM,GAAG,CAAC,CAAC,CAAA;QAC/D,IAAIyjB,OAAO,GAAG5jB,KAAK,CAACkY,QAAQ,CAACtG,GAAG,CAAC+H,UAAU,CAAC,CAAA;QAE5C,IAAIiK,OAAO,IAAIA,OAAO,CAAC5jB,KAAK,KAAK,YAAY,EAAE;YAC7C,oEAAA;YACA,0CAAA;YACA,OAAA;QACD,CAAA;QAED,yEAAA;QACA,iCAAA;QACA,IAAI+jB,eAAe,CAAC;YAAElK,eAAe;YAAE5X,YAAY;YAAEyV,aAAAA;QAAe,CAAA,CAAC,EAAE;YACrE,OAAOiC,UAAU,CAAA;QAClB,CAAA;IACH,CAAA;IAEA,SAASuD,qBAAqBA,CAAClc,QAAgB,EAAA;QAC7C,IAAI0E,KAAK,GAAGkR,sBAAsB,CAAC,GAAG,EAAE;YAAE5V,QAAAA;QAAU,CAAA,CAAC,CAAA;QACrD,IAAI+b,WAAW,GAAGzH,kBAAkB,IAAID,UAAU,CAAA;QAClD,IAAI,EAAE1N,OAAO,EAAEtB,KAAAA,EAAO,GAAGwQ,sBAAsB,CAACkG,WAAW,CAAC,CAAA;QAE5D,qEAAA;QACA2C,qBAAqB,EAAE,CAAA;QAEvB,OAAO;YAAEzC,eAAe,EAAEtV,OAAO;YAAEtB,KAAK;YAAEX,KAAAA;SAAO,CAAA;IACnD,CAAA;IAEA,SAAS6Y,wBAAwBA,CAC/Bvd,QAAgB,EAChBod,cAAyC,EAAA;QAEzC,OAAO;YACLE,UAAU,EAAEf,mBAAmB,CAACa,cAAc,CAACI,cAAc,CAAC,CAACnY,KAAK,CAACQ,EAAE;YACvEnB,KAAK,EAAEkR,sBAAsB,CAAC,GAAG,EAAE;gBACjC5G,IAAI,EAAE,iBAAiB;gBACvBhP,QAAQ;gBACRkD,OAAO,EACLka,cAAc,CAAC1Y,KAAK,IAAI,IAAI,IAAI,SAAS,IAAI0Y,cAAc,CAAC1Y,KAAK,GAC7D0Y,cAAc,CAAC1Y,KAAK,GACpBkB,MAAM,CAACwX,cAAc,CAAC1Y,KAAK,CAAA;aAClC,CAAA;SACF,CAAA;IACH,CAAA;IAEA,SAASga,qBAAqBA,CAC5BsE,SAAwC,EAAA;QAExC,IAAIC,iBAAiB,GAAa,EAAE,CAAA;QACpC3K,eAAe,CAACrQ,OAAO,CAAC,CAACib,GAAG,EAAEvG,OAAO,KAAI;YACvC,IAAI,CAACqG,SAAS,IAAIA,SAAS,CAACrG,OAAO,CAAC,EAAE;gBACpC,sEAAA;gBACA,uEAAA;gBACA,uCAAA;gBACAuG,GAAG,CAAC9R,MAAM,EAAE,CAAA;gBACZ6R,iBAAiB,CAACliB,IAAI,CAAC4b,OAAO,CAAC,CAAA;gBAC/BrE,eAAe,CAACxH,MAAM,CAAC6L,OAAO,CAAC,CAAA;YAChC,CAAA;QACH,CAAC,CAAC,CAAA;QACF,OAAOsG,iBAAiB,CAAA;IAC1B,CAAA;IAEA,yEAAA;IACA,4CAAA;IACA,SAASE,uBAAuBA,CAC9BC,SAAiC,EACjCC,WAAsC,EACtCC,MAAwC,EAAA;QAExCjO,oBAAoB,GAAG+N,SAAS,CAAA;QAChC7N,iBAAiB,GAAG8N,WAAW,CAAA;QAC/B/N,uBAAuB,GAAGgO,MAAM,IAAI,IAAI,CAAA;QAExC,0EAAA;QACA,gFAAA;QACA,uDAAA;QACA,IAAI,CAAC9N,qBAAqB,IAAIxW,KAAK,CAAC2X,UAAU,KAAK3D,eAAe,EAAE;YAClEwC,qBAAqB,GAAG,IAAI,CAAA;YAC5B,IAAI+N,CAAC,GAAGzI,sBAAsB,CAAC9b,KAAK,CAACc,QAAQ,EAAEd,KAAK,CAAC2H,OAAO,CAAC,CAAA;YAC7D,IAAI4c,CAAC,IAAI,IAAI,EAAE;gBACbvK,WAAW,CAAC;oBAAEpC,qBAAqB,EAAE2M,CAAAA;gBAAC,CAAE,CAAC,CAAA;YAC1C,CAAA;QACF,CAAA;QAED,OAAO,MAAK;YACVlO,oBAAoB,GAAG,IAAI,CAAA;YAC3BE,iBAAiB,GAAG,IAAI,CAAA;YACxBD,uBAAuB,GAAG,IAAI,CAAA;SAC/B,CAAA;IACH,CAAA;IAEA,SAASkO,YAAYA,CAAC1jB,QAAkB,EAAE6G,OAAiC,EAAA;QACzE,IAAI2O,uBAAuB,EAAE;YAC3B,IAAIzV,GAAG,GAAGyV,uBAAuB,CAC/BxV,QAAQ,EACR6G,OAAO,CAAC/H,GAAG,EAAEsX,CAAC,GAAKlP,0BAA0B,CAACkP,CAAC,EAAElX,KAAK,CAACkI,UAAU,CAAC,CAAC,CACpE,CAAA;YACD,OAAOrH,GAAG,IAAIC,QAAQ,CAACD,GAAG,CAAA;QAC3B,CAAA;QACD,OAAOC,QAAQ,CAACD,GAAG,CAAA;IACrB,CAAA;IAEA,SAASic,kBAAkBA,CACzBhc,QAAkB,EAClB6G,OAAiC,EAAA;QAEjC,IAAI0O,oBAAoB,IAAIE,iBAAiB,EAAE;YAC7C,IAAI1V,GAAG,GAAG2jB,YAAY,CAAC1jB,QAAQ,EAAE6G,OAAO,CAAC,CAAA;YACzC0O,oBAAoB,CAACxV,GAAG,CAAC,GAAG0V,iBAAiB,EAAE,CAAA;QAChD,CAAA;IACH,CAAA;IAEA,SAASuF,sBAAsBA,CAC7Bhb,QAAkB,EAClB6G,OAAiC,EAAA;QAEjC,IAAI0O,oBAAoB,EAAE;YACxB,IAAIxV,GAAG,GAAG2jB,YAAY,CAAC1jB,QAAQ,EAAE6G,OAAO,CAAC,CAAA;YACzC,IAAI4c,CAAC,GAAGlO,oBAAoB,CAACxV,GAAG,CAAC,CAAA;YACjC,IAAI,OAAO0jB,CAAC,KAAK,QAAQ,EAAE;gBACzB,OAAOA,CAAC,CAAA;YACT,CAAA;QACF,CAAA;QACD,OAAO,IAAI,CAAA;IACb,CAAA;IAEA,SAASxN,aAAaA,CACpBpP,OAAwC,EACxCoV,WAAsC,EACtC/b,QAAgB,EAAA;QAEhB,IAAI0U,2BAA2B,EAAE;YAC/B,oEAAA;YACA,mEAAA;YACA,sDAAA;YACA,IAAIU,gBAAgB,CAACzG,GAAG,CAAC3O,QAAQ,CAAC,EAAE;gBAClC,OAAO;oBAAEgW,MAAM,EAAE,KAAK;oBAAErP,OAAAA;iBAAS,CAAA;YAClC,CAAA;YAED,IAAI,CAACA,OAAO,EAAE;gBACZ,IAAI8c,UAAU,GAAGpd,eAAe,CAC9B0V,WAAW,EACX/b,QAAQ,EACRoG,QAAQ,EACR,IAAI,CACL,CAAA;gBAED,OAAO;oBAAE4P,MAAM,EAAE,IAAI;oBAAErP,OAAO,EAAE8c,UAAU,IAAI,EAAA;iBAAI,CAAA;YACnD,CAAA,MAAM;gBACL,IAAI/Y,MAAM,CAACgQ,IAAI,CAAC/T,OAAO,CAAC,CAAC,CAAC,CAACQ,MAAM,CAAC,CAAChI,MAAM,GAAG,CAAC,EAAE;oBAC7C,qEAAA;oBACA,iEAAA;oBACA,8DAAA;oBACA,IAAIqe,cAAc,GAAGnX,eAAe,CAClC0V,WAAW,EACX/b,QAAQ,EACRoG,QAAQ,EACR,IAAI,CACL,CAAA;oBACD,OAAO;wBAAE4P,MAAM,EAAE,IAAI;wBAAErP,OAAO,EAAE6W,cAAAA;qBAAgB,CAAA;gBACjD,CAAA;YACF,CAAA;QACF,CAAA;QAED,OAAO;YAAExH,MAAM,EAAE,KAAK;YAAErP,OAAO,EAAE,IAAA;SAAM,CAAA;IACzC,CAAA;IAiBA,eAAe0W,cAAcA,CAC3B1W,OAAiC,EACjC3G,QAAgB,EAChBgQ,MAAmB,EAAA;QAEnB,IAAIwN,cAAc,GAAoC7W,OAAO,CAAA;QAC7D,MAAO,IAAI,CAAE;YACX,IAAI+c,QAAQ,GAAGpP,kBAAkB,IAAI,IAAI,CAAA;YACzC,IAAIyH,WAAW,GAAGzH,kBAAkB,IAAID,UAAU,CAAA;YAClD,IAAI;gBACF,MAAMsP,qBAAqB,CACzBjP,2BAA4B,EAC5B1U,QAAQ,EACRwd,cAAc,EACdzB,WAAW,EACXrW,QAAQ,EACRF,kBAAkB,EAClBgT,kBAAkB,EAClBxI,MAAM,CACP,CAAA;aACF,CAAC,OAAOzM,CAAC,EAAE;gBACV,OAAO;oBAAEyL,IAAI,EAAE,OAAO;oBAAEtK,KAAK,EAAEnB,CAAC;oBAAEia,cAAAA;iBAAgB,CAAA;YACnD,CAAA,QAAS;gBACR,wEAAA;gBACA,wEAAA;gBACA,mEAAA;gBACA,6DAAA;gBACA,gEAAA;gBACA,+CAAA;gBACA,IAAIkG,QAAQ,EAAE;oBACZrP,UAAU,GAAG,CAAC;2BAAGA,UAAU;qBAAC,CAAA;gBAC7B,CAAA;YACF,CAAA;YAED,IAAIrE,MAAM,CAACa,OAAO,EAAE;gBAClB,OAAO;oBAAE7B,IAAI,EAAE,SAAA;iBAAW,CAAA;YAC3B,CAAA;YAED,IAAI4U,UAAU,GAAG1d,WAAW,CAAC6V,WAAW,EAAE/b,QAAQ,EAAEoG,QAAQ,CAAC,CAAA;YAC7D,IAAIwd,UAAU,EAAE;gBACdC,cAAc,CAAC7jB,QAAQ,EAAEoV,gBAAgB,CAAC,CAAA;gBAC1C,OAAO;oBAAEpG,IAAI,EAAE,SAAS;oBAAErI,OAAO,EAAEid,UAAAA;iBAAY,CAAA;YAChD,CAAA;YAED,IAAIE,iBAAiB,GAAGzd,eAAe,CACrC0V,WAAW,EACX/b,QAAQ,EACRoG,QAAQ,EACR,IAAI,CACL,CAAA;YAED,qEAAA;YACA,IACE,CAAC0d,iBAAiB,IACjBtG,cAAc,CAACre,MAAM,KAAK2kB,iBAAiB,CAAC3kB,MAAM,IACjDqe,cAAc,CAACrT,KAAK,CAClB,CAAC+L,CAAC,EAAEtP,CAAC,GAAKsP,CAAC,CAAC7Q,KAAK,CAACQ,EAAE,KAAKie,iBAAkB,CAACld,CAAC,CAAC,CAACvB,KAAK,CAACQ,EAAE,CACvD,EACJ;gBACAge,cAAc,CAAC7jB,QAAQ,EAAEoV,gBAAgB,CAAC,CAAA;gBAC1C,OAAO;oBAAEpG,IAAI,EAAE,SAAS;oBAAErI,OAAO,EAAE,IAAA;iBAAM,CAAA;YAC1C,CAAA;YAED6W,cAAc,GAAGsG,iBAAiB,CAAA;QACnC,CAAA;IACH,CAAA;IAEA,SAASD,cAAcA,CAACljB,IAAY,EAAEojB,KAAkB,EAAA;QACtD,IAAIA,KAAK,CAACtS,IAAI,IAAI0D,uBAAuB,EAAE;YACzC,IAAI3M,KAAK,GAAGub,KAAK,CAACC,MAAM,EAAE,CAACC,IAAI,EAAE,CAAChhB,KAAK,CAAA;YACvC8gB,KAAK,CAACjT,MAAM,CAACtI,KAAK,CAAC,CAAA;QACpB,CAAA;QACDub,KAAK,CAAC1T,GAAG,CAAC1P,IAAI,CAAC,CAAA;IACjB,CAAA;IAEA,SAASujB,kBAAkBA,CAACC,SAAoC,EAAA;QAC9Dze,QAAQ,GAAG,CAAA,CAAE,CAAA;QACb4O,kBAAkB,GAAGhP,yBAAyB,CAC5C6e,SAAS,EACT3e,kBAAkB,EAClBvG,SAAS,EACTyG,QAAQ,CACT,CAAA;IACH,CAAA;IAEA,SAAS0e,WAAWA,CAClBzH,OAAsB,EACtB5W,QAA+B,EAAA;QAE/B,IAAI2d,QAAQ,GAAGpP,kBAAkB,IAAI,IAAI,CAAA;QACzC,IAAIyH,WAAW,GAAGzH,kBAAkB,IAAID,UAAU,CAAA;QAClDgQ,eAAe,CACb1H,OAAO,EACP5W,QAAQ,EACRgW,WAAW,EACXrW,QAAQ,EACRF,kBAAkB,CACnB,CAAA;QAED,wEAAA;QACA,wEAAA;QACA,mDAAA;QACA,gEAAA;QACA,+CAAA;QACA,IAAIke,QAAQ,EAAE;YACZrP,UAAU,GAAG,CAAC;mBAAGA,UAAU;aAAC,CAAA;YAC5B2E,WAAW,CAAC,CAAA,CAAE,CAAC,CAAA;QAChB,CAAA;IACH,CAAA;IAEAvC,MAAM,GAAG;QACP,IAAIrQ,QAAQA,IAAA;YACV,OAAOA,QAAQ,CAAA;SAChB;QACD,IAAIwO,MAAMA,IAAA;YACR,OAAOA,MAAM,CAAA;SACd;QACD,IAAI5V,KAAKA,IAAA;YACP,OAAOA,KAAK,CAAA;SACb;QACD,IAAIuG,MAAMA,IAAA;YACR,OAAO8O,UAAU,CAAA;SAClB;QACD,IAAIzS,MAAMA,IAAA;YACR,OAAOoS,YAAY,CAAA;SACpB;QACD0E,UAAU;QACVvH,SAAS;QACTgS,uBAAuB;QACvBpI,QAAQ;QACR+E,KAAK;QACLpE,UAAU;QACV,2EAAA;QACA,+BAAA;QACArb,UAAU,GAAGT,EAAM,GAAK0O,IAAI,CAAC/N,OAAO,CAACF,UAAU,CAACT,EAAE,CAAC;QACnDc,cAAc,GAAGd,EAAM,GAAK0O,IAAI,CAAC/N,OAAO,CAACG,cAAc,CAACd,EAAE,CAAC;QAC3DwiB,UAAU;QACV5I,aAAa,EAAE6I,2BAA2B;QAC1C/I,OAAO;QACPqJ,UAAU;QACVlJ,aAAa;QACb2K,WAAW;QACXE,yBAAyB,EAAExM,gBAAgB;QAC3CyM,wBAAwB,EAAEjM,eAAe;QACzC,+DAAA;QACA,2DAAA;QACA4L,kBAAAA;KACD,CAAA;IAED,OAAOzN,MAAM,CAAA;AACf,CAAA;AACA,YAAA;AAEA,gFAAA;AACA,6BAAA;AACA,gFAAA;MAEa+N,sBAAsB,GAAGC,MAAM,CAAC,UAAU,EAAC;AAoBxC,SAAAC,mBAAmBA,CACjCnf,MAA6B,EAC7BoU,IAAiC,EAAA;IAEjC3W,SAAS,CACPuC,MAAM,CAACpG,MAAM,GAAG,CAAC,EACjB,kEAAkE,CACnE,CAAA;IAED,IAAIuG,QAAQ,GAAkB,CAAA,CAAE,CAAA;IAChC,IAAIU,QAAQ,GAAG,CAACuT,IAAI,GAAGA,IAAI,CAACvT,QAAQ,GAAG,IAAI,KAAK,GAAG,CAAA;IACnD,IAAIZ,kBAA8C,CAAA;IAClD,IAAImU,IAAI,IAAA,IAAA,IAAJA,IAAI,CAAEnU,kBAAkB,EAAE;QAC5BA,kBAAkB,GAAGmU,IAAI,CAACnU,kBAAkB,CAAA;IAC7C,CAAA,MAAM,IAAImU,IAAI,IAAA,QAAJA,IAAI,CAAEvF,mBAAmB,EAAE;QACpC,2EAAA;QACA,IAAIA,mBAAmB,GAAGuF,IAAI,CAACvF,mBAAmB,CAAA;QAClD5O,kBAAkB,IAAIH,KAAK,GAAA,CAAM;gBAC/BuO,gBAAgB,EAAEQ,mBAAmB,CAAC/O,KAAK,CAAA;YAC5C,CAAA,CAAC,CAAA;IACH,CAAA,MAAM;QACLG,kBAAkB,GAAGmO,yBAAyB,CAAA;IAC/C,CAAA;IACD,+BAAA;IACA,IAAIiB,MAAM,GAAA9Q,QAAA,CAAA;QACRuJ,oBAAoB,EAAE,KAAK;QAC3BsX,mBAAmB,EAAE,KAAA;IAAK,CAAA,EACtBhL,IAAI,GAAGA,IAAI,CAAC/E,MAAM,GAAG,IAAI,CAC9B,CAAA;IAED,IAAIP,UAAU,GAAG/O,yBAAyB,CACxCC,MAAM,EACNC,kBAAkB,EAClBvG,SAAS,EACTyG,QAAQ,CACT,CAAA;IAED;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG,GACH,eAAekf,KAAKA,CAClBxI,OAAgB,EAAAyI,MAAA,EASV;QAAA,IARN,EACEC,cAAc,EACdC,uBAAuB,EACvBvQ,qBAAAA,EAAqB,GAAAqQ,MAAA,KAAA,KAAA,CAAA,GAKnB,CAAA,CAAE,GAAAA,MAAA,CAAA;QAEN,IAAIliB,GAAG,GAAG,IAAIlC,GAAG,CAAC2b,OAAO,CAACzZ,GAAG,CAAC,CAAA;QAC9B,IAAIgb,MAAM,GAAGvB,OAAO,CAACuB,MAAM,CAAA;QAC3B,IAAI7d,QAAQ,GAAGC,cAAc,CAAC,EAAE,EAAEO,UAAU,CAACqC,GAAG,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,CAAA;QACnE,IAAIgE,OAAO,GAAGT,WAAW,CAACmO,UAAU,EAAEvU,QAAQ,EAAEsG,QAAQ,CAAC,CAAA;QAEzD,+CAAA;QACA,IAAI,CAAC4e,aAAa,CAACrH,MAAM,CAAC,IAAIA,MAAM,KAAK,MAAM,EAAE;YAC/C,IAAIjZ,KAAK,GAAGkR,sBAAsB,CAAC,GAAG,EAAE;gBAAE+H,MAAAA;YAAQ,CAAA,CAAC,CAAA;YACnD,IAAI,EAAEhX,OAAO,EAAEse,uBAAuB,EAAE5f,KAAAA,EAAO,GAC7CwQ,sBAAsB,CAACxB,UAAU,CAAC,CAAA;YACpC,OAAO;gBACLjO,QAAQ;gBACRtG,QAAQ;gBACR6G,OAAO,EAAEse,uBAAuB;gBAChC/d,UAAU,EAAE,CAAA,CAAE;gBACd6P,UAAU,EAAE,IAAI;gBAChBV,MAAM,EAAE;oBACN,CAAChR,KAAK,CAACQ,EAAE,CAAA,EAAGnB,KAAAA;iBACb;gBACDwgB,UAAU,EAAExgB,KAAK,CAAC8J,MAAM;gBACxB2W,aAAa,EAAE,CAAA,CAAE;gBACjBC,aAAa,EAAE,CAAA,CAAE;gBACjB9M,eAAe,EAAE,IAAA;aAClB,CAAA;QACF,CAAA,MAAM,IAAI,CAAC3R,OAAO,EAAE;YACnB,IAAIjC,KAAK,GAAGkR,sBAAsB,CAAC,GAAG,EAAE;gBAAE5V,QAAQ,EAAEF,QAAQ,CAACE,QAAAA;YAAQ,CAAE,CAAC,CAAA;YACxE,IAAI,EAAE2G,OAAO,EAAEsV,eAAe,EAAE5W,KAAAA,EAAO,GACrCwQ,sBAAsB,CAACxB,UAAU,CAAC,CAAA;YACpC,OAAO;gBACLjO,QAAQ;gBACRtG,QAAQ;gBACR6G,OAAO,EAAEsV,eAAe;gBACxB/U,UAAU,EAAE,CAAA,CAAE;gBACd6P,UAAU,EAAE,IAAI;gBAChBV,MAAM,EAAE;oBACN,CAAChR,KAAK,CAACQ,EAAE,CAAA,EAAGnB,KAAAA;iBACb;gBACDwgB,UAAU,EAAExgB,KAAK,CAAC8J,MAAM;gBACxB2W,aAAa,EAAE,CAAA,CAAE;gBACjBC,aAAa,EAAE,CAAA,CAAE;gBACjB9M,eAAe,EAAE,IAAA;aAClB,CAAA;QACF,CAAA;QAED,IAAIxP,MAAM,GAAG,MAAMuc,SAAS,CAC1BjJ,OAAO,EACPtc,QAAQ,EACR6G,OAAO,EACPme,cAAc,EACdtQ,qBAAqB,IAAI,IAAI,EAC7BuQ,uBAAuB,KAAK,IAAI,EAChC,IAAI,CACL,CAAA;QACD,IAAIO,UAAU,CAACxc,MAAM,CAAC,EAAE;YACtB,OAAOA,MAAM,CAAA;QACd,CAAA;QAED,0EAAA;QACA,0EAAA;QACA,6DAAA;QACA,OAAAhF,QAAA,CAAA;YAAShE,QAAQ;YAAEsG,QAAAA;QAAQ,CAAA,EAAK0C,MAAM,CAAA,CAAA;IACxC,CAAA;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG,GACH,eAAeyc,UAAUA,CACvBnJ,OAAgB,EAAAoJ,MAAA,EASV;QAAA,IARN,EACE7I,OAAO,EACPmI,cAAc,EACdtQ,qBAAAA,EAAqB,GAAAgR,MAAA,KAAA,KAAA,CAAA,GAKnB,CAAA,CAAE,GAAAA,MAAA,CAAA;QAEN,IAAI7iB,GAAG,GAAG,IAAIlC,GAAG,CAAC2b,OAAO,CAACzZ,GAAG,CAAC,CAAA;QAC9B,IAAIgb,MAAM,GAAGvB,OAAO,CAACuB,MAAM,CAAA;QAC3B,IAAI7d,QAAQ,GAAGC,cAAc,CAAC,EAAE,EAAEO,UAAU,CAACqC,GAAG,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,CAAA;QACnE,IAAIgE,OAAO,GAAGT,WAAW,CAACmO,UAAU,EAAEvU,QAAQ,EAAEsG,QAAQ,CAAC,CAAA;QAEzD,+CAAA;QACA,IAAI,CAAC4e,aAAa,CAACrH,MAAM,CAAC,IAAIA,MAAM,KAAK,MAAM,IAAIA,MAAM,KAAK,SAAS,EAAE;YACvE,MAAM/H,sBAAsB,CAAC,GAAG,EAAE;gBAAE+H,MAAAA;YAAM,CAAE,CAAC,CAAA;QAC9C,CAAA,MAAM,IAAI,CAAChX,OAAO,EAAE;YACnB,MAAMiP,sBAAsB,CAAC,GAAG,EAAE;gBAAE5V,QAAQ,EAAEF,QAAQ,CAACE,QAAAA;YAAU,CAAA,CAAC,CAAA;QACnE,CAAA;QAED,IAAIiH,KAAK,GAAG0V,OAAO,GACfhW,OAAO,CAAC8e,IAAI,EAAEvP,CAAC,GAAKA,CAAC,CAAC7Q,KAAK,CAACQ,EAAE,KAAK8W,OAAO,CAAC,GAC3Ce,cAAc,CAAC/W,OAAO,EAAE7G,QAAQ,CAAC,CAAA;QAErC,IAAI6c,OAAO,IAAI,CAAC1V,KAAK,EAAE;YACrB,MAAM2O,sBAAsB,CAAC,GAAG,EAAE;gBAChC5V,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;gBAC3B2c,OAAAA;YACD,CAAA,CAAC,CAAA;QACH,CAAA,MAAM,IAAI,CAAC1V,KAAK,EAAE;YACjB,uCAAA;YACA,MAAM2O,sBAAsB,CAAC,GAAG,EAAE;gBAAE5V,QAAQ,EAAEF,QAAQ,CAACE,QAAAA;YAAU,CAAA,CAAC,CAAA;QACnE,CAAA;QAED,IAAI8I,MAAM,GAAG,MAAMuc,SAAS,CAC1BjJ,OAAO,EACPtc,QAAQ,EACR6G,OAAO,EACPme,cAAc,EACdtQ,qBAAqB,IAAI,IAAI,EAC7B,KAAK,EACLvN,KAAK,CACN,CAAA;QAED,IAAIqe,UAAU,CAACxc,MAAM,CAAC,EAAE;YACtB,OAAOA,MAAM,CAAA;QACd,CAAA;QAED,IAAIpE,KAAK,GAAGoE,MAAM,CAACuN,MAAM,GAAG3L,MAAM,CAACsZ,MAAM,CAAClb,MAAM,CAACuN,MAAM,CAAC,CAAC,CAAC,CAAC,GAAGpX,SAAS,CAAA;QACvE,IAAIyF,KAAK,KAAKzF,SAAS,EAAE;YACvB,mEAAA;YACA,uEAAA;YACA,sEAAA;YACA,mDAAA;YACA,MAAMyF,KAAK,CAAA;QACZ,CAAA;QAED,2CAAA;QACA,IAAIoE,MAAM,CAACiO,UAAU,EAAE;YACrB,OAAOrM,MAAM,CAACsZ,MAAM,CAAClb,MAAM,CAACiO,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA;QAC3C,CAAA;QAED,IAAIjO,MAAM,CAAC5B,UAAU,EAAE;YAAA,IAAAwe,qBAAA,CAAA;YACrB,IAAIte,IAAI,GAAGsD,MAAM,CAACsZ,MAAM,CAAClb,MAAM,CAAC5B,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA;YAC9C,IAAA,CAAAwe,qBAAA,GAAI5c,MAAM,CAACwP,eAAe,KAAtBoN,IAAAA,IAAAA,qBAAA,CAAyBze,KAAK,CAAC5B,KAAK,CAACQ,EAAE,CAAC,EAAE;gBAC5CuB,IAAI,CAACod,sBAAsB,CAAC,GAAG1b,MAAM,CAACwP,eAAe,CAACrR,KAAK,CAAC5B,KAAK,CAACQ,EAAE,CAAC,CAAA;YACtE,CAAA;YACD,OAAOuB,IAAI,CAAA;QACZ,CAAA;QAED,OAAOnI,SAAS,CAAA;IAClB,CAAA;IAEA,eAAeomB,SAASA,CACtBjJ,OAAgB,EAChBtc,QAAkB,EAClB6G,OAAiC,EACjCme,cAAuB,EACvBtQ,qBAAkD,EAClDuQ,uBAAgC,EAChCY,UAAyC,EAAA;QAEzC3iB,SAAS,CACPoZ,OAAO,CAACpM,MAAM,EACd,sEAAsE,CACvE,CAAA;QAED,IAAI;YACF,IAAIwK,gBAAgB,CAAC4B,OAAO,CAACuB,MAAM,CAACvR,WAAW,EAAE,CAAC,EAAE;gBAClD,IAAItD,MAAM,GAAG,MAAM8c,MAAM,CACvBxJ,OAAO,EACPzV,OAAO,EACPgf,UAAU,IAAIjI,cAAc,CAAC/W,OAAO,EAAE7G,QAAQ,CAAC,EAC/CglB,cAAc,EACdtQ,qBAAqB,EACrBuQ,uBAAuB,EACvBY,UAAU,IAAI,IAAI,CACnB,CAAA;gBACD,OAAO7c,MAAM,CAAA;YACd,CAAA;YAED,IAAIA,MAAM,GAAG,MAAM+c,aAAa,CAC9BzJ,OAAO,EACPzV,OAAO,EACPme,cAAc,EACdtQ,qBAAqB,EACrBuQ,uBAAuB,EACvBY,UAAU,CACX,CAAA;YACD,OAAOL,UAAU,CAACxc,MAAM,CAAC,GACrBA,MAAM,GAAAhF,QAAA,CAAA,CAAA,CAAA,EAEDgF,MAAM,EAAA;gBACTiO,UAAU,EAAE,IAAI;gBAChBqO,aAAa,EAAE,CAAA,CAAE;aAClB,CAAA,CAAA;SACN,CAAC,OAAO7hB,CAAC,EAAE;YACV,oEAAA;YACA,yEAAA;YACA,6DAAA;YACA,IAAIuiB,oBAAoB,CAACviB,CAAC,CAAC,IAAI+hB,UAAU,CAAC/hB,CAAC,CAACuF,MAAM,CAAC,EAAE;gBACnD,IAAIvF,CAAC,CAACyL,IAAI,KAAK/J,UAAU,CAACP,KAAK,EAAE;oBAC/B,MAAMnB,CAAC,CAACuF,MAAM,CAAA;gBACf,CAAA;gBACD,OAAOvF,CAAC,CAACuF,MAAM,CAAA;YAChB,CAAA;YACD,oEAAA;YACA,aAAA;YACA,IAAIid,kBAAkB,CAACxiB,CAAC,CAAC,EAAE;gBACzB,OAAOA,CAAC,CAAA;YACT,CAAA;YACD,MAAMA,CAAC,CAAA;QACR,CAAA;IACH,CAAA;IAEA,eAAeqiB,MAAMA,CACnBxJ,OAAgB,EAChBzV,OAAiC,EACjC8W,WAAmC,EACnCqH,cAAuB,EACvBtQ,qBAAkD,EAClDuQ,uBAAgC,EAChCiB,cAAuB,EAAA;QAEvB,IAAIld,MAAkB,CAAA;QAEtB,IAAI,CAAC2U,WAAW,CAACpY,KAAK,CAACjG,MAAM,IAAI,CAACqe,WAAW,CAACpY,KAAK,CAAC8Q,IAAI,EAAE;YACxD,IAAIzR,KAAK,GAAGkR,sBAAsB,CAAC,GAAG,EAAE;gBACtC+H,MAAM,EAAEvB,OAAO,CAACuB,MAAM;gBACtB3d,QAAQ,EAAE,IAAIS,GAAG,CAAC2b,OAAO,CAACzZ,GAAG,CAAC,CAAC3C,QAAQ;gBACvC2c,OAAO,EAAEc,WAAW,CAACpY,KAAK,CAACQ,EAAAA;YAC5B,CAAA,CAAC,CAAA;YACF,IAAImgB,cAAc,EAAE;gBAClB,MAAMthB,KAAK,CAAA;YACZ,CAAA;YACDoE,MAAM,GAAG;gBACPkG,IAAI,EAAE/J,UAAU,CAACP,KAAK;gBACtBA,KAAAA;aACD,CAAA;QACF,CAAA,MAAM;YACL,IAAIkZ,OAAO,GAAG,MAAMC,gBAAgB,CAClC,QAAQ,EACRzB,OAAO,EACP;gBAACqB,WAAW;aAAC,EACb9W,OAAO,EACPqf,cAAc,EACdlB,cAAc,EACdtQ,qBAAqB,CACtB,CAAA;YACD1L,MAAM,GAAG8U,OAAO,CAACH,WAAW,CAACpY,KAAK,CAACQ,EAAE,CAAC,CAAA;YAEtC,IAAIuW,OAAO,CAACpM,MAAM,CAACa,OAAO,EAAE;gBAC1BoV,8BAA8B,CAAC7J,OAAO,EAAE4J,cAAc,EAAEpR,MAAM,CAAC,CAAA;YAChE,CAAA;QACF,CAAA;QAED,IAAIkJ,gBAAgB,CAAChV,MAAM,CAAC,EAAE;YAC5B,sEAAA;YACA,wEAAA;YACA,uEAAA;YACA,sBAAA;YACA,MAAM,IAAI+F,QAAQ,CAAC,IAAI,EAAE;gBACvBL,MAAM,EAAE1F,MAAM,CAACuJ,QAAQ,CAAC7D,MAAM;gBAC9BC,OAAO,EAAE;oBACPyX,QAAQ,EAAEpd,MAAM,CAACuJ,QAAQ,CAAC5D,OAAO,CAACmC,GAAG,CAAC,UAAU,CAAA;gBACjD,CAAA;YACF,CAAA,CAAC,CAAA;QACH,CAAA;QAED,IAAIqN,gBAAgB,CAACnV,MAAM,CAAC,EAAE;YAC5B,IAAIpE,KAAK,GAAGkR,sBAAsB,CAAC,GAAG,EAAE;gBAAE5G,IAAI,EAAE,cAAA;YAAgB,CAAA,CAAC,CAAA;YACjE,IAAIgX,cAAc,EAAE;gBAClB,MAAMthB,KAAK,CAAA;YACZ,CAAA;YACDoE,MAAM,GAAG;gBACPkG,IAAI,EAAE/J,UAAU,CAACP,KAAK;gBACtBA,KAAAA;aACD,CAAA;QACF,CAAA;QAED,IAAIshB,cAAc,EAAE;YAClB,sEAAA;YACA,0EAAA;YACA,IAAIpJ,aAAa,CAAC9T,MAAM,CAAC,EAAE;gBACzB,MAAMA,MAAM,CAACpE,KAAK,CAAA;YACnB,CAAA;YAED,OAAO;gBACLiC,OAAO,EAAE;oBAAC8W,WAAW;iBAAC;gBACtBvW,UAAU,EAAE,CAAA,CAAE;gBACd6P,UAAU,EAAE;oBAAE,CAAC0G,WAAW,CAACpY,KAAK,CAACQ,EAAE,CAAA,EAAGiD,MAAM,CAAC1B,IAAAA;iBAAM;gBACnDiP,MAAM,EAAE,IAAI;gBACZ,mEAAA;gBACA,mCAAA;gBACA6O,UAAU,EAAE,GAAG;gBACfC,aAAa,EAAE,CAAA,CAAE;gBACjBC,aAAa,EAAE,CAAA,CAAE;gBACjB9M,eAAe,EAAE,IAAA;aAClB,CAAA;QACF,CAAA;QAED,uCAAA;QACA,IAAI6N,aAAa,GAAG,IAAIC,OAAO,CAAChK,OAAO,CAACzZ,GAAG,EAAE;YAC3C8L,OAAO,EAAE2N,OAAO,CAAC3N,OAAO;YACxB0D,QAAQ,EAAEiK,OAAO,CAACjK,QAAQ;YAC1BnC,MAAM,EAAEoM,OAAO,CAACpM,MAAAA;QACjB,CAAA,CAAC,CAAA;QAEF,IAAI4M,aAAa,CAAC9T,MAAM,CAAC,EAAE;YACzB,qEAAA;YACA,6DAAA;YACA,IAAIoV,aAAa,GAAG6G,uBAAuB,GACvCtH,WAAW,GACXlB,mBAAmB,CAAC5V,OAAO,EAAE8W,WAAW,CAACpY,KAAK,CAACQ,EAAE,CAAC,CAAA;YAEtD,IAAIwgB,OAAO,GAAG,MAAMR,aAAa,CAC/BM,aAAa,EACbxf,OAAO,EACPme,cAAc,EACdtQ,qBAAqB,EACrBuQ,uBAAuB,EACvB,IAAI,EACJ;gBAAC7G,aAAa,CAAC7Y,KAAK,CAACQ,EAAE;gBAAEiD,MAAM;aAAC,CACjC,CAAA;YAED,+DAAA;YACA,OAAAhF,QAAA,CAAA,CAAA,GACKuiB,OAAO,EAAA;gBACVnB,UAAU,EAAEzS,oBAAoB,CAAC3J,MAAM,CAACpE,KAAK,CAAC,GAC1CoE,MAAM,CAACpE,KAAK,CAAC8J,MAAM,GACnB1F,MAAM,CAACoc,UAAU,IAAI,IAAI,GACzBpc,MAAM,CAACoc,UAAU,GACjB,GAAG;gBACPnO,UAAU,EAAE,IAAI;gBAChBqO,aAAa,EAAAthB,QAAA,CAAA,CAAA,CAAA,EACPgF,MAAM,CAAC2F,OAAO,GAAG;oBAAE,CAACgP,WAAW,CAACpY,KAAK,CAACQ,EAAE,CAAA,EAAGiD,MAAM,CAAC2F,OAAAA;iBAAS,GAAG,CAAA,CAAE,CAAA;YACrE,CAAA,CAAA,CAAA;QAEJ,CAAA;QAED,IAAI4X,OAAO,GAAG,MAAMR,aAAa,CAC/BM,aAAa,EACbxf,OAAO,EACPme,cAAc,EACdtQ,qBAAqB,EACrBuQ,uBAAuB,EACvB,IAAI,CACL,CAAA;QAED,OAAAjhB,QAAA,CAAA,CAAA,GACKuiB,OAAO,EAAA;YACVtP,UAAU,EAAE;gBACV,CAAC0G,WAAW,CAACpY,KAAK,CAACQ,EAAE,CAAA,EAAGiD,MAAM,CAAC1B,IAAAA;YAChC,CAAA;SAEG0B,EAAAA,MAAM,CAACoc,UAAU,GAAG;YAAEA,UAAU,EAAEpc,MAAM,CAACoc,UAAAA;SAAY,GAAG,CAAA,CAAE,EAAA;YAC9DE,aAAa,EAAEtc,MAAM,CAAC2F,OAAO,GACzB;gBAAE,CAACgP,WAAW,CAACpY,KAAK,CAACQ,EAAE,CAAA,EAAGiD,MAAM,CAAC2F,OAAAA;YAAS,CAAA,GAC1C,CAAA,CAAE;QAAA,CAAA,CAAA,CAAA;IAEV,CAAA;IAEA,eAAeoX,aAAaA,CAC1BzJ,OAAgB,EAChBzV,OAAiC,EACjCme,cAAuB,EACvBtQ,qBAAkD,EAClDuQ,uBAAgC,EAChCY,UAAyC,EACzCrJ,mBAAyC,EAAA;QAQzC,IAAI0J,cAAc,GAAGL,UAAU,IAAI,IAAI,CAAA;QAEvC,4DAAA;QACA,IACEK,cAAc,IACd,CAAA,CAACL,UAAU,IAAVA,IAAAA,IAAAA,UAAU,CAAEtgB,KAAK,CAAC+Q,MAAM,CACzB,IAAA,CAAA,CAACuP,UAAU,IAAVA,IAAAA,IAAAA,UAAU,CAAEtgB,KAAK,CAAC8Q,IAAI,CACvB,EAAA;YACA,MAAMP,sBAAsB,CAAC,GAAG,EAAE;gBAChC+H,MAAM,EAAEvB,OAAO,CAACuB,MAAM;gBACtB3d,QAAQ,EAAE,IAAIS,GAAG,CAAC2b,OAAO,CAACzZ,GAAG,CAAC,CAAC3C,QAAQ;gBACvC2c,OAAO,EAAEgJ,UAAU,IAAA,IAAA,GAAA,KAAA,CAAA,GAAVA,UAAU,CAAEtgB,KAAK,CAACQ,EAAAA;YAC5B,CAAA,CAAC,CAAA;QACH,CAAA;QAED,IAAIqa,cAAc,GAAGyF,UAAU,GAC3B;YAACA,UAAU;SAAC,GACZrJ,mBAAmB,IAAIM,aAAa,CAACN,mBAAmB,CAAC,CAAC,CAAC,CAAC,GAC5DgK,6BAA6B,CAAC3f,OAAO,EAAE2V,mBAAmB,CAAC,CAAC,CAAC,CAAC,GAC9D3V,OAAO,CAAA;QACX,IAAI4X,aAAa,GAAG2B,cAAc,CAACpW,MAAM,EACtCoM,CAAC,GAAKA,CAAC,CAAC7Q,KAAK,CAAC+Q,MAAM,IAAIF,CAAC,CAAC7Q,KAAK,CAAC8Q,IAAI,CACtC,CAAA;QAED,uDAAA;QACA,IAAIoI,aAAa,CAACpf,MAAM,KAAK,CAAC,EAAE;YAC9B,OAAO;gBACLwH,OAAO;gBACP,0EAAA;gBACAO,UAAU,EAAEP,OAAO,CAACoD,MAAM,CACxB,CAACkG,GAAG,EAAEiG,CAAC,GAAKxL,MAAM,CAAC7F,MAAM,CAACoL,GAAG,EAAE;wBAAE,CAACiG,CAAC,CAAC7Q,KAAK,CAACQ,EAAE,CAAA,EAAG,IAAA;oBAAI,CAAE,CAAC,EACtD,CAAA,CAAE,CACH;gBACDwQ,MAAM,EACJiG,mBAAmB,IAAIM,aAAa,CAACN,mBAAmB,CAAC,CAAC,CAAC,CAAC,GACxD;oBACE,CAACA,mBAAmB,CAAC,CAAC,CAAC,CAAA,EAAGA,mBAAmB,CAAC,CAAC,CAAC,CAAC5X,KAAAA;gBAClD,CAAA,GACD,IAAI;gBACVwgB,UAAU,EAAE,GAAG;gBACfC,aAAa,EAAE,CAAA,CAAE;gBACjB7M,eAAe,EAAE,IAAA;aAClB,CAAA;QACF,CAAA;QAED,IAAIsF,OAAO,GAAG,MAAMC,gBAAgB,CAClC,QAAQ,EACRzB,OAAO,EACPmC,aAAa,EACb5X,OAAO,EACPqf,cAAc,EACdlB,cAAc,EACdtQ,qBAAqB,CACtB,CAAA;QAED,IAAI4H,OAAO,CAACpM,MAAM,CAACa,OAAO,EAAE;YAC1BoV,8BAA8B,CAAC7J,OAAO,EAAE4J,cAAc,EAAEpR,MAAM,CAAC,CAAA;QAChE,CAAA;QAED,yCAAA;QACA,IAAI0D,eAAe,GAAG,IAAIrB,GAAG,EAAwB,CAAA;QACrD,IAAIoP,OAAO,GAAGE,sBAAsB,CAClC5f,OAAO,EACPiX,OAAO,EACPtB,mBAAmB,EACnBhE,eAAe,EACfyM,uBAAuB,CACxB,CAAA;QAED,8EAAA;QACA,IAAIyB,eAAe,GAAG,IAAIrhB,GAAG,CAC3BoZ,aAAa,CAAC3f,GAAG,EAAEqI,KAAK,GAAKA,KAAK,CAAC5B,KAAK,CAACQ,EAAE,CAAC,CAC7C,CAAA;QACDc,OAAO,CAACsB,OAAO,EAAEhB,KAAK,IAAI;YACxB,IAAI,CAACuf,eAAe,CAAC7X,GAAG,CAAC1H,KAAK,CAAC5B,KAAK,CAACQ,EAAE,CAAC,EAAE;gBACxCwgB,OAAO,CAACnf,UAAU,CAACD,KAAK,CAAC5B,KAAK,CAACQ,EAAE,CAAC,GAAG,IAAI,CAAA;YAC1C,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,OAAA/B,QAAA,CAAA,CAAA,GACKuiB,OAAO,EAAA;YACV1f,OAAO;YACP2R,eAAe,EACbA,eAAe,CAAC7G,IAAI,GAAG,CAAC,GACpB/G,MAAM,CAAC+b,WAAW,CAACnO,eAAe,CAAC3Z,OAAO,EAAE,CAAC,GAC7C,IAAA;QAAI,CAAA,CAAA,CAAA;IAEd,CAAA;IAEA,yEAAA;IACA,qDAAA;IACA,eAAekf,gBAAgBA,CAC7B7O,IAAyB,EACzBoN,OAAgB,EAChBmC,aAAuC,EACvC5X,OAAiC,EACjCqf,cAAuB,EACvBlB,cAAuB,EACvBtQ,qBAAkD,EAAA;QAElD,IAAIoJ,OAAO,GAAG,MAAM6D,oBAAoB,CACtCjN,qBAAqB,IAAIC,mBAAmB,EAC5CzF,IAAI,EACJ,IAAI,EACJoN,OAAO,EACPmC,aAAa,EACb5X,OAAO,EACP,IAAI,EACJjB,QAAQ,EACRF,kBAAkB,EAClBsf,cAAc,CACf,CAAA;QAED,IAAItD,WAAW,GAA+B,CAAA,CAAE,CAAA;QAChD,MAAM9R,OAAO,CAACuS,GAAG,CACftb,OAAO,CAAC/H,GAAG,CAAC,OAAOqI,KAAK,IAAI;YAC1B,IAAI,CAAA,CAAEA,KAAK,CAAC5B,KAAK,CAACQ,EAAE,IAAI+X,OAAO,CAAC,EAAE;gBAChC,OAAA;YACD,CAAA;YACD,IAAI9U,MAAM,GAAG8U,OAAO,CAAC3W,KAAK,CAAC5B,KAAK,CAACQ,EAAE,CAAC,CAAA;YACpC,IAAI6b,kCAAkC,CAAC5Y,MAAM,CAAC,EAAE;gBAC9C,IAAIuJ,QAAQ,GAAGvJ,MAAM,CAACA,MAAkB,CAAA;gBACxC,uEAAA;gBACA,MAAM6Y,wCAAwC,CAC5CtP,QAAQ,EACR+J,OAAO,EACPnV,KAAK,CAAC5B,KAAK,CAACQ,EAAE,EACdc,OAAO,EACPP,QAAQ,EACRwO,MAAM,CAACvH,oBAAoB,CAC5B,CAAA;YACF,CAAA;YACD,IAAIiY,UAAU,CAACxc,MAAM,CAACA,MAAM,CAAC,IAAIkd,cAAc,EAAE;gBAC/C,gEAAA;gBACA,8BAAA;gBACA,MAAMld,MAAM,CAAA;YACb,CAAA;YAED0Y,WAAW,CAACva,KAAK,CAAC5B,KAAK,CAACQ,EAAE,CAAC,GACzB,MAAM+b,qCAAqC,CAAC9Y,MAAM,CAAC,CAAA;QACvD,CAAC,CAAC,CACH,CAAA;QACD,OAAO0Y,WAAW,CAAA;IACpB,CAAA;IAEA,OAAO;QACLnN,UAAU;QACVuQ,KAAK;QACLW,UAAAA;KACD,CAAA;AACH,CAAA;AAEA,YAAA;AAEA,gFAAA;AACA,iBAAA;AACA,gFAAA;AAEA;;;CAGG,YACamB,yBAAyBA,CACvCnhB,MAAiC,EACjC8gB,OAA6B,EAC7B3hB,KAAU,EAAA;IAEV,IAAIiiB,UAAU,GAAA7iB,QAAA,CAAA,CAAA,CAAA,EACTuiB,OAAO,EAAA;QACVnB,UAAU,EAAEzS,oBAAoB,CAAC/N,KAAK,CAAC,GAAGA,KAAK,CAAC8J,MAAM,GAAG,GAAG;QAC5D6H,MAAM,EAAE;YACN,CAACgQ,OAAO,CAACO,0BAA0B,IAAIrhB,MAAM,CAAC,CAAC,CAAC,CAACM,EAAE,CAAA,EAAGnB,KAAAA;QACvD,CAAA;KACF,CAAA,CAAA;IACD,OAAOiiB,UAAU,CAAA;AACnB,CAAA;AAEA,SAASV,8BAA8BA,CACrC7J,OAAgB,EAChB4J,cAAuB,EACvBpR,MAAiC,EAAA;IAEjC,IAAIA,MAAM,CAAC+P,mBAAmB,IAAIvI,OAAO,CAACpM,MAAM,CAAC6W,MAAM,KAAK5nB,SAAS,EAAE;QACrE,MAAMmd,OAAO,CAACpM,MAAM,CAAC6W,MAAM,CAAA;IAC5B,CAAA;IAED,IAAIlJ,MAAM,GAAGqI,cAAc,GAAG,YAAY,GAAG,OAAO,CAAA;IACpD,MAAM,IAAI7iB,KAAK,CAAIwa,MAAM,GAAoBvB,mBAAAA,GAAAA,OAAO,CAACuB,MAAM,GAAIvB,GAAAA,GAAAA,OAAO,CAACzZ,GAAK,CAAC,CAAA;AAC/E,CAAA;AAEA,SAASmkB,sBAAsBA,CAC7BnN,IAAgC,EAAA;IAEhC,OACEA,IAAI,IAAI,IAAI,IAAA,CACV,UAAU,IAAIA,IAAI,IAAIA,IAAI,CAACvG,QAAQ,IAAI,IAAI,IAC1C,MAAM,IAAIuG,IAAI,IAAIA,IAAI,CAACoN,IAAI,KAAK9nB,SAAU,CAAC,CAAA;AAElD,CAAA;AAEA,SAASgc,WAAWA,CAClBnb,QAAc,EACd6G,OAAiC,EACjCP,QAAgB,EAChB4gB,eAAwB,EACxBpnB,EAAa,EACbyN,oBAA6B,EAC7B6N,WAAoB,EACpBC,QAA8B,EAAA;IAE9B,IAAI8L,iBAA2C,CAAA;IAC/C,IAAIC,gBAAoD,CAAA;IACxD,IAAIhM,WAAW,EAAE;QACf,sEAAA;QACA,uCAAA;QACA+L,iBAAiB,GAAG,EAAE,CAAA;QACtB,KAAK,IAAIhgB,KAAK,IAAIN,OAAO,CAAE;YACzBsgB,iBAAiB,CAAClmB,IAAI,CAACkG,KAAK,CAAC,CAAA;YAC7B,IAAIA,KAAK,CAAC5B,KAAK,CAACQ,EAAE,KAAKqV,WAAW,EAAE;gBAClCgM,gBAAgB,GAAGjgB,KAAK,CAAA;gBACxB,MAAA;YACD,CAAA;QACF,CAAA;IACF,CAAA,MAAM;QACLggB,iBAAiB,GAAGtgB,OAAO,CAAA;QAC3BugB,gBAAgB,GAAGvgB,OAAO,CAACA,OAAO,CAACxH,MAAM,GAAG,CAAC,CAAC,CAAA;IAC/C,CAAA;IAED,4BAAA;IACA,IAAIwB,IAAI,GAAG4M,SAAS,CAClB3N,EAAE,GAAGA,EAAE,GAAG,GAAG,EACbwN,mBAAmB,CAAC6Z,iBAAiB,EAAE5Z,oBAAoB,CAAC,EAC5D9G,aAAa,CAACzG,QAAQ,CAACE,QAAQ,EAAEoG,QAAQ,CAAC,IAAItG,QAAQ,CAACE,QAAQ,EAC/Dmb,QAAQ,KAAK,MAAM,CACpB,CAAA;IAED,qEAAA;IACA,6DAAA;IACA,oDAAA;IACA,IAAIvb,EAAE,IAAI,IAAI,EAAE;QACde,IAAI,CAACE,MAAM,GAAGf,QAAQ,CAACe,MAAM,CAAA;QAC7BF,IAAI,CAACG,IAAI,GAAGhB,QAAQ,CAACgB,IAAI,CAAA;IAC1B,CAAA;IAED,4EAAA;IACA,IACE,CAAClB,EAAE,IAAI,IAAI,IAAIA,EAAE,KAAK,EAAE,IAAIA,EAAE,KAAK,GAAG,KACtCsnB,gBAAgB,IAChBA,gBAAgB,CAAC7hB,KAAK,CAACvG,KAAK,IAC5B,CAACqoB,kBAAkB,CAACxmB,IAAI,CAACE,MAAM,CAAC,EAChC;QACAF,IAAI,CAACE,MAAM,GAAGF,IAAI,CAACE,MAAM,GACrBF,IAAI,CAACE,MAAM,CAACO,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,GACrC,QAAQ,CAAA;IACb,CAAA;IAED,wEAAA;IACA,yEAAA;IACA,0EAAA;IACA,kBAAA;IACA,IAAI4lB,eAAe,IAAI5gB,QAAQ,KAAK,GAAG,EAAE;QACvCzF,IAAI,CAACX,QAAQ,GACXW,IAAI,CAACX,QAAQ,KAAK,GAAG,GAAGoG,QAAQ,GAAGwB,SAAS,CAAC;YAACxB,QAAQ;YAAEzF,IAAI,CAACX,QAAQ;SAAC,CAAC,CAAA;IAC1E,CAAA;IAED,OAAOM,UAAU,CAACK,IAAI,CAAC,CAAA;AACzB,CAAA;AAEA,gFAAA;AACA,wEAAA;AACA,SAAS0a,wBAAwBA,CAC/B+L,mBAA4B,EAC5BC,SAAkB,EAClB1mB,IAAY,EACZgZ,IAAiC,EAAA;IAMjC,yDAAA;IACA,IAAI,CAACA,IAAI,IAAI,CAACmN,sBAAsB,CAACnN,IAAI,CAAC,EAAE;QAC1C,OAAO;YAAEhZ,IAAAA;SAAM,CAAA;IAChB,CAAA;IAED,IAAIgZ,IAAI,CAAC1G,UAAU,IAAI,CAAC+R,aAAa,CAACrL,IAAI,CAAC1G,UAAU,CAAC,EAAE;QACtD,OAAO;YACLtS,IAAI;YACJ+D,KAAK,EAAEkR,sBAAsB,CAAC,GAAG,EAAE;gBAAE+H,MAAM,EAAEhE,IAAI,CAAC1G,UAAAA;aAAY,CAAA;SAC/D,CAAA;IACF,CAAA;IAED,IAAIqU,mBAAmB,GAAGA,IAAAA,CAAO;YAC/B3mB,IAAI;YACJ+D,KAAK,EAAEkR,sBAAsB,CAAC,GAAG,EAAE;gBAAE5G,IAAI,EAAE,cAAA;aAAgB,CAAA;QAC5D,CAAA,CAAC,CAAA;IAEF,6CAAA;IACA,IAAIuY,aAAa,GAAG5N,IAAI,CAAC1G,UAAU,IAAI,KAAK,CAAA;IAC5C,IAAIA,UAAU,GAAGmU,mBAAmB,GAC/BG,aAAa,CAACC,WAAW,EAAoB,GAC7CD,aAAa,CAACnb,WAAW,EAAiB,CAAA;IAC/C,IAAI8G,UAAU,GAAGuU,iBAAiB,CAAC9mB,IAAI,CAAC,CAAA;IAExC,IAAIgZ,IAAI,CAACoN,IAAI,KAAK9nB,SAAS,EAAE;QAC3B,IAAI0a,IAAI,CAACxG,WAAW,KAAK,YAAY,EAAE;YACrC,sDAAA;YACA,IAAI,CAACqH,gBAAgB,CAACvH,UAAU,CAAC,EAAE;gBACjC,OAAOqU,mBAAmB,EAAE,CAAA;YAC7B,CAAA;YAED,IAAIjU,IAAI,GACN,OAAOsG,IAAI,CAACoN,IAAI,KAAK,QAAQ,GACzBpN,IAAI,CAACoN,IAAI,GACTpN,IAAI,CAACoN,IAAI,YAAYW,QAAQ,IAC7B/N,IAAI,CAACoN,IAAI,YAAYY,eAAe,GACpC,+FAAA;YACArY,KAAK,CAACzB,IAAI,CAAC8L,IAAI,CAACoN,IAAI,CAACpoB,OAAO,EAAE,CAAC,CAACoL,MAAM,CACpC,CAACkG,GAAG,EAAA2X,KAAA,KAAA;gBAAA,IAAE,CAAChjB,IAAI,EAAE3B,KAAK,CAAC,GAAA2kB,KAAA,CAAA;gBAAA,OAAA,EAAA,GAAQ3X,GAAG,GAAGrL,IAAI,GAAA,GAAA,GAAI3B,KAAK,GAAA,IAAA,CAAA;aAAI,EAClD,EAAE,CACH,GACD2C,MAAM,CAAC+T,IAAI,CAACoN,IAAI,CAAC,CAAA;YAEvB,OAAO;gBACLpmB,IAAI;gBACJya,UAAU,EAAE;oBACVnI,UAAU;oBACVC,UAAU;oBACVC,WAAW,EAAEwG,IAAI,CAACxG,WAAW;oBAC7BC,QAAQ,EAAEnU,SAAS;oBACnBoP,IAAI,EAAEpP,SAAS;oBACfoU,IAAAA;gBACD,CAAA;aACF,CAAA;QACF,CAAA,MAAM,IAAIsG,IAAI,CAACxG,WAAW,KAAK,kBAAkB,EAAE;YAClD,uDAAA;YACA,IAAI,CAACqH,gBAAgB,CAACvH,UAAU,CAAC,EAAE;gBACjC,OAAOqU,mBAAmB,EAAE,CAAA;YAC7B,CAAA;YAED,IAAI;gBACF,IAAIjZ,IAAI,GACN,OAAOsL,IAAI,CAACoN,IAAI,KAAK,QAAQ,GAAG5mB,IAAI,CAAC0nB,KAAK,CAAClO,IAAI,CAACoN,IAAI,CAAC,GAAGpN,IAAI,CAACoN,IAAI,CAAA;gBAEnE,OAAO;oBACLpmB,IAAI;oBACJya,UAAU,EAAE;wBACVnI,UAAU;wBACVC,UAAU;wBACVC,WAAW,EAAEwG,IAAI,CAACxG,WAAW;wBAC7BC,QAAQ,EAAEnU,SAAS;wBACnBoP,IAAI;wBACJgF,IAAI,EAAEpU,SAAAA;oBACP,CAAA;iBACF,CAAA;aACF,CAAC,OAAOsE,CAAC,EAAE;gBACV,OAAO+jB,mBAAmB,EAAE,CAAA;YAC7B,CAAA;QACF,CAAA;IACF,CAAA;IAEDtkB,SAAS,CACP,OAAO0kB,QAAQ,KAAK,UAAU,EAC9B,+CAA+C,CAChD,CAAA;IAED,IAAII,YAA6B,CAAA;IACjC,IAAI1U,QAAkB,CAAA;IAEtB,IAAIuG,IAAI,CAACvG,QAAQ,EAAE;QACjB0U,YAAY,GAAGC,6BAA6B,CAACpO,IAAI,CAACvG,QAAQ,CAAC,CAAA;QAC3DA,QAAQ,GAAGuG,IAAI,CAACvG,QAAQ,CAAA;IACzB,CAAA,MAAM,IAAIuG,IAAI,CAACoN,IAAI,YAAYW,QAAQ,EAAE;QACxCI,YAAY,GAAGC,6BAA6B,CAACpO,IAAI,CAACoN,IAAI,CAAC,CAAA;QACvD3T,QAAQ,GAAGuG,IAAI,CAACoN,IAAI,CAAA;IACrB,CAAA,MAAM,IAAIpN,IAAI,CAACoN,IAAI,YAAYY,eAAe,EAAE;QAC/CG,YAAY,GAAGnO,IAAI,CAACoN,IAAI,CAAA;QACxB3T,QAAQ,GAAG4U,6BAA6B,CAACF,YAAY,CAAC,CAAA;IACvD,CAAA,MAAM,IAAInO,IAAI,CAACoN,IAAI,IAAI,IAAI,EAAE;QAC5Be,YAAY,GAAG,IAAIH,eAAe,EAAE,CAAA;QACpCvU,QAAQ,GAAG,IAAIsU,QAAQ,EAAE,CAAA;IAC1B,CAAA,MAAM;QACL,IAAI;YACFI,YAAY,GAAG,IAAIH,eAAe,CAAChO,IAAI,CAACoN,IAAI,CAAC,CAAA;YAC7C3T,QAAQ,GAAG4U,6BAA6B,CAACF,YAAY,CAAC,CAAA;SACvD,CAAC,OAAOvkB,CAAC,EAAE;YACV,OAAO+jB,mBAAmB,EAAE,CAAA;QAC7B,CAAA;IACF,CAAA;IAED,IAAIlM,UAAU,GAAe;QAC3BnI,UAAU;QACVC,UAAU;QACVC,WAAW,EACRwG,IAAI,IAAIA,IAAI,CAACxG,WAAW,IAAK,mCAAmC;QACnEC,QAAQ;QACR/E,IAAI,EAAEpP,SAAS;QACfoU,IAAI,EAAEpU,SAAAA;KACP,CAAA;IAED,IAAIub,gBAAgB,CAACY,UAAU,CAACnI,UAAU,CAAC,EAAE;QAC3C,OAAO;YAAEtS,IAAI;YAAEya,UAAAA;SAAY,CAAA;IAC5B,CAAA;IAED,8DAAA;IACA,IAAIpX,UAAU,GAAGpD,SAAS,CAACD,IAAI,CAAC,CAAA;IAChC,sEAAA;IACA,8EAAA;IACA,6EAAA;IACA,IAAI0mB,SAAS,IAAIrjB,UAAU,CAACnD,MAAM,IAAIsmB,kBAAkB,CAACnjB,UAAU,CAACnD,MAAM,CAAC,EAAE;QAC3EinB,YAAY,CAACG,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAA;IACjC,CAAA;IACDjkB,UAAU,CAACnD,MAAM,GAAA,GAAA,GAAOinB,YAAc,CAAA;IAEtC,OAAO;QAAEnnB,IAAI,EAAEL,UAAU,CAAC0D,UAAU,CAAC;QAAEoX,UAAAA;KAAY,CAAA;AACrD,CAAA;AAEA,uEAAA;AACA,uCAAA;AACA,SAASkL,6BAA6BA,CACpC3f,OAAiC,EACjC2W,UAAkB,EAAA;IAElB,IAAI4K,eAAe,GAAGvhB,OAAO,CAAA;IAC7B,IAAI2W,UAAU,EAAE;QACd,IAAIxe,KAAK,GAAG6H,OAAO,CAAC6P,SAAS,EAAEN,CAAC,GAAKA,CAAC,CAAC7Q,KAAK,CAACQ,EAAE,KAAKyX,UAAU,CAAC,CAAA;QAC/D,IAAIxe,KAAK,IAAI,CAAC,EAAE;YACdopB,eAAe,GAAGvhB,OAAO,CAAC7D,KAAK,CAAC,CAAC,EAAEhE,KAAK,CAAC,CAAA;QAC1C,CAAA;IACF,CAAA;IACD,OAAOopB,eAAe,CAAA;AACxB,CAAA;AAEA,SAASzJ,gBAAgBA,CACvBle,OAAgB,EAChBvB,KAAkB,EAClB2H,OAAiC,EACjCyU,UAAkC,EAClCtb,QAAkB,EAClBqoB,aAAsB,EACtBC,2BAAoC,EACpCzQ,sBAA+B,EAC/BC,uBAAiC,EACjCC,qBAAkC,EAClCQ,eAA4B,EAC5BF,gBAA6C,EAC7CD,gBAA6B,EAC7B6D,WAAsC,EACtC3V,QAA4B,EAC5BkW,mBAAyC,EAAA;IAEzC,IAAIE,YAAY,GAAGF,mBAAmB,GAClCM,aAAa,CAACN,mBAAmB,CAAC,CAAC,CAAC,CAAC,GACnCA,mBAAmB,CAAC,CAAC,CAAC,CAAC5X,KAAK,GAC5B4X,mBAAmB,CAAC,CAAC,CAAC,CAAClV,IAAI,GAC7BnI,SAAS,CAAA;IACb,IAAIopB,UAAU,GAAG9nB,OAAO,CAACC,SAAS,CAACxB,KAAK,CAACc,QAAQ,CAAC,CAAA;IAClD,IAAIwoB,OAAO,GAAG/nB,OAAO,CAACC,SAAS,CAACV,QAAQ,CAAC,CAAA;IAEzC,uEAAA;IACA,IAAIwd,UAAU,GACZhB,mBAAmB,IAAIM,aAAa,CAACN,mBAAmB,CAAC,CAAC,CAAC,CAAC,GACxDA,mBAAmB,CAAC,CAAC,CAAC,GACtBrd,SAAS,CAAA;IACf,IAAIipB,eAAe,GAAG5K,UAAU,GAC5BgJ,6BAA6B,CAAC3f,OAAO,EAAE2W,UAAU,CAAC,GAClD3W,OAAO,CAAA;IAEX,qEAAA;IACA,sEAAA;IACA,wCAAA;IACA,IAAI4hB,YAAY,GAAGjM,mBAAmB,GAClCA,mBAAmB,CAAC,CAAC,CAAC,CAAC4I,UAAU,GACjCjmB,SAAS,CAAA;IACb,IAAIupB,sBAAsB,GACxBJ,2BAA2B,IAAIG,YAAY,IAAIA,YAAY,IAAI,GAAG,CAAA;IAEpE,IAAIE,iBAAiB,GAAGP,eAAe,CAACpe,MAAM,CAAC,CAAC7C,KAAK,EAAEnI,KAAK,KAAI;QAC9D,IAAI,EAAEuG,KAAAA,EAAO,GAAG4B,KAAK,CAAA;QACrB,IAAI5B,KAAK,CAAC8Q,IAAI,EAAE;YACd,0EAAA;YACA,OAAO,IAAI,CAAA;QACZ,CAAA;QAED,IAAI9Q,KAAK,CAAC+Q,MAAM,IAAI,IAAI,EAAE;YACxB,OAAO,KAAK,CAAA;QACb,CAAA;QAED,IAAI+R,aAAa,EAAE;YACjB,IAAI,OAAO9iB,KAAK,CAAC+Q,MAAM,KAAK,UAAU,IAAI/Q,KAAK,CAAC+Q,MAAM,CAACG,OAAO,EAAE;gBAC9D,OAAO,IAAI,CAAA;YACZ,CAAA;YACD,OACEvX,KAAK,CAACkI,UAAU,CAAC7B,KAAK,CAACQ,EAAE,CAAC,KAAK5G,SAAS,IAAA,CACxC,oDAAA;YACC,CAACD,KAAK,CAACqX,MAAM,IAAIrX,KAAK,CAACqX,MAAM,CAAChR,KAAK,CAACQ,EAAE,CAAC,KAAK5G,SAAS,CAAC,CAAA;QAE1D,CAAA;QAED,gFAAA;QACA,IACEypB,WAAW,CAAC1pB,KAAK,CAACkI,UAAU,EAAElI,KAAK,CAAC2H,OAAO,CAAC7H,KAAK,CAAC,EAAEmI,KAAK,CAAC,IAC1D2Q,uBAAuB,CAAC/N,IAAI,EAAEhE,EAAE,GAAKA,EAAE,KAAKoB,KAAK,CAAC5B,KAAK,CAACQ,EAAE,CAAC,EAC3D;YACA,OAAO,IAAI,CAAA;QACZ,CAAA;QAED,2EAAA;QACA,uEAAA;QACA,wEAAA;QACA,+BAAA;QACA,IAAI8iB,iBAAiB,GAAG3pB,KAAK,CAAC2H,OAAO,CAAC7H,KAAK,CAAC,CAAA;QAC5C,IAAI8pB,cAAc,GAAG3hB,KAAK,CAAA;QAE1B,OAAO4hB,sBAAsB,CAAC5hB,KAAK,EAAAnD,QAAA,CAAA;YACjCukB,UAAU;YACVS,aAAa,EAAEH,iBAAiB,CAACxhB,MAAM;YACvCmhB,OAAO;YACPS,UAAU,EAAEH,cAAc,CAACzhB,MAAAA;QAAM,CAAA,EAC9BiU,UAAU,EAAA;YACboB,YAAY;YACZ+L,YAAY;YACZS,uBAAuB,EAAER,sBAAsB,GAC3C,KAAK,GACL,+EAAA;YACA7Q,sBAAsB,IACtB0Q,UAAU,CAACroB,QAAQ,GAAGqoB,UAAU,CAACxnB,MAAM,KACrCynB,OAAO,CAACtoB,QAAQ,GAAGsoB,OAAO,CAACznB,MAAM,IACnC,mCAAA;YACAwnB,UAAU,CAACxnB,MAAM,KAAKynB,OAAO,CAACznB,MAAM,IACpCooB,kBAAkB,CAACN,iBAAiB,EAAEC,cAAc,CAAA;QAAC,CAAA,CAC1D,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,iDAAA;IACA,IAAIpK,oBAAoB,GAA0B,EAAE,CAAA;IACpDrG,gBAAgB,CAAClQ,OAAO,CAAC,CAACiX,CAAC,EAAErf,GAAG,KAAI;QAClC,oBAAA;QACA,6DAAA;QACA,0DAAA;QACA,2DAAA;QACA,iEAAA;QACA,IACEsoB,aAAa,IACb,CAACxhB,OAAO,CAACkD,IAAI,EAAEqM,CAAC,GAAKA,CAAC,CAAC7Q,KAAK,CAACQ,EAAE,KAAKqZ,CAAC,CAACvC,OAAO,CAAC,IAC9CtE,eAAe,CAAC1J,GAAG,CAAC9O,GAAG,CAAC,EACxB;YACA,OAAA;QACD,CAAA;QAED,IAAIqpB,cAAc,GAAGhjB,WAAW,CAAC6V,WAAW,EAAEmD,CAAC,CAACve,IAAI,EAAEyF,QAAQ,CAAC,CAAA;QAE/D,yEAAA;QACA,wEAAA;QACA,0EAAA;QACA,gEAAA;QACA,IAAI,CAAC8iB,cAAc,EAAE;YACnB1K,oBAAoB,CAACzd,IAAI,CAAC;gBACxBlB,GAAG;gBACH8c,OAAO,EAAEuC,CAAC,CAACvC,OAAO;gBAClBhc,IAAI,EAAEue,CAAC,CAACve,IAAI;gBACZgG,OAAO,EAAE,IAAI;gBACbM,KAAK,EAAE,IAAI;gBACX2I,UAAU,EAAE,IAAA;YACb,CAAA,CAAC,CAAA;YACF,OAAA;QACD,CAAA;QAED,wEAAA;QACA,2EAAA;QACA,sDAAA;QACA,IAAIkK,OAAO,GAAG9a,KAAK,CAACgY,QAAQ,CAACpG,GAAG,CAAC/Q,GAAG,CAAC,CAAA;QACrC,IAAIspB,YAAY,GAAGzL,cAAc,CAACwL,cAAc,EAAEhK,CAAC,CAACve,IAAI,CAAC,CAAA;QAEzD,IAAIyoB,gBAAgB,GAAG,KAAK,CAAA;QAC5B,IAAIlR,gBAAgB,CAACvJ,GAAG,CAAC9O,GAAG,CAAC,EAAE;YAC7B,kEAAA;YACAupB,gBAAgB,GAAG,KAAK,CAAA;SACzB,MAAM,IAAIvR,qBAAqB,CAAClJ,GAAG,CAAC9O,GAAG,CAAC,EAAE;YACzC,4DAAA;YACAgY,qBAAqB,CAAC/G,MAAM,CAACjR,GAAG,CAAC,CAAA;YACjCupB,gBAAgB,GAAG,IAAI,CAAA;QACxB,CAAA,MAAM,IACLtP,OAAO,IACPA,OAAO,CAAC9a,KAAK,KAAK,MAAM,IACxB8a,OAAO,CAAC1S,IAAI,KAAKnI,SAAS,EAC1B;YACA,sEAAA;YACA,iEAAA;YACA,2BAAA;YACAmqB,gBAAgB,GAAGzR,sBAAsB,CAAA;QAC1C,CAAA,MAAM;YACL,uEAAA;YACA,iCAAA;YACAyR,gBAAgB,GAAGP,sBAAsB,CAACM,YAAY,EAAArlB,QAAA,CAAA;gBACpDukB,UAAU;gBACVS,aAAa,EAAE9pB,KAAK,CAAC2H,OAAO,CAAC3H,KAAK,CAAC2H,OAAO,CAACxH,MAAM,GAAG,CAAC,CAAC,CAACgI,MAAM;gBAC7DmhB,OAAO;gBACPS,UAAU,EAAEpiB,OAAO,CAACA,OAAO,CAACxH,MAAM,GAAG,CAAC,CAAC,CAACgI,MAAAA;YAAM,CAAA,EAC3CiU,UAAU,EAAA;gBACboB,YAAY;gBACZ+L,YAAY;gBACZS,uBAAuB,EAAER,sBAAsB,GAC3C,KAAK,GACL7Q,sBAAAA;YAAsB,CAAA,CAC3B,CAAC,CAAA;QACH,CAAA;QAED,IAAIyR,gBAAgB,EAAE;YACpB5K,oBAAoB,CAACzd,IAAI,CAAC;gBACxBlB,GAAG;gBACH8c,OAAO,EAAEuC,CAAC,CAACvC,OAAO;gBAClBhc,IAAI,EAAEue,CAAC,CAACve,IAAI;gBACZgG,OAAO,EAAEuiB,cAAc;gBACvBjiB,KAAK,EAAEkiB,YAAY;gBACnBvZ,UAAU,EAAE,IAAIC,eAAe,EAAE;YAClC,CAAA,CAAC,CAAA;QACH,CAAA;IACH,CAAC,CAAC,CAAA;IAEF,OAAO;QAAC4Y,iBAAiB;QAAEjK,oBAAoB;KAAC,CAAA;AAClD,CAAA;AAEA,SAASkK,WAAWA,CAClBW,iBAA4B,EAC5BC,YAAoC,EACpCriB,KAA6B,EAAA;IAE7B,IAAIsiB,KAAK,GACP,gBAAA;IACA,CAACD,YAAY,IACb,mBAAA;IACAriB,KAAK,CAAC5B,KAAK,CAACQ,EAAE,KAAKyjB,YAAY,CAACjkB,KAAK,CAACQ,EAAE,CAAA;IAE1C,2EAAA;IACA,0DAAA;IACA,IAAI2jB,aAAa,GAAGH,iBAAiB,CAACpiB,KAAK,CAAC5B,KAAK,CAACQ,EAAE,CAAC,KAAK5G,SAAS,CAAA;IAEnE,mEAAA;IACA,OAAOsqB,KAAK,IAAIC,aAAa,CAAA;AAC/B,CAAA;AAEA,SAASP,kBAAkBA,CACzBK,YAAoC,EACpCriB,KAA6B,EAAA;IAE7B,IAAIwiB,WAAW,GAAGH,YAAY,CAACjkB,KAAK,CAAC1E,IAAI,CAAA;IACzC,OACE,wDAAA;IACA2oB,YAAY,CAACtpB,QAAQ,KAAKiH,KAAK,CAACjH,QAAQ,IACxC,0DAAA;IACA,sDAAA;IACCypB,WAAW,IAAI,IAAI,IAClBA,WAAW,CAAC9gB,QAAQ,CAAC,GAAG,CAAC,IACzB2gB,YAAY,CAACniB,MAAM,CAAC,GAAG,CAAC,KAAKF,KAAK,CAACE,MAAM,CAAC,GAAG,CAAA;AAEnD,CAAA;AAEA,SAAS0hB,sBAAsBA,CAC7Ba,WAAmC,EACnCC,GAAiC,EAAA;IAEjC,IAAID,WAAW,CAACrkB,KAAK,CAAC+jB,gBAAgB,EAAE;QACtC,IAAIQ,WAAW,GAAGF,WAAW,CAACrkB,KAAK,CAAC+jB,gBAAgB,CAACO,GAAG,CAAC,CAAA;QACzD,IAAI,OAAOC,WAAW,KAAK,SAAS,EAAE;YACpC,OAAOA,WAAW,CAAA;QACnB,CAAA;IACF,CAAA;IAED,OAAOD,GAAG,CAACX,uBAAuB,CAAA;AACpC,CAAA;AAEA;;;CAGG,GACH,eAAerF,qBAAqBA,CAClCjP,2BAAoE,EACpE/T,IAAY,EACZgG,OAAiC,EACjCpB,MAAiC,EACjCG,QAAuB,EACvBF,kBAA8C,EAC9CqkB,oBAGC,EACD7Z,MAAmB,EAAA;IAEnB,IAAInQ,GAAG,GAAG;QAACc,IAAI,EAAE;WAAGgG,OAAO,CAAC/H,GAAG,EAAEsX,CAAC,GAAKA,CAAC,CAAC7Q,KAAK,CAACQ,EAAE,CAAC;KAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAA;IAC7D,IAAI;QACF,IAAIgkB,OAAO,GAAGD,oBAAoB,CAACjZ,GAAG,CAAC/Q,GAAG,CAAC,CAAA;QAC3C,IAAI,CAACiqB,OAAO,EAAE;YACZA,OAAO,GAAGpV,2BAA2B,CAAC;gBACpC/T,IAAI;gBACJgG,OAAO;gBACPojB,KAAK,EAAEA,CAACpN,OAAO,EAAE5W,QAAQ,KAAI;oBAC3B,IAAI,CAACiK,MAAM,CAACa,OAAO,EAAE;wBACnBwT,eAAe,CACb1H,OAAO,EACP5W,QAAQ,EACRR,MAAM,EACNG,QAAQ,EACRF,kBAAkB,CACnB,CAAA;oBACF,CAAA;gBACH,CAAA;YACD,CAAA,CAAC,CAAA;YACFqkB,oBAAoB,CAACjb,GAAG,CAAC/O,GAAG,EAAEiqB,OAAO,CAAC,CAAA;QACvC,CAAA;QAED,IAAIA,OAAO,IAAIE,SAAS,CAAwBF,OAAO,CAAC,EAAE;YACxD,MAAMA,OAAO,CAAA;QACd,CAAA;IACF,CAAA,QAAS;QACRD,oBAAoB,CAAC/Y,MAAM,CAACjR,GAAG,CAAC,CAAA;IACjC,CAAA;AACH,CAAA;AAEA,SAASwkB,eAAeA,CACtB1H,OAAsB,EACtB5W,QAA+B,EAC/BgW,WAAsC,EACtCrW,QAAuB,EACvBF,kBAA8C,EAAA;IAE9C,IAAImX,OAAO,EAAE;QAAA,IAAAsN,eAAA,CAAA;QACX,IAAI5kB,KAAK,GAAGK,QAAQ,CAACiX,OAAO,CAAC,CAAA;QAC7B3Z,SAAS,CACPqC,KAAK,EAC+CsX,mDAAAA,GAAAA,OAAS,CAC9D,CAAA;QACD,IAAIuN,YAAY,GAAG5kB,yBAAyB,CAC1CS,QAAQ,EACRP,kBAAkB,EAClB;YAACmX,OAAO;YAAE,OAAO;YAAE/W,MAAM,CAAC,CAAAqkB,CAAAA,eAAA,GAAA5kB,KAAK,CAACU,QAAQ,KAAA,OAAA,KAAA,IAAdkkB,eAAA,CAAgB9qB,MAAM,KAAI,GAAG,CAAC;SAAC,EACzDuG,QAAQ,CACT,CAAA;QACD,IAAIL,KAAK,CAACU,QAAQ,EAAE;YAClBV,KAAK,CAACU,QAAQ,CAAChF,IAAI,CAAC,GAAGmpB,YAAY,CAAC,CAAA;QACrC,CAAA,MAAM;YACL7kB,KAAK,CAACU,QAAQ,GAAGmkB,YAAY,CAAA;QAC9B,CAAA;IACF,CAAA,MAAM;QACL,IAAIA,YAAY,GAAG5kB,yBAAyB,CAC1CS,QAAQ,EACRP,kBAAkB,EAClB;YAAC,OAAO;YAAEI,MAAM,CAACmW,WAAW,CAAC5c,MAAM,IAAI,GAAG,CAAC;SAAC,EAC5CuG,QAAQ,CACT,CAAA;QACDqW,WAAW,CAAChb,IAAI,CAAC,GAAGmpB,YAAY,CAAC,CAAA;IAClC,CAAA;AACH,CAAA;AAEA;;;;CAIG,GACH,eAAeC,mBAAmBA,CAChC9kB,KAA8B,EAC9BG,kBAA8C,EAC9CE,QAAuB,EAAA;IAEvB,IAAI,CAACL,KAAK,CAAC8Q,IAAI,EAAE;QACf,OAAA;IACD,CAAA;IAED,IAAIiU,SAAS,GAAG,MAAM/kB,KAAK,CAAC8Q,IAAI,EAAE,CAAA;IAElC,0EAAA;IACA,2EAAA;IACA,yCAAA;IACA,IAAI,CAAC9Q,KAAK,CAAC8Q,IAAI,EAAE;QACf,OAAA;IACD,CAAA;IAED,IAAIkU,aAAa,GAAG3kB,QAAQ,CAACL,KAAK,CAACQ,EAAE,CAAC,CAAA;IACtC7C,SAAS,CAACqnB,aAAa,EAAE,4BAA4B,CAAC,CAAA;IAEtD,yEAAA;IACA,sEAAA;IACA,0BAAA;IACA,EAAA;IACA,4EAAA;IACA,yEAAA;IACA,uEAAA;IACA,2DAAA;IACA,IAAIC,YAAY,GAAwB,CAAA,CAAE,CAAA;IAC1C,IAAK,IAAIC,iBAAiB,IAAIH,SAAS,CAAE;QACvC,IAAII,gBAAgB,GAClBH,aAAa,CAACE,iBAA+C,CAAC,CAAA;QAEhE,IAAIE,2BAA2B,GAC7BD,gBAAgB,KAAKvrB,SAAS,IAC9B,qEAAA;QACA,uBAAA;QACAsrB,iBAAiB,KAAK,kBAAkB,CAAA;QAE1CtqB,OAAO,CACL,CAACwqB,2BAA2B,EAC5B,aAAUJ,aAAa,CAACxkB,EAAE,GAAA,6BAAA,GAA4B0kB,iBAAiB,GAAA,KAAA,GAAA,6EACQ,GAAA,CACjDA,4BAAAA,GAAAA,iBAAiB,GAAA,qBAAA,CAAoB,CACpE,CAAA;QAED,IACE,CAACE,2BAA2B,IAC5B,CAACvlB,kBAAkB,CAACyJ,GAAG,CAAC4b,iBAAsC,CAAC,EAC/D;YACAD,YAAY,CAACC,iBAAiB,CAAC,GAC7BH,SAAS,CAACG,iBAA2C,CAAC,CAAA;QACzD,CAAA;IACF,CAAA;IAED,wEAAA;IACA,4CAAA;IACA7f,MAAM,CAAC7F,MAAM,CAACwlB,aAAa,EAAEC,YAAY,CAAC,CAAA;IAE1C,yEAAA;IACA,sEAAA;IACA,eAAA;IACA5f,MAAM,CAAC7F,MAAM,CAACwlB,aAAa,EAAAvmB,QAAA,CAKtB0B,CAAAA,CAAAA,EAAAA,kBAAkB,CAAC6kB,aAAa,CAAC,EAAA;QACpClU,IAAI,EAAElX,SAAAA;IAAS,CAAA,CAChB,CAAC,CAAA;AACJ,CAAA;AAEA,iFAAA;AACA,eAAewV,mBAAmBA,CAAAiW,KAAA,EAEP;IAAA,IAFQ,EACjC/jB,OAAAA,EACyB,GAAA+jB,KAAA,CAAA;IACzB,IAAInM,aAAa,GAAG5X,OAAO,CAACmD,MAAM,EAAEoM,CAAC,GAAKA,CAAC,CAACyU,UAAU,CAAC,CAAA;IACvD,IAAI/M,OAAO,GAAG,MAAMlO,OAAO,CAACuS,GAAG,CAAC1D,aAAa,CAAC3f,GAAG,EAAEsX,CAAC,GAAKA,CAAC,CAAC1E,OAAO,EAAE,CAAC,CAAC,CAAA;IACtE,OAAOoM,OAAO,CAAC7T,MAAM,CACnB,CAACkG,GAAG,EAAEnH,MAAM,EAAElC,CAAC,GACb8D,MAAM,CAAC7F,MAAM,CAACoL,GAAG,EAAE;YAAE,CAACsO,aAAa,CAAC3X,CAAC,CAAC,CAACvB,KAAK,CAACQ,EAAE,CAAA,EAAGiD,MAAAA;QAAM,CAAE,CAAC,EAC7D,CAAA,CAAE,CACH,CAAA;AACH,CAAA;AAEA,eAAe2Y,oBAAoBA,CACjClN,gBAAsC,EACtCvF,IAAyB,EACzBhQ,KAAyB,EACzBod,OAAgB,EAChBmC,aAAuC,EACvC5X,OAAiC,EACjC4a,UAAyB,EACzB7b,QAAuB,EACvBF,kBAA8C,EAC9Csf,cAAwB,EAAA;IAExB,IAAI8F,4BAA4B,GAAGjkB,OAAO,CAAC/H,GAAG,EAAEsX,CAAC,GAC/CA,CAAC,CAAC7Q,KAAK,CAAC8Q,IAAI,GACRgU,mBAAmB,CAACjU,CAAC,CAAC7Q,KAAK,EAAEG,kBAAkB,EAAEE,QAAQ,CAAC,GAC1DzG,SAAS,CACd,CAAA;IAED,IAAI4rB,SAAS,GAAGlkB,OAAO,CAAC/H,GAAG,CAAC,CAACqI,KAAK,EAAEL,CAAC,KAAI;QACvC,IAAIkkB,gBAAgB,GAAGF,4BAA4B,CAAChkB,CAAC,CAAC,CAAA;QACtD,IAAI+jB,UAAU,GAAGpM,aAAa,CAAC1U,IAAI,EAAEqM,CAAC,GAAKA,CAAC,CAAC7Q,KAAK,CAACQ,EAAE,KAAKoB,KAAK,CAAC5B,KAAK,CAACQ,EAAE,CAAC,CAAA;QACzE,oEAAA;QACA,4EAAA;QACA,sEAAA;QACA,uBAAA;QACA,IAAI2L,OAAO,GAAiC,OAAOuZ,eAAe,IAAI;YACpE,IACEA,eAAe,IACf3O,OAAO,CAACuB,MAAM,KAAK,KAAK,IAAA,CACvB1W,KAAK,CAAC5B,KAAK,CAAC8Q,IAAI,IAAIlP,KAAK,CAAC5B,KAAK,CAAC+Q,MAAM,CAAC,EACxC;gBACAuU,UAAU,GAAG,IAAI,CAAA;YAClB,CAAA;YACD,OAAOA,UAAU,GACbK,kBAAkB,CAChBhc,IAAI,EACJoN,OAAO,EACPnV,KAAK,EACL6jB,gBAAgB,EAChBC,eAAe,EACfjG,cAAc,CACf,GACDpV,OAAO,CAAC8B,OAAO,CAAC;gBAAExC,IAAI,EAAE/J,UAAU,CAACmC,IAAI;gBAAE0B,MAAM,EAAE7J,SAAAA;YAAS,CAAE,CAAC,CAAA;SAClE,CAAA;QAED,OAAA6E,QAAA,CAAA,CAAA,GACKmD,KAAK,EAAA;YACR0jB,UAAU;YACVnZ,OAAAA;QAAO,CAAA,CAAA,CAAA;IAEX,CAAC,CAAC,CAAA;IAEF,uEAAA;IACA,0EAAA;IACA,kBAAA;IACA,IAAIoM,OAAO,GAAG,MAAMrJ,gBAAgB,CAAC;QACnC5N,OAAO,EAAEkkB,SAAS;QAClBzO,OAAO;QACPjV,MAAM,EAAER,OAAO,CAAC,CAAC,CAAC,CAACQ,MAAM;QACzBoa,UAAU;QACV8E,OAAO,EAAEvB,cAAAA;IACV,CAAA,CAAC,CAAA;IAEF,wEAAA;IACA,8EAAA;IACA,gCAAA;IACA,IAAI;QACF,MAAMpV,OAAO,CAACuS,GAAG,CAAC2I,4BAA4B,CAAC,CAAA;KAChD,CAAC,OAAOrnB,CAAC,EAAE;IACV,QAAA;IAAA,CAAA;IAGF,OAAOqa,OAAO,CAAA;AAChB,CAAA;AAEA,wFAAA;AACA,eAAeoN,kBAAkBA,CAC/Bhc,IAAyB,EACzBoN,OAAgB,EAChBnV,KAA6B,EAC7B6jB,gBAA2C,EAC3CC,eAA4D,EAC5DE,aAAuB,EAAA;IAEvB,IAAIniB,MAA0B,CAAA;IAC9B,IAAIoiB,QAAkC,CAAA;IAEtC,IAAIC,UAAU,IACZC,OAAsE,IACvC;QAC/B,0EAAA;QACA,IAAI5b,MAAkB,CAAA;QACtB,+EAAA;QACA,oCAAA;QACA,IAAIC,YAAY,GAAG,IAAIC,OAAO,CAAqB,CAAC1D,CAAC,EAAE2D,CAAC,GAAMH,MAAM,GAAGG,CAAE,CAAC,CAAA;QAC1Eub,QAAQ,GAAGA,IAAM1b,MAAM,EAAE,CAAA;QACzB4M,OAAO,CAACpM,MAAM,CAACjL,gBAAgB,CAAC,OAAO,EAAEmmB,QAAQ,CAAC,CAAA;QAElD,IAAIG,aAAa,IAAIC,GAAa,IAAI;YACpC,IAAI,OAAOF,OAAO,KAAK,UAAU,EAAE;gBACjC,OAAO1b,OAAO,CAACF,MAAM,CACnB,IAAIrM,KAAK,CACP,kEAAA,GAAA,CAAA,IAAA,GACM6L,IAAI,GAAA,eAAA,GAAe/H,KAAK,CAAC5B,KAAK,CAACQ,EAAE,GAAA,GAAA,CAAG,CAC3C,CACF,CAAA;YACF,CAAA;YACD,OAAOulB,OAAO,CACZ;gBACEhP,OAAO;gBACPjV,MAAM,EAAEF,KAAK,CAACE,MAAM;gBACpBkf,OAAO,EAAE4E,aAAAA;YACV,CAAA,EACD,GAAIK,GAAG,KAAKrsB,SAAS,GAAG;gBAACqsB,GAAG;aAAC,GAAG,EAAE,CAAC,CACpC,CAAA;SACF,CAAA;QAED,IAAIC,cAAc,GAAgC,CAAC,YAAW;YAC5D,IAAI;gBACF,IAAIC,GAAG,GAAG,MAAA,CAAOT,eAAe,GAC5BA,eAAe,EAAEO,GAAY,GAAKD,aAAa,CAACC,GAAG,CAAC,CAAC,GACrDD,aAAa,EAAE,CAAC,CAAA;gBACpB,OAAO;oBAAErc,IAAI,EAAE,MAAM;oBAAElG,MAAM,EAAE0iB,GAAAA;iBAAK,CAAA;aACrC,CAAC,OAAOjoB,CAAC,EAAE;gBACV,OAAO;oBAAEyL,IAAI,EAAE,OAAO;oBAAElG,MAAM,EAAEvF,CAAAA;iBAAG,CAAA;YACpC,CAAA;QACH,CAAC,GAAG,CAAA;QAEJ,OAAOmM,OAAO,CAACa,IAAI,CAAC;YAACgb,cAAc;YAAE9b,YAAY;SAAC,CAAC,CAAA;KACpD,CAAA;IAED,IAAI;QACF,IAAI2b,OAAO,GAAGnkB,KAAK,CAAC5B,KAAK,CAAC2J,IAAI,CAAC,CAAA;QAE/B,oDAAA;QACA,IAAI8b,gBAAgB,EAAE;YACpB,IAAIM,OAAO,EAAE;gBACX,yDAAA;gBACA,IAAIK,YAAY,CAAA;gBAChB,IAAI,CAACxoB,KAAK,CAAC,GAAG,MAAMyM,OAAO,CAACuS,GAAG,CAAC;oBAC9B,8DAAA;oBACA,sEAAA;oBACA,iDAAA;oBACAkJ,UAAU,CAACC,OAAO,CAAC,CAAC1a,KAAK,EAAEnN,CAAC,IAAI;wBAC9BkoB,YAAY,GAAGloB,CAAC,CAAA;oBAClB,CAAC,CAAC;oBACFunB,gBAAgB;iBACjB,CAAC,CAAA;gBACF,IAAIW,YAAY,KAAKxsB,SAAS,EAAE;oBAC9B,MAAMwsB,YAAY,CAAA;gBACnB,CAAA;gBACD3iB,MAAM,GAAG7F,KAAM,CAAA;YAChB,CAAA,MAAM;gBACL,wDAAA;gBACA,MAAM6nB,gBAAgB,CAAA;gBAEtBM,OAAO,GAAGnkB,KAAK,CAAC5B,KAAK,CAAC2J,IAAI,CAAC,CAAA;gBAC3B,IAAIoc,OAAO,EAAE;oBACX,wEAAA;oBACA,iEAAA;oBACA,gCAAA;oBACAtiB,MAAM,GAAG,MAAMqiB,UAAU,CAACC,OAAO,CAAC,CAAA;gBACnC,CAAA,MAAM,IAAIpc,IAAI,KAAK,QAAQ,EAAE;oBAC5B,IAAIrM,GAAG,GAAG,IAAIlC,GAAG,CAAC2b,OAAO,CAACzZ,GAAG,CAAC,CAAA;oBAC9B,IAAI3C,QAAQ,GAAG2C,GAAG,CAAC3C,QAAQ,GAAG2C,GAAG,CAAC9B,MAAM,CAAA;oBACxC,MAAM+U,sBAAsB,CAAC,GAAG,EAAE;wBAChC+H,MAAM,EAAEvB,OAAO,CAACuB,MAAM;wBACtB3d,QAAQ;wBACR2c,OAAO,EAAE1V,KAAK,CAAC5B,KAAK,CAACQ,EAAAA;oBACtB,CAAA,CAAC,CAAA;gBACH,CAAA,MAAM;oBACL,qEAAA;oBACA,8DAAA;oBACA,OAAO;wBAAEmJ,IAAI,EAAE/J,UAAU,CAACmC,IAAI;wBAAE0B,MAAM,EAAE7J,SAAAA;qBAAW,CAAA;gBACpD,CAAA;YACF,CAAA;QACF,CAAA,MAAM,IAAI,CAACmsB,OAAO,EAAE;YACnB,IAAIzoB,GAAG,GAAG,IAAIlC,GAAG,CAAC2b,OAAO,CAACzZ,GAAG,CAAC,CAAA;YAC9B,IAAI3C,QAAQ,GAAG2C,GAAG,CAAC3C,QAAQ,GAAG2C,GAAG,CAAC9B,MAAM,CAAA;YACxC,MAAM+U,sBAAsB,CAAC,GAAG,EAAE;gBAChC5V,QAAAA;YACD,CAAA,CAAC,CAAA;QACH,CAAA,MAAM;YACL8I,MAAM,GAAG,MAAMqiB,UAAU,CAACC,OAAO,CAAC,CAAA;QACnC,CAAA;QAEDpoB,SAAS,CACP8F,MAAM,CAACA,MAAM,KAAK7J,SAAS,EAC3B,cAAA,GAAA,CAAe+P,IAAI,KAAK,QAAQ,GAAG,WAAW,GAAG,UAAU,CACrD/H,GAAAA,aAAAA,GAAAA,CAAAA,IAAAA,GAAAA,KAAK,CAAC5B,KAAK,CAACQ,EAAE,GAA4CmJ,2CAAAA,GAAAA,IAAI,GAAK,IAAA,CAAA,GAAA,4CACzB,CACjD,CAAA;KACF,CAAC,OAAOzL,CAAC,EAAE;QACV,4EAAA;QACA,6EAAA;QACA,yCAAA;QACA,OAAO;YAAEyL,IAAI,EAAE/J,UAAU,CAACP,KAAK;YAAEoE,MAAM,EAAEvF,CAAAA;SAAG,CAAA;IAC7C,CAAA,QAAS;QACR,IAAI2nB,QAAQ,EAAE;YACZ9O,OAAO,CAACpM,MAAM,CAAChL,mBAAmB,CAAC,OAAO,EAAEkmB,QAAQ,CAAC,CAAA;QACtD,CAAA;IACF,CAAA;IAED,OAAOpiB,MAAM,CAAA;AACf,CAAA;AAEA,eAAe8Y,qCAAqCA,CAClD8J,kBAAsC,EAAA;IAEtC,IAAI,EAAE5iB,MAAM,EAAEkG,IAAAA,EAAM,GAAG0c,kBAAkB,CAAA;IAEzC,IAAIpG,UAAU,CAACxc,MAAM,CAAC,EAAE;QACtB,IAAI1B,IAAS,CAAA;QAEb,IAAI;YACF,IAAIukB,WAAW,GAAG7iB,MAAM,CAAC2F,OAAO,CAACmC,GAAG,CAAC,cAAc,CAAC,CAAA;YACpD,wEAAA;YACA,wEAAA;YACA,IAAI+a,WAAW,IAAI,uBAAuB,CAAC1hB,IAAI,CAAC0hB,WAAW,CAAC,EAAE;gBAC5D,IAAI7iB,MAAM,CAACie,IAAI,IAAI,IAAI,EAAE;oBACvB3f,IAAI,GAAG,IAAI,CAAA;gBACZ,CAAA,MAAM;oBACLA,IAAI,GAAG,MAAM0B,MAAM,CAACuF,IAAI,EAAE,CAAA;gBAC3B,CAAA;YACF,CAAA,MAAM;gBACLjH,IAAI,GAAG,MAAM0B,MAAM,CAACuK,IAAI,EAAE,CAAA;YAC3B,CAAA;SACF,CAAC,OAAO9P,CAAC,EAAE;YACV,OAAO;gBAAEyL,IAAI,EAAE/J,UAAU,CAACP,KAAK;gBAAEA,KAAK,EAAEnB,CAAAA;aAAG,CAAA;QAC5C,CAAA;QAED,IAAIyL,IAAI,KAAK/J,UAAU,CAACP,KAAK,EAAE;YAC7B,OAAO;gBACLsK,IAAI,EAAE/J,UAAU,CAACP,KAAK;gBACtBA,KAAK,EAAE,IAAI4N,iBAAiB,CAACxJ,MAAM,CAAC0F,MAAM,EAAE1F,MAAM,CAACyJ,UAAU,EAAEnL,IAAI,CAAC;gBACpE8d,UAAU,EAAEpc,MAAM,CAAC0F,MAAM;gBACzBC,OAAO,EAAE3F,MAAM,CAAC2F,OAAAA;aACjB,CAAA;QACF,CAAA;QAED,OAAO;YACLO,IAAI,EAAE/J,UAAU,CAACmC,IAAI;YACrBA,IAAI;YACJ8d,UAAU,EAAEpc,MAAM,CAAC0F,MAAM;YACzBC,OAAO,EAAE3F,MAAM,CAAC2F,OAAAA;SACjB,CAAA;IACF,CAAA;IAED,IAAIO,IAAI,KAAK/J,UAAU,CAACP,KAAK,EAAE;QAC7B,IAAIknB,sBAAsB,CAAC9iB,MAAM,CAAC,EAAE;YAAA,IAAA+iB,aAAA,CAAA;YAClC,IAAI/iB,MAAM,CAAC1B,IAAI,YAAYjE,KAAK,EAAE;gBAAA,IAAA2oB,YAAA,CAAA;gBAChC,OAAO;oBACL9c,IAAI,EAAE/J,UAAU,CAACP,KAAK;oBACtBA,KAAK,EAAEoE,MAAM,CAAC1B,IAAI;oBAClB8d,UAAU,EAAA,CAAA4G,YAAA,GAAEhjB,MAAM,CAACwF,IAAI,KAAA,IAAA,GAAA,KAAA,CAAA,GAAXwd,YAAA,CAAatd,MAAAA;iBAC1B,CAAA;YACF,CAAA;YAED,4DAAA;YACA1F,MAAM,GAAG,IAAIwJ,iBAAiB,CAC5B,CAAA,CAAAuZ,aAAA,GAAA/iB,MAAM,CAACwF,IAAI,KAAA,IAAA,GAAA,KAAA,CAAA,GAAXud,aAAA,CAAard,MAAM,KAAI,GAAG,EAC1BvP,SAAS,EACT6J,MAAM,CAAC1B,IAAI,CACZ,CAAA;QACF,CAAA;QACD,OAAO;YACL4H,IAAI,EAAE/J,UAAU,CAACP,KAAK;YACtBA,KAAK,EAAEoE,MAAM;YACboc,UAAU,EAAEzS,oBAAoB,CAAC3J,MAAM,CAAC,GAAGA,MAAM,CAAC0F,MAAM,GAAGvP,SAAAA;SAC5D,CAAA;IACF,CAAA;IAED,IAAI8sB,cAAc,CAACjjB,MAAM,CAAC,EAAE;QAAA,IAAAkjB,aAAA,EAAAC,aAAA,CAAA;QAC1B,OAAO;YACLjd,IAAI,EAAE/J,UAAU,CAACinB,QAAQ;YACzB1M,YAAY,EAAE1W,MAAM;YACpBoc,UAAU,EAAA,CAAA8G,aAAA,GAAEljB,MAAM,CAACwF,IAAI,KAAA,IAAA,GAAA,KAAA,CAAA,GAAX0d,aAAA,CAAaxd,MAAM;YAC/BC,OAAO,EAAE,CAAAwd,CAAAA,aAAA,GAAAnjB,MAAM,CAACwF,IAAI,KAAX2d,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,aAAA,CAAaxd,OAAO,KAAI,IAAIC,OAAO,CAAC5F,MAAM,CAACwF,IAAI,CAACG,OAAO,CAAA;SACjE,CAAA;IACF,CAAA;IAED,IAAImd,sBAAsB,CAAC9iB,MAAM,CAAC,EAAE;QAAA,IAAAqjB,aAAA,EAAAC,aAAA,CAAA;QAClC,OAAO;YACLpd,IAAI,EAAE/J,UAAU,CAACmC,IAAI;YACrBA,IAAI,EAAE0B,MAAM,CAAC1B,IAAI;YACjB8d,UAAU,EAAA,CAAAiH,aAAA,GAAErjB,MAAM,CAACwF,IAAI,KAAA,IAAA,GAAA,KAAA,CAAA,GAAX6d,aAAA,CAAa3d,MAAM;YAC/BC,OAAO,EAAE,CAAA2d,aAAA,GAAAtjB,MAAM,CAACwF,IAAI,KAAA,QAAX8d,aAAA,CAAa3d,OAAO,GACzB,IAAIC,OAAO,CAAC5F,MAAM,CAACwF,IAAI,CAACG,OAAO,CAAC,GAChCxP,SAAAA;SACL,CAAA;IACF,CAAA;IAED,OAAO;QAAE+P,IAAI,EAAE/J,UAAU,CAACmC,IAAI;QAAEA,IAAI,EAAE0B,MAAAA;KAAQ,CAAA;AAChD,CAAA;AAEA,iDAAA;AACA,SAAS6Y,wCAAwCA,CAC/CtP,QAAkB,EAClB+J,OAAgB,EAChBO,OAAe,EACfhW,OAAiC,EACjCP,QAAgB,EAChBiH,oBAA6B,EAAA;IAE7B,IAAIvN,QAAQ,GAAGuS,QAAQ,CAAC5D,OAAO,CAACmC,GAAG,CAAC,UAAU,CAAC,CAAA;IAC/C5N,SAAS,CACPlD,QAAQ,EACR,4EAA4E,CAC7E,CAAA;IAED,IAAI,CAAC4T,kBAAkB,CAACzJ,IAAI,CAACnK,QAAQ,CAAC,EAAE;QACtC,IAAIusB,cAAc,GAAG1lB,OAAO,CAAC7D,KAAK,CAChC,CAAC,EACD6D,OAAO,CAAC6P,SAAS,EAAEN,CAAC,GAAKA,CAAC,CAAC7Q,KAAK,CAACQ,EAAE,KAAK8W,OAAO,CAAC,GAAG,CAAC,CACrD,CAAA;QACD7c,QAAQ,GAAGmb,WAAW,CACpB,IAAIxa,GAAG,CAAC2b,OAAO,CAACzZ,GAAG,CAAC,EACpB0pB,cAAc,EACdjmB,QAAQ,EACR,IAAI,EACJtG,QAAQ,EACRuN,oBAAoB,CACrB,CAAA;QACDgF,QAAQ,CAAC5D,OAAO,CAACG,GAAG,CAAC,UAAU,EAAE9O,QAAQ,CAAC,CAAA;IAC3C,CAAA;IAED,OAAOuS,QAAQ,CAAA;AACjB,CAAA;AAEA,SAAS0L,yBAAyBA,CAChCje,QAAgB,EAChBuoB,UAAe,EACfjiB,QAAgB,EAAA;IAEhB,IAAIsN,kBAAkB,CAACzJ,IAAI,CAACnK,QAAQ,CAAC,EAAE;QACrC,mFAAA;QACA,IAAIwsB,kBAAkB,GAAGxsB,QAAQ,CAAA;QACjC,IAAI6C,GAAG,GAAG2pB,kBAAkB,CAAClqB,UAAU,CAAC,IAAI,CAAC,GACzC,IAAI3B,GAAG,CAAC4nB,UAAU,CAACkE,QAAQ,GAAGD,kBAAkB,CAAC,GACjD,IAAI7rB,GAAG,CAAC6rB,kBAAkB,CAAC,CAAA;QAC/B,IAAIE,cAAc,GAAGjmB,aAAa,CAAC5D,GAAG,CAAC3C,QAAQ,EAAEoG,QAAQ,CAAC,IAAI,IAAI,CAAA;QAClE,IAAIzD,GAAG,CAACmC,MAAM,KAAKujB,UAAU,CAACvjB,MAAM,IAAI0nB,cAAc,EAAE;YACtD,OAAO7pB,GAAG,CAAC3C,QAAQ,GAAG2C,GAAG,CAAC9B,MAAM,GAAG8B,GAAG,CAAC7B,IAAI,CAAA;QAC5C,CAAA;IACF,CAAA;IACD,OAAOhB,QAAQ,CAAA;AACjB,CAAA;AAEA,+EAAA;AACA,yEAAA;AACA,8DAAA;AACA,SAASuc,uBAAuBA,CAC9B9b,OAAgB,EAChBT,QAA2B,EAC3BkQ,MAAmB,EACnBoL,UAAuB,EAAA;IAEvB,IAAIzY,GAAG,GAAGpC,OAAO,CAACC,SAAS,CAACinB,iBAAiB,CAAC3nB,QAAQ,CAAC,CAAC,CAAC4D,QAAQ,EAAE,CAAA;IACnE,IAAI4K,IAAI,GAAgB;QAAE0B,MAAAA;KAAQ,CAAA;IAElC,IAAIoL,UAAU,IAAIZ,gBAAgB,CAACY,UAAU,CAACnI,UAAU,CAAC,EAAE;QACzD,IAAI,EAAEA,UAAU,EAAEE,WAAAA,EAAa,GAAGiI,UAAU,CAAA;QAC5C,2EAAA;QACA,wEAAA;QACA,qDAAA;QACA9M,IAAI,CAACqP,MAAM,GAAG1K,UAAU,CAACuU,WAAW,EAAE,CAAA;QAEtC,IAAIrU,WAAW,KAAK,kBAAkB,EAAE;YACtC7E,IAAI,CAACG,OAAO,GAAG,IAAIC,OAAO,CAAC;gBAAE,cAAc,EAAEyE,WAAAA;YAAa,CAAA,CAAC,CAAA;YAC3D7E,IAAI,CAACyY,IAAI,GAAG5mB,IAAI,CAACC,SAAS,CAACgb,UAAU,CAAC/M,IAAI,CAAC,CAAA;QAC5C,CAAA,MAAM,IAAI8E,WAAW,KAAK,YAAY,EAAE;YACvC,wEAAA;YACA7E,IAAI,CAACyY,IAAI,GAAG3L,UAAU,CAAC/H,IAAI,CAAA;SAC5B,MAAM,IACLF,WAAW,KAAK,mCAAmC,IACnDiI,UAAU,CAAChI,QAAQ,EACnB;YACA,wEAAA;YACA9E,IAAI,CAACyY,IAAI,GAAGgB,6BAA6B,CAAC3M,UAAU,CAAChI,QAAQ,CAAC,CAAA;QAC/D,CAAA,MAAM;YACL,wEAAA;YACA9E,IAAI,CAACyY,IAAI,GAAG3L,UAAU,CAAChI,QAAQ,CAAA;QAChC,CAAA;IACF,CAAA;IAED,OAAO,IAAIgT,OAAO,CAACzjB,GAAG,EAAE2L,IAAI,CAAC,CAAA;AAC/B,CAAA;AAEA,SAASyZ,6BAA6BA,CAAC3U,QAAkB,EAAA;IACvD,IAAI0U,YAAY,GAAG,IAAIH,eAAe,EAAE,CAAA;IAExC,KAAK,IAAI,CAAC9nB,GAAG,EAAEoD,KAAK,CAAC,IAAImQ,QAAQ,CAACzU,OAAO,EAAE,CAAE;QAC3C,iIAAA;QACAmpB,YAAY,CAACG,MAAM,CAACpoB,GAAG,EAAE,OAAOoD,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGA,KAAK,CAAC2B,IAAI,CAAC,CAAA;IACzE,CAAA;IAED,OAAOkjB,YAAY,CAAA;AACrB,CAAA;AAEA,SAASE,6BAA6BA,CACpCF,YAA6B,EAAA;IAE7B,IAAI1U,QAAQ,GAAG,IAAIsU,QAAQ,EAAE,CAAA;IAC7B,KAAK,IAAI,CAAC7nB,GAAG,EAAEoD,KAAK,CAAC,IAAI6kB,YAAY,CAACnpB,OAAO,EAAE,CAAE;QAC/CyU,QAAQ,CAAC6U,MAAM,CAACpoB,GAAG,EAAEoD,KAAK,CAAC,CAAA;IAC5B,CAAA;IACD,OAAOmQ,QAAQ,CAAA;AACjB,CAAA;AAEA,SAASmT,sBAAsBA,CAC7B5f,OAAiC,EACjCiX,OAAmC,EACnCtB,mBAAoD,EACpDhE,eAA0C,EAC1CyM,uBAAgC,EAAA;IAOhC,6CAAA;IACA,IAAI7d,UAAU,GAA8B,CAAA,CAAE,CAAA;IAC9C,IAAImP,MAAM,GAAiC,IAAI,CAAA;IAC/C,IAAI6O,UAA8B,CAAA;IAClC,IAAIuH,UAAU,GAAG,KAAK,CAAA;IACtB,IAAItH,aAAa,GAA4B,CAAA,CAAE,CAAA;IAC/C,IAAI5J,YAAY,GACde,mBAAmB,IAAIM,aAAa,CAACN,mBAAmB,CAAC,CAAC,CAAC,CAAC,GACxDA,mBAAmB,CAAC,CAAC,CAAC,CAAC5X,KAAK,GAC5BzF,SAAS,CAAA;IAEf,4DAAA;IACA0H,OAAO,CAACsB,OAAO,EAAEhB,KAAK,IAAI;QACxB,IAAI,CAAA,CAAEA,KAAK,CAAC5B,KAAK,CAACQ,EAAE,IAAI+X,OAAO,CAAC,EAAE;YAChC,OAAA;QACD,CAAA;QACD,IAAI/X,EAAE,GAAGoB,KAAK,CAAC5B,KAAK,CAACQ,EAAE,CAAA;QACvB,IAAIiD,MAAM,GAAG8U,OAAO,CAAC/X,EAAE,CAAC,CAAA;QACxB7C,SAAS,CACP,CAAC8a,gBAAgB,CAAChV,MAAM,CAAC,EACzB,qDAAqD,CACtD,CAAA;QACD,IAAI8T,aAAa,CAAC9T,MAAM,CAAC,EAAE;YACzB,IAAIpE,KAAK,GAAGoE,MAAM,CAACpE,KAAK,CAAA;YACxB,uEAAA;YACA,qEAAA;YACA,kBAAA;YACA,IAAI6W,YAAY,KAAKtc,SAAS,EAAE;gBAC9ByF,KAAK,GAAG6W,YAAY,CAAA;gBACpBA,YAAY,GAAGtc,SAAS,CAAA;YACzB,CAAA;YAEDoX,MAAM,GAAGA,MAAM,IAAI,CAAA,CAAE,CAAA;YAErB,IAAI0O,uBAAuB,EAAE;gBAC3B1O,MAAM,CAACxQ,EAAE,CAAC,GAAGnB,KAAK,CAAA;YACnB,CAAA,MAAM;gBACL,qEAAA;gBACA,sEAAA;gBACA,8CAAA;gBACA,IAAIwZ,aAAa,GAAG3B,mBAAmB,CAAC5V,OAAO,EAAEd,EAAE,CAAC,CAAA;gBACpD,IAAIwQ,MAAM,CAAC6H,aAAa,CAAC7Y,KAAK,CAACQ,EAAE,CAAC,IAAI,IAAI,EAAE;oBAC1CwQ,MAAM,CAAC6H,aAAa,CAAC7Y,KAAK,CAACQ,EAAE,CAAC,GAAGnB,KAAK,CAAA;gBACvC,CAAA;YACF,CAAA;YAED,wDAAA;YACAwC,UAAU,CAACrB,EAAE,CAAC,GAAG5G,SAAS,CAAA;YAE1B,qEAAA;YACA,8CAAA;YACA,IAAI,CAACwtB,UAAU,EAAE;gBACfA,UAAU,GAAG,IAAI,CAAA;gBACjBvH,UAAU,GAAGzS,oBAAoB,CAAC3J,MAAM,CAACpE,KAAK,CAAC,GAC3CoE,MAAM,CAACpE,KAAK,CAAC8J,MAAM,GACnB,GAAG,CAAA;YACR,CAAA;YACD,IAAI1F,MAAM,CAAC2F,OAAO,EAAE;gBAClB0W,aAAa,CAACtf,EAAE,CAAC,GAAGiD,MAAM,CAAC2F,OAAO,CAAA;YACnC,CAAA;QACF,CAAA,MAAM;YACL,IAAIwP,gBAAgB,CAACnV,MAAM,CAAC,EAAE;gBAC5BwP,eAAe,CAAC1J,GAAG,CAAC/I,EAAE,EAAEiD,MAAM,CAAC0W,YAAY,CAAC,CAAA;gBAC5CtY,UAAU,CAACrB,EAAE,CAAC,GAAGiD,MAAM,CAAC0W,YAAY,CAACpY,IAAI,CAAA;gBACzC,sEAAA;gBACA,0DAAA;gBACA,IACE0B,MAAM,CAACoc,UAAU,IAAI,IAAI,IACzBpc,MAAM,CAACoc,UAAU,KAAK,GAAG,IACzB,CAACuH,UAAU,EACX;oBACAvH,UAAU,GAAGpc,MAAM,CAACoc,UAAU,CAAA;gBAC/B,CAAA;gBACD,IAAIpc,MAAM,CAAC2F,OAAO,EAAE;oBAClB0W,aAAa,CAACtf,EAAE,CAAC,GAAGiD,MAAM,CAAC2F,OAAO,CAAA;gBACnC,CAAA;YACF,CAAA,MAAM;gBACLvH,UAAU,CAACrB,EAAE,CAAC,GAAGiD,MAAM,CAAC1B,IAAI,CAAA;gBAC5B,sEAAA;gBACA,0DAAA;gBACA,IAAI0B,MAAM,CAACoc,UAAU,IAAIpc,MAAM,CAACoc,UAAU,KAAK,GAAG,IAAI,CAACuH,UAAU,EAAE;oBACjEvH,UAAU,GAAGpc,MAAM,CAACoc,UAAU,CAAA;gBAC/B,CAAA;gBACD,IAAIpc,MAAM,CAAC2F,OAAO,EAAE;oBAClB0W,aAAa,CAACtf,EAAE,CAAC,GAAGiD,MAAM,CAAC2F,OAAO,CAAA;gBACnC,CAAA;YACF,CAAA;QACF,CAAA;IACH,CAAC,CAAC,CAAA;IAEF,mEAAA;IACA,0EAAA;IACA,iBAAA;IACA,IAAI8M,YAAY,KAAKtc,SAAS,IAAIqd,mBAAmB,EAAE;QACrDjG,MAAM,GAAG;YAAE,CAACiG,mBAAmB,CAAC,CAAC,CAAC,CAAA,EAAGf,YAAAA;SAAc,CAAA;QACnDrU,UAAU,CAACoV,mBAAmB,CAAC,CAAC,CAAC,CAAC,GAAGrd,SAAS,CAAA;IAC/C,CAAA;IAED,OAAO;QACLiI,UAAU;QACVmP,MAAM;QACN6O,UAAU,EAAEA,UAAU,IAAI,GAAG;QAC7BC,aAAAA;KACD,CAAA;AACH,CAAA;AAEA,SAAS5F,iBAAiBA,CACxBvgB,KAAkB,EAClB2H,OAAiC,EACjC4X,aAAuC,EACvCX,OAAmC,EACnCtB,mBAAoD,EACpDkC,oBAA2C,EAC3CY,cAA0C,EAC1C9G,eAA0C,EAAA;IAK1C,IAAI,EAAEpR,UAAU,EAAEmP,MAAAA,EAAQ,GAAGkQ,sBAAsB,CACjD5f,OAAO,EACPiX,OAAO,EACPtB,mBAAmB,EACnBhE,eAAe,EACf,KAAK,CAAA,qEAAA;;IAGP,iDAAA;IACAkG,oBAAoB,CAACvW,OAAO,EAAE8W,EAAE,IAAI;QAClC,IAAI,EAAElf,GAAG,EAAEoH,KAAK,EAAE2I,UAAAA,EAAY,GAAGmP,EAAE,CAAA;QACnC,IAAIjW,MAAM,GAAGsW,cAAc,CAACvf,GAAG,CAAC,CAAA;QAChCmD,SAAS,CAAC8F,MAAM,EAAE,2CAA2C,CAAC,CAAA;QAE9D,sCAAA;QACA,IAAI8G,UAAU,IAAIA,UAAU,CAACI,MAAM,CAACa,OAAO,EAAE;YAC3C,qCAAA;YACA,OAAA;QACD,CAAA,MAAM,IAAI+L,aAAa,CAAC9T,MAAM,CAAC,EAAE;YAChC,IAAIoV,aAAa,GAAG3B,mBAAmB,CAACvd,KAAK,CAAC2H,OAAO,EAAEM,KAAK,IAAA,OAAA,KAAA,IAALA,KAAK,CAAE5B,KAAK,CAACQ,EAAE,CAAC,CAAA;YACvE,IAAI,CAAA,CAAEwQ,MAAM,IAAIA,MAAM,CAAC6H,aAAa,CAAC7Y,KAAK,CAACQ,EAAE,CAAC,CAAC,EAAE;gBAC/CwQ,MAAM,GAAAvS,QAAA,CAAA,CAAA,CAAA,EACDuS,MAAM,EAAA;oBACT,CAAC6H,aAAa,CAAC7Y,KAAK,CAACQ,EAAE,CAAA,EAAGiD,MAAM,CAACpE,KAAAA;iBAClC,CAAA,CAAA;YACF,CAAA;YACD1F,KAAK,CAACgY,QAAQ,CAAClG,MAAM,CAACjR,GAAG,CAAC,CAAA;QAC3B,CAAA,MAAM,IAAIie,gBAAgB,CAAChV,MAAM,CAAC,EAAE;YACnC,sEAAA;YACA,2DAAA;YACA9F,SAAS,CAAC,KAAK,EAAE,yCAAyC,CAAC,CAAA;QAC5D,CAAA,MAAM,IAAIib,gBAAgB,CAACnV,MAAM,CAAC,EAAE;YACnC,sEAAA;YACA,4BAAA;YACA9F,SAAS,CAAC,KAAK,EAAE,iCAAiC,CAAC,CAAA;QACpD,CAAA,MAAM;YACL,IAAIge,WAAW,GAAGL,cAAc,CAAC7X,MAAM,CAAC1B,IAAI,CAAC,CAAA;YAC7CpI,KAAK,CAACgY,QAAQ,CAACpI,GAAG,CAAC/O,GAAG,EAAEmhB,WAAW,CAAC,CAAA;QACrC,CAAA;IACH,CAAC,CAAC,CAAA;IAEF,OAAO;QAAE9Z,UAAU;QAAEmP,MAAAA;KAAQ,CAAA;AAC/B,CAAA;AAEA,SAASsE,eAAeA,CACtBzT,UAAqB,EACrBwlB,aAAwB,EACxB/lB,OAAiC,EACjC0P,MAAoC,EAAA;IAEpC,IAAIsW,gBAAgB,GAAA7oB,QAAA,CAAA,CAAA,CAAA,EAAQ4oB,aAAa,CAAE,CAAA;IAC3C,KAAK,IAAIzlB,KAAK,IAAIN,OAAO,CAAE;QACzB,IAAId,EAAE,GAAGoB,KAAK,CAAC5B,KAAK,CAACQ,EAAE,CAAA;QACvB,IAAI6mB,aAAa,CAACE,cAAc,CAAC/mB,EAAE,CAAC,EAAE;YACpC,IAAI6mB,aAAa,CAAC7mB,EAAE,CAAC,KAAK5G,SAAS,EAAE;gBACnC0tB,gBAAgB,CAAC9mB,EAAE,CAAC,GAAG6mB,aAAa,CAAC7mB,EAAE,CAAC,CAAA;YACzC,CAGC;QAEH,CAAA,MAAM,IAAIqB,UAAU,CAACrB,EAAE,CAAC,KAAK5G,SAAS,IAAIgI,KAAK,CAAC5B,KAAK,CAAC+Q,MAAM,EAAE;YAC7D,0EAAA;YACA,wBAAA;YACAuW,gBAAgB,CAAC9mB,EAAE,CAAC,GAAGqB,UAAU,CAACrB,EAAE,CAAC,CAAA;QACtC,CAAA;QAED,IAAIwQ,MAAM,IAAIA,MAAM,CAACuW,cAAc,CAAC/mB,EAAE,CAAC,EAAE;YAEvC,MAAA;QACD,CAAA;IACF,CAAA;IACD,OAAO8mB,gBAAgB,CAAA;AACzB,CAAA;AAEA,SAAS1P,sBAAsBA,CAC7BX,mBAAoD,EAAA;IAEpD,IAAI,CAACA,mBAAmB,EAAE;QACxB,OAAO,CAAA,CAAE,CAAA;IACV,CAAA;IACD,OAAOM,aAAa,CAACN,mBAAmB,CAAC,CAAC,CAAC,CAAC,GACxC;QACE,uCAAA;QACAvF,UAAU,EAAE,CAAA,CAAE;IACf,CAAA,GACD;QACEA,UAAU,EAAE;YACV,CAACuF,mBAAmB,CAAC,CAAC,CAAC,CAAA,EAAGA,mBAAmB,CAAC,CAAC,CAAC,CAAClV,IAAAA;QAClD,CAAA;KACF,CAAA;AACP,CAAA;AAEA,+EAAA;AACA,uEAAA;AACA,+BAAA;AACA,SAASmV,mBAAmBA,CAC1B5V,OAAiC,EACjCgW,OAAgB,EAAA;IAEhB,IAAIkQ,eAAe,GAAGlQ,OAAO,GACzBhW,OAAO,CAAC7D,KAAK,CAAC,CAAC,EAAE6D,OAAO,CAAC6P,SAAS,EAAEN,CAAC,GAAKA,CAAC,CAAC7Q,KAAK,CAACQ,EAAE,KAAK8W,OAAO,CAAC,GAAG,CAAC,CAAC,GACtE,CAAC;WAAGhW,OAAO;KAAC,CAAA;IAChB,OACEkmB,eAAe,CAACC,OAAO,EAAE,CAACrH,IAAI,EAAEvP,CAAC,GAAKA,CAAC,CAAC7Q,KAAK,CAACuO,gBAAgB,KAAK,IAAI,CAAC,IACxEjN,OAAO,CAAC,CAAC,CAAC,CAAA;AAEd,CAAA;AAEA,SAASkP,sBAAsBA,CAACtQ,MAAiC,EAAA;IAI/D,0EAAA;IACA,IAAIF,KAAK,GACPE,MAAM,CAACpG,MAAM,KAAK,CAAC,GACfoG,MAAM,CAAC,CAAC,CAAC,GACTA,MAAM,CAACkgB,IAAI,EAAE9V,CAAC,GAAKA,CAAC,CAAC7Q,KAAK,IAAI,CAAC6Q,CAAC,CAAChP,IAAI,IAAIgP,CAAC,CAAChP,IAAI,KAAK,GAAG,CAAC,IAAI;QAC1DkF,EAAE,EAAA,sBAAA;KACH,CAAA;IAEP,OAAO;QACLc,OAAO,EAAE;YACP;gBACEQ,MAAM,EAAE,CAAA,CAAE;gBACVnH,QAAQ,EAAE,EAAE;gBACZ2K,YAAY,EAAE,EAAE;gBAChBtF,KAAAA;YACD,CAAA;SACF;QACDA,KAAAA;KACD,CAAA;AACH,CAAA;AAEA,SAASuQ,sBAAsBA,CAC7BpH,MAAc,EAAAue,MAAA,EAaR;IAAA,IAZN,EACE/sB,QAAQ,EACR2c,OAAO,EACPgB,MAAM,EACN3O,IAAI,EACJ9L,OAAAA,yBAOE,CAAA,CAAE,GAAA6pB,MAAA,CAAA;IAEN,IAAIxa,UAAU,GAAG,sBAAsB,CAAA;IACvC,IAAIya,YAAY,GAAG,iCAAiC,CAAA;IAEpD,IAAIxe,MAAM,KAAK,GAAG,EAAE;QAClB+D,UAAU,GAAG,aAAa,CAAA;QAC1B,IAAIvD,IAAI,KAAK,iBAAiB,EAAE;YAC9Bge,YAAY,GACV,wBAAA,GAAwBhtB,QAAQ,GAAA,gDAAA,GAAA,CAAA,uCAAA,GACQkD,OAAO,CAAE,CAAA;QACpD,CAAA,MAAM,IAAIya,MAAM,IAAI3d,QAAQ,IAAI2c,OAAO,EAAE;YACxCqQ,YAAY,GACV,gBAAcrP,MAAM,GAAA,gBAAA,GAAgB3d,QAAQ,GACD2c,SAAAA,GAAAA,CAAAA,yCAAAA,GAAAA,OAAO,GAAA,MAAA,CAAK,GACZ,2CAAA,CAAA;QAC9C,CAAA,MAAM,IAAI3N,IAAI,KAAK,cAAc,EAAE;YAClCge,YAAY,GAAG,qCAAqC,CAAA;QACrD,CAAA,MAAM,IAAIhe,IAAI,KAAK,cAAc,EAAE;YAClCge,YAAY,GAAG,kCAAkC,CAAA;QAClD,CAAA;IACF,CAAA,MAAM,IAAIxe,MAAM,KAAK,GAAG,EAAE;QACzB+D,UAAU,GAAG,WAAW,CAAA;QACxBya,YAAY,GAAarQ,UAAAA,GAAAA,OAAO,GAAyB3c,0BAAAA,GAAAA,QAAQ,GAAG,IAAA,CAAA;IACrE,CAAA,MAAM,IAAIwO,MAAM,KAAK,GAAG,EAAE;QACzB+D,UAAU,GAAG,WAAW,CAAA;QACxBya,YAAY,GAAA,yBAAA,GAA4BhtB,QAAQ,GAAG,IAAA,CAAA;IACpD,CAAA,MAAM,IAAIwO,MAAM,KAAK,GAAG,EAAE;QACzB+D,UAAU,GAAG,oBAAoB,CAAA;QACjC,IAAIoL,MAAM,IAAI3d,QAAQ,IAAI2c,OAAO,EAAE;YACjCqQ,YAAY,GACV,aAAA,GAAcrP,MAAM,CAAC6J,WAAW,EAAE,GAAA,gBAAA,GAAgBxnB,QAAQ,GAAA,SAAA,GAAA,CAAA,0CAAA,GACd2c,OAAO,GAAA,MAAA,CAAK,GACb,2CAAA,CAAA;SAC9C,MAAM,IAAIgB,MAAM,EAAE;YACjBqP,YAAY,GAAA,8BAA8BrP,MAAM,CAAC6J,WAAW,EAAE,GAAG,IAAA,CAAA;QAClE,CAAA;IACF,CAAA;IAED,OAAO,IAAIlV,iBAAiB,CAC1B9D,MAAM,IAAI,GAAG,EACb+D,UAAU,EACV,IAAIpP,KAAK,CAAC6pB,YAAY,CAAC,EACvB,IAAI,CACL,CAAA;AACH,CAAA;AAEA,oEAAA;AACA,SAAS1N,YAAYA,CACnB1B,OAAmC,EAAA;IAEnC,IAAIjf,OAAO,GAAG+L,MAAM,CAAC/L,OAAO,CAACif,OAAO,CAAC,CAAA;IACrC,IAAK,IAAIhX,CAAC,GAAGjI,OAAO,CAACQ,MAAM,GAAG,CAAC,EAAEyH,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,CAAE;QAC5C,IAAI,CAAC/G,GAAG,EAAEiJ,MAAM,CAAC,GAAGnK,OAAO,CAACiI,CAAC,CAAC,CAAA;QAC9B,IAAIkX,gBAAgB,CAAChV,MAAM,CAAC,EAAE;YAC5B,OAAO;gBAAEjJ,GAAG;gBAAEiJ,MAAAA;aAAQ,CAAA;QACvB,CAAA;IACF,CAAA;AACH,CAAA;AAEA,SAAS2e,iBAAiBA,CAAC9mB,IAAQ,EAAA;IACjC,IAAIqD,UAAU,GAAG,OAAOrD,IAAI,KAAK,QAAQ,GAAGC,SAAS,CAACD,IAAI,CAAC,GAAGA,IAAI,CAAA;IAClE,OAAOL,UAAU,CAAAwD,QAAA,CAAA,CAAA,CAAA,EAAME,UAAU,EAAA;QAAElD,IAAI,EAAE,EAAA;IAAE,CAAA,CAAE,CAAC,CAAA;AAChD,CAAA;AAEA,SAASqb,gBAAgBA,CAAClT,CAAW,EAAEC,CAAW,EAAA;IAChD,IAAID,CAAC,CAACjJ,QAAQ,KAAKkJ,CAAC,CAAClJ,QAAQ,IAAIiJ,CAAC,CAACpI,MAAM,KAAKqI,CAAC,CAACrI,MAAM,EAAE;QACtD,OAAO,KAAK,CAAA;IACb,CAAA;IAED,IAAIoI,CAAC,CAACnI,IAAI,KAAK,EAAE,EAAE;QACjB,sBAAA;QACA,OAAOoI,CAAC,CAACpI,IAAI,KAAK,EAAE,CAAA;KACrB,MAAM,IAAImI,CAAC,CAACnI,IAAI,KAAKoI,CAAC,CAACpI,IAAI,EAAE;QAC5B,2BAAA;QACA,OAAO,IAAI,CAAA;IACZ,CAAA,MAAM,IAAIoI,CAAC,CAACpI,IAAI,KAAK,EAAE,EAAE;QACxB,4BAAA;QACA,OAAO,IAAI,CAAA;IACZ,CAAA;IAED,6EAAA;IACA,sBAAA;IACA,OAAO,KAAK,CAAA;AACd,CAAA;AAEA,SAASkpB,SAASA,CAAcwB,GAAY,EAAA;IAC1C,OAAO,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,IAAI,IAAI,IAAI,MAAM,IAAIA,GAAG,CAAA;AAChE,CAAA;AAEA,SAAS1F,oBAAoBA,CAAChd,MAAe,EAAA;IAC3C,OACEA,MAAM,IAAI,IAAI,IACd,OAAOA,MAAM,KAAK,QAAQ,IAC1B,MAAM,IAAIA,MAAM,IAChB,QAAQ,IAAIA,MAAM,IAAA,CACjBA,MAAM,CAACkG,IAAI,KAAK/J,UAAU,CAACmC,IAAI,IAAI0B,MAAM,CAACkG,IAAI,KAAK/J,UAAU,CAACP,KAAK,CAAC,CAAA;AAEzE,CAAA;AAEA,SAASgd,kCAAkCA,CAAC5Y,MAA0B,EAAA;IACpE,OACEwc,UAAU,CAACxc,MAAM,CAACA,MAAM,CAAC,IAAIgK,mBAAmB,CAACnE,GAAG,CAAC7F,MAAM,CAACA,MAAM,CAAC0F,MAAM,CAAC,CAAA;AAE9E,CAAA;AAEA,SAASyP,gBAAgBA,CAACnV,MAAkB,EAAA;IAC1C,OAAOA,MAAM,CAACkG,IAAI,KAAK/J,UAAU,CAACinB,QAAQ,CAAA;AAC5C,CAAA;AAEA,SAAStP,aAAaA,CAAC9T,MAAkB,EAAA;IACvC,OAAOA,MAAM,CAACkG,IAAI,KAAK/J,UAAU,CAACP,KAAK,CAAA;AACzC,CAAA;AAEA,SAASoZ,gBAAgBA,CAAChV,MAAmB,EAAA;IAC3C,OAAO,CAACA,MAAM,IAAIA,MAAM,CAACkG,IAAI,MAAM/J,UAAU,CAACkN,QAAQ,CAAA;AACxD,CAAA;AAEM,SAAUyZ,sBAAsBA,CACpC3oB,KAAU,EAAA;IAEV,OACE,OAAOA,KAAK,KAAK,QAAQ,IACzBA,KAAK,IAAI,IAAI,IACb,MAAM,IAAIA,KAAK,IACf,MAAM,IAAIA,KAAK,IACf,MAAM,IAAIA,KAAK,IACfA,KAAK,CAAC+L,IAAI,KAAK,sBAAsB,CAAA;AAEzC,CAAA;AAEM,SAAU+c,cAAcA,CAAC9oB,KAAU,EAAA;IACvC,IAAIipB,QAAQ,GAAiBjpB,KAAK,CAAA;IAClC,OACEipB,QAAQ,IACR,OAAOA,QAAQ,KAAK,QAAQ,IAC5B,OAAOA,QAAQ,CAAC9kB,IAAI,KAAK,QAAQ,IACjC,OAAO8kB,QAAQ,CAAC/a,SAAS,KAAK,UAAU,IACxC,OAAO+a,QAAQ,CAAC9a,MAAM,KAAK,UAAU,IACrC,OAAO8a,QAAQ,CAAC3a,WAAW,KAAK,UAAU,CAAA;AAE9C,CAAA;AAEA,SAAS+T,UAAUA,CAACriB,KAAU,EAAA;IAC5B,OACEA,KAAK,IAAI,IAAI,IACb,OAAOA,KAAK,CAACuL,MAAM,KAAK,QAAQ,IAChC,OAAOvL,KAAK,CAACsP,UAAU,KAAK,QAAQ,IACpC,OAAOtP,KAAK,CAACwL,OAAO,KAAK,QAAQ,IACjC,OAAOxL,KAAK,CAAC8jB,IAAI,KAAK,WAAW,CAAA;AAErC,CAAA;AAEA,SAAShB,kBAAkBA,CAACjd,MAAW,EAAA;IACrC,IAAI,CAACwc,UAAU,CAACxc,MAAM,CAAC,EAAE;QACvB,OAAO,KAAK,CAAA;IACb,CAAA;IAED,IAAI0F,MAAM,GAAG1F,MAAM,CAAC0F,MAAM,CAAA;IAC1B,IAAI1O,QAAQ,GAAGgJ,MAAM,CAAC2F,OAAO,CAACmC,GAAG,CAAC,UAAU,CAAC,CAAA;IAC7C,OAAOpC,MAAM,IAAI,GAAG,IAAIA,MAAM,IAAI,GAAG,IAAI1O,QAAQ,IAAI,IAAI,CAAA;AAC3D,CAAA;AAEA,SAASklB,aAAaA,CAACrH,MAAc,EAAA;IACnC,OAAO9K,mBAAmB,CAAClE,GAAG,CAACgP,MAAM,CAACvR,WAAW,EAAgB,CAAC,CAAA;AACpE,CAAA;AAEA,SAASoO,gBAAgBA,CACvBmD,MAAc,EAAA;IAEd,OAAOhL,oBAAoB,CAAChE,GAAG,CAACgP,MAAM,CAACvR,WAAW,EAAwB,CAAC,CAAA;AAC7E,CAAA;AAEA,eAAe8V,gCAAgCA,CAC7Cvb,OAA0C,EAC1CiX,OAAmC,EACnC5N,MAAmB,EACnB8R,cAAwC,EACxCuH,iBAA4B,EAAA;IAE5B,IAAI1qB,OAAO,GAAG+L,MAAM,CAAC/L,OAAO,CAACif,OAAO,CAAC,CAAA;IACrC,IAAK,IAAI9e,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGH,OAAO,CAACQ,MAAM,EAAEL,KAAK,EAAE,CAAE;QACnD,IAAI,CAAC6d,OAAO,EAAE7T,MAAM,CAAC,GAAGnK,OAAO,CAACG,KAAK,CAAC,CAAA;QACtC,IAAImI,KAAK,GAAGN,OAAO,CAAC8e,IAAI,EAAEvP,CAAC,GAAK,CAAAA,CAAC,IAAA,IAAA,GAAA,KAAA,CAAA,GAADA,CAAC,CAAE7Q,KAAK,CAACQ,EAAE,MAAK8W,OAAO,CAAC,CAAA;QACxD,qEAAA;QACA,wEAAA;QACA,qBAAA;QACA,IAAI,CAAC1V,KAAK,EAAE;YACV,SAAA;QACD,CAAA;QAED,IAAIqiB,YAAY,GAAGxH,cAAc,CAAC2D,IAAI,EACnCvP,CAAC,GAAKA,CAAC,CAAC7Q,KAAK,CAACQ,EAAE,KAAKoB,KAAM,CAAC5B,KAAK,CAACQ,EAAE,CACtC,CAAA;QACD,IAAIonB,oBAAoB,GACtB3D,YAAY,IAAI,IAAI,IACpB,CAACL,kBAAkB,CAACK,YAAY,EAAEriB,KAAK,CAAC,IACxC,CAACoiB,iBAAiB,IAAIA,iBAAiB,CAACpiB,KAAK,CAAC5B,KAAK,CAACQ,EAAE,CAAC,MAAM5G,SAAS,CAAA;QAExE,IAAIgf,gBAAgB,CAACnV,MAAM,CAAC,IAAImkB,oBAAoB,EAAE;YACpD,wEAAA;YACA,oEAAA;YACA,kBAAA;YACA,MAAMhM,mBAAmB,CAACnY,MAAM,EAAEkH,MAAM,EAAE,KAAK,CAAC,CAACQ,IAAI,EAAE1H,MAAM,IAAI;gBAC/D,IAAIA,MAAM,EAAE;oBACV8U,OAAO,CAACjB,OAAO,CAAC,GAAG7T,MAAM,CAAA;gBAC1B,CAAA;YACH,CAAC,CAAC,CAAA;QACH,CAAA;IACF,CAAA;AACH,CAAA;AAEA,eAAeqZ,6BAA6BA,CAC1Cxb,OAA0C,EAC1CiX,OAAmC,EACnCY,oBAA2C,EAAA;IAE3C,IAAK,IAAI1f,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG0f,oBAAoB,CAACrf,MAAM,EAAEL,KAAK,EAAE,CAAE;QAChE,IAAI,EAAEe,GAAG,EAAE8c,OAAO,EAAE/M,UAAAA,EAAY,GAAG4O,oBAAoB,CAAC1f,KAAK,CAAC,CAAA;QAC9D,IAAIgK,MAAM,GAAG8U,OAAO,CAAC/d,GAAG,CAAC,CAAA;QACzB,IAAIoH,KAAK,GAAGN,OAAO,CAAC8e,IAAI,EAAEvP,CAAC,GAAK,CAAAA,CAAC,IAAA,IAAA,GAAA,KAAA,CAAA,GAADA,CAAC,CAAE7Q,KAAK,CAACQ,EAAE,MAAK8W,OAAO,CAAC,CAAA;QACxD,qEAAA;QACA,wEAAA;QACA,qBAAA;QACA,IAAI,CAAC1V,KAAK,EAAE;YACV,SAAA;QACD,CAAA;QAED,IAAIgX,gBAAgB,CAACnV,MAAM,CAAC,EAAE;YAC5B,wEAAA;YACA,oEAAA;YACA,kBAAA;YACA9F,SAAS,CACP4M,UAAU,EACV,sEAAsE,CACvE,CAAA;YACD,MAAMqR,mBAAmB,CAACnY,MAAM,EAAE8G,UAAU,CAACI,MAAM,EAAE,IAAI,CAAC,CAACQ,IAAI,EAC5D1H,MAAM,IAAI;gBACT,IAAIA,MAAM,EAAE;oBACV8U,OAAO,CAAC/d,GAAG,CAAC,GAAGiJ,MAAM,CAAA;gBACtB,CAAA;YACH,CAAC,CACF,CAAA;QACF,CAAA;IACF,CAAA;AACH,CAAA;AAEA,eAAemY,mBAAmBA,CAChCnY,MAAsB,EACtBkH,MAAmB,EACnBkd,MAAM,EAAQ;IAAA,IAAdA,MAAM,KAAA,KAAA,CAAA,EAAA;QAANA,MAAM,GAAG,KAAK,CAAA;IAAA,CAAA;IAEd,IAAIrc,OAAO,GAAG,MAAM/H,MAAM,CAAC0W,YAAY,CAACjO,WAAW,CAACvB,MAAM,CAAC,CAAA;IAC3D,IAAIa,OAAO,EAAE;QACX,OAAA;IACD,CAAA;IAED,IAAIqc,MAAM,EAAE;QACV,IAAI;YACF,OAAO;gBACLle,IAAI,EAAE/J,UAAU,CAACmC,IAAI;gBACrBA,IAAI,EAAE0B,MAAM,CAAC0W,YAAY,CAAC9N,aAAAA;aAC3B,CAAA;SACF,CAAC,OAAOnO,CAAC,EAAE;YACV,uEAAA;YACA,OAAO;gBACLyL,IAAI,EAAE/J,UAAU,CAACP,KAAK;gBACtBA,KAAK,EAAEnB,CAAAA;aACR,CAAA;QACF,CAAA;IACF,CAAA;IAED,OAAO;QACLyL,IAAI,EAAE/J,UAAU,CAACmC,IAAI;QACrBA,IAAI,EAAE0B,MAAM,CAAC0W,YAAY,CAACpY,IAAAA;KAC3B,CAAA;AACH,CAAA;AAEA,SAAS+f,kBAAkBA,CAACtmB,MAAc,EAAA;IACxC,OAAO,IAAI8mB,eAAe,CAAC9mB,MAAM,CAAC,CAACssB,MAAM,CAAC,OAAO,CAAC,CAACtjB,IAAI,EAAEqC,CAAC,GAAKA,CAAC,KAAK,EAAE,CAAC,CAAA;AAC1E,CAAA;AAEA,SAASwR,cAAcA,CACrB/W,OAAiC,EACjC7G,QAA2B,EAAA;IAE3B,IAAIe,MAAM,GACR,OAAOf,QAAQ,KAAK,QAAQ,GAAGc,SAAS,CAACd,QAAQ,CAAC,CAACe,MAAM,GAAGf,QAAQ,CAACe,MAAM,CAAA;IAC7E,IACE8F,OAAO,CAACA,OAAO,CAACxH,MAAM,GAAG,CAAC,CAAC,CAACkG,KAAK,CAACvG,KAAK,IACvCqoB,kBAAkB,CAACtmB,MAAM,IAAI,EAAE,CAAC,EAChC;QACA,oDAAA;QACA,OAAO8F,OAAO,CAACA,OAAO,CAACxH,MAAM,GAAG,CAAC,CAAC,CAAA;IACnC,CAAA;IACD,2EAAA;IACA,0BAAA;IACA,IAAImO,WAAW,GAAGH,0BAA0B,CAACxG,OAAO,CAAC,CAAA;IACrD,OAAO2G,WAAW,CAACA,WAAW,CAACnO,MAAM,GAAG,CAAC,CAAC,CAAA;AAC5C,CAAA;AAEA,SAASif,2BAA2BA,CAClCzH,UAAsB,EAAA;IAEtB,IAAI,EAAE1D,UAAU,EAAEC,UAAU,EAAEC,WAAW,EAAEE,IAAI,EAAED,QAAQ,EAAE/E,IAAAA,EAAM,GAC/DsI,UAAU,CAAA;IACZ,IAAI,CAAC1D,UAAU,IAAI,CAACC,UAAU,IAAI,CAACC,WAAW,EAAE;QAC9C,OAAA;IACD,CAAA;IAED,IAAIE,IAAI,IAAI,IAAI,EAAE;QAChB,OAAO;YACLJ,UAAU;YACVC,UAAU;YACVC,WAAW;YACXC,QAAQ,EAAEnU,SAAS;YACnBoP,IAAI,EAAEpP,SAAS;YACfoU,IAAAA;SACD,CAAA;IACF,CAAA,MAAM,IAAID,QAAQ,IAAI,IAAI,EAAE;QAC3B,OAAO;YACLH,UAAU;YACVC,UAAU;YACVC,WAAW;YACXC,QAAQ;YACR/E,IAAI,EAAEpP,SAAS;YACfoU,IAAI,EAAEpU,SAAAA;SACP,CAAA;IACF,CAAA,MAAM,IAAIoP,IAAI,KAAKpP,SAAS,EAAE;QAC7B,OAAO;YACLgU,UAAU;YACVC,UAAU;YACVC,WAAW;YACXC,QAAQ,EAAEnU,SAAS;YACnBoP,IAAI;YACJgF,IAAI,EAAEpU,SAAAA;SACP,CAAA;IACF,CAAA;AACH,CAAA;AAEA,SAAS4d,oBAAoBA,CAC3B/c,QAAkB,EAClBsb,UAAuB,EAAA;IAEvB,IAAIA,UAAU,EAAE;QACd,IAAIzE,UAAU,GAAgC;YAC5C3X,KAAK,EAAE,SAAS;YAChBc,QAAQ;YACRmT,UAAU,EAAEmI,UAAU,CAACnI,UAAU;YACjCC,UAAU,EAAEkI,UAAU,CAAClI,UAAU;YACjCC,WAAW,EAAEiI,UAAU,CAACjI,WAAW;YACnCC,QAAQ,EAAEgI,UAAU,CAAChI,QAAQ;YAC7B/E,IAAI,EAAE+M,UAAU,CAAC/M,IAAI;YACrBgF,IAAI,EAAE+H,UAAU,CAAC/H,IAAAA;SAClB,CAAA;QACD,OAAOsD,UAAU,CAAA;IAClB,CAAA,MAAM;QACL,IAAIA,UAAU,GAAgC;YAC5C3X,KAAK,EAAE,SAAS;YAChBc,QAAQ;YACRmT,UAAU,EAAEhU,SAAS;YACrBiU,UAAU,EAAEjU,SAAS;YACrBkU,WAAW,EAAElU,SAAS;YACtBmU,QAAQ,EAAEnU,SAAS;YACnBoP,IAAI,EAAEpP,SAAS;YACfoU,IAAI,EAAEpU,SAAAA;SACP,CAAA;QACD,OAAO0X,UAAU,CAAA;IAClB,CAAA;AACH,CAAA;AAEA,SAASwG,uBAAuBA,CAC9Brd,QAAkB,EAClBsb,UAAsB,EAAA;IAEtB,IAAIzE,UAAU,GAAmC;QAC/C3X,KAAK,EAAE,YAAY;QACnBc,QAAQ;QACRmT,UAAU,EAAEmI,UAAU,CAACnI,UAAU;QACjCC,UAAU,EAAEkI,UAAU,CAAClI,UAAU;QACjCC,WAAW,EAAEiI,UAAU,CAACjI,WAAW;QACnCC,QAAQ,EAAEgI,UAAU,CAAChI,QAAQ;QAC7B/E,IAAI,EAAE+M,UAAU,CAAC/M,IAAI;QACrBgF,IAAI,EAAE+H,UAAU,CAAC/H,IAAAA;KAClB,CAAA;IACD,OAAOsD,UAAU,CAAA;AACnB,CAAA;AAEA,SAASkJ,iBAAiBA,CACxBzE,UAAuB,EACvBhU,IAAsB,EAAA;IAEtB,IAAIgU,UAAU,EAAE;QACd,IAAItB,OAAO,GAA6B;YACtC9a,KAAK,EAAE,SAAS;YAChBiU,UAAU,EAAEmI,UAAU,CAACnI,UAAU;YACjCC,UAAU,EAAEkI,UAAU,CAAClI,UAAU;YACjCC,WAAW,EAAEiI,UAAU,CAACjI,WAAW;YACnCC,QAAQ,EAAEgI,UAAU,CAAChI,QAAQ;YAC7B/E,IAAI,EAAE+M,UAAU,CAAC/M,IAAI;YACrBgF,IAAI,EAAE+H,UAAU,CAAC/H,IAAI;YACrBjM,IAAAA;SACD,CAAA;QACD,OAAO0S,OAAO,CAAA;IACf,CAAA,MAAM;QACL,IAAIA,OAAO,GAA6B;YACtC9a,KAAK,EAAE,SAAS;YAChBiU,UAAU,EAAEhU,SAAS;YACrBiU,UAAU,EAAEjU,SAAS;YACrBkU,WAAW,EAAElU,SAAS;YACtBmU,QAAQ,EAAEnU,SAAS;YACnBoP,IAAI,EAAEpP,SAAS;YACfoU,IAAI,EAAEpU,SAAS;YACfmI,IAAAA;SACD,CAAA;QACD,OAAO0S,OAAO,CAAA;IACf,CAAA;AACH,CAAA;AAEA,SAASwG,oBAAoBA,CAC3BlF,UAAsB,EACtBgF,eAAyB,EAAA;IAEzB,IAAItG,OAAO,GAAgC;QACzC9a,KAAK,EAAE,YAAY;QACnBiU,UAAU,EAAEmI,UAAU,CAACnI,UAAU;QACjCC,UAAU,EAAEkI,UAAU,CAAClI,UAAU;QACjCC,WAAW,EAAEiI,UAAU,CAACjI,WAAW;QACnCC,QAAQ,EAAEgI,UAAU,CAAChI,QAAQ;QAC7B/E,IAAI,EAAE+M,UAAU,CAAC/M,IAAI;QACrBgF,IAAI,EAAE+H,UAAU,CAAC/H,IAAI;QACrBjM,IAAI,EAAEgZ,eAAe,GAAGA,eAAe,CAAChZ,IAAI,GAAGnI,SAAAA;KAChD,CAAA;IACD,OAAO6a,OAAO,CAAA;AAChB,CAAA;AAEA,SAAS6G,cAAcA,CAACvZ,IAAqB,EAAA;IAC3C,IAAI0S,OAAO,GAA0B;QACnC9a,KAAK,EAAE,MAAM;QACbiU,UAAU,EAAEhU,SAAS;QACrBiU,UAAU,EAAEjU,SAAS;QACrBkU,WAAW,EAAElU,SAAS;QACtBmU,QAAQ,EAAEnU,SAAS;QACnBoP,IAAI,EAAEpP,SAAS;QACfoU,IAAI,EAAEpU,SAAS;QACfmI,IAAAA;KACD,CAAA;IACD,OAAO0S,OAAO,CAAA;AAChB,CAAA;AAEA,SAASZ,yBAAyBA,CAChCkU,OAAe,EACfC,WAAqC,EAAA;IAErC,IAAI;QACF,IAAIC,gBAAgB,GAAGF,OAAO,CAACG,cAAc,CAACC,OAAO,CACnD1Z,uBAAuB,CACxB,CAAA;QACD,IAAIwZ,gBAAgB,EAAE;YACpB,IAAIjf,IAAI,GAAGlO,IAAI,CAAC0nB,KAAK,CAACyF,gBAAgB,CAAC,CAAA;YACvC,KAAK,IAAI,CAAChc,CAAC,EAAEpF,CAAC,CAAC,IAAIxB,MAAM,CAAC/L,OAAO,CAAC0P,IAAI,IAAI,CAAA,CAAE,CAAC,CAAE;gBAC7C,IAAInC,CAAC,IAAIoD,KAAK,CAACC,OAAO,CAACrD,CAAC,CAAC,EAAE;oBACzBmhB,WAAW,CAACze,GAAG,CAAC0C,CAAC,EAAE,IAAInM,GAAG,CAAC+G,CAAC,IAAI,EAAE,CAAC,CAAC,CAAA;gBACrC,CAAA;YACF,CAAA;QACF,CAAA;KACF,CAAC,OAAO3I,CAAC,EAAE;IACV,kCAAA;IAAA,CAAA;AAEJ,CAAA;AAEA,SAAS6V,yBAAyBA,CAChCgU,OAAe,EACfC,WAAqC,EAAA;IAErC,IAAIA,WAAW,CAAC5b,IAAI,GAAG,CAAC,EAAE;QACxB,IAAIpD,IAAI,GAA6B,CAAA,CAAE,CAAA;QACvC,KAAK,IAAI,CAACiD,CAAC,EAAEpF,CAAC,CAAC,IAAImhB,WAAW,CAAE;YAC9Bhf,IAAI,CAACiD,CAAC,CAAC,GAAG,CAAC;mBAAGpF,CAAC;aAAC,CAAA;QACjB,CAAA;QACD,IAAI;YACFkhB,OAAO,CAACG,cAAc,CAACE,OAAO,CAC5B3Z,uBAAuB,EACvB3T,IAAI,CAACC,SAAS,CAACiO,IAAI,CAAC,CACrB,CAAA;SACF,CAAC,OAAO3J,KAAK,EAAE;YACdzE,OAAO,CACL,KAAK,EACyDyE,6DAAAA,GAAAA,KAAK,GAAA,IAAI,CACxE,CAAA;QACF,CAAA;IACF,CAAA;AACH,CAAA","ignoreList":[0,1,2],"debugId":null}}]
}